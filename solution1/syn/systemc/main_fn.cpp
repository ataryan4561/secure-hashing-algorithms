// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "main_fn.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic main_fn::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic main_fn::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> main_fn::ap_ST_fsm_state1 = "1";
const sc_lv<6> main_fn::ap_ST_fsm_state2 = "10";
const sc_lv<6> main_fn::ap_ST_fsm_state3 = "100";
const sc_lv<6> main_fn::ap_ST_fsm_state4 = "1000";
const sc_lv<6> main_fn::ap_ST_fsm_state5 = "10000";
const sc_lv<6> main_fn::ap_ST_fsm_state6 = "100000";
const sc_lv<32> main_fn::ap_const_lv32_0 = "00000000000000000000000000000000";
const int main_fn::C_S_AXI_DATA_WIDTH = "100000";
const int main_fn::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int main_fn::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int main_fn::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int main_fn::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> main_fn::ap_const_lv32_1 = "1";
const sc_lv<32> main_fn::ap_const_lv32_3 = "11";
const sc_lv<32> main_fn::ap_const_lv32_4 = "100";
const sc_lv<32> main_fn::ap_const_lv32_5 = "101";
const sc_lv<32> main_fn::ap_const_lv32_2 = "10";
const sc_lv<8> main_fn::ap_const_lv8_0 = "00000000";
const sc_lv<1> main_fn::ap_const_lv1_0 = "0";
const sc_lv<2> main_fn::ap_const_lv2_0 = "00";
const bool main_fn::ap_const_boolean_1 = true;

main_fn::main_fn(sc_module_name name) : sc_module(name), mVcdFile(0) {
    main_fn_AXILiteS_s_axi_U = new main_fn_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("main_fn_AXILiteS_s_axi_U");
    main_fn_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    main_fn_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    main_fn_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    main_fn_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    main_fn_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    main_fn_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    main_fn_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    main_fn_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    main_fn_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    main_fn_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    main_fn_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    main_fn_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    main_fn_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    main_fn_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    main_fn_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    main_fn_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    main_fn_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    main_fn_AXILiteS_s_axi_U->ACLK(ap_clk);
    main_fn_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    main_fn_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    main_fn_AXILiteS_s_axi_U->ap_start(ap_start);
    main_fn_AXILiteS_s_axi_U->interrupt(interrupt);
    main_fn_AXILiteS_s_axi_U->ap_ready(ap_ready);
    main_fn_AXILiteS_s_axi_U->ap_done(ap_done);
    main_fn_AXILiteS_s_axi_U->ap_idle(ap_idle);
    main_fn_AXILiteS_s_axi_U->input_r(input_r);
    main_fn_AXILiteS_s_axi_U->output_r(output_r);
    main_fn_gmem_m_axi_U = new main_fn_gmem_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("main_fn_gmem_m_axi_U");
    main_fn_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    main_fn_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    main_fn_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    main_fn_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    main_fn_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    main_fn_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    main_fn_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    main_fn_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    main_fn_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    main_fn_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    main_fn_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    main_fn_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    main_fn_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    main_fn_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    main_fn_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    main_fn_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    main_fn_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    main_fn_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    main_fn_gmem_m_axi_U->WID(m_axi_gmem_WID);
    main_fn_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    main_fn_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    main_fn_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    main_fn_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    main_fn_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    main_fn_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    main_fn_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    main_fn_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    main_fn_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    main_fn_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    main_fn_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    main_fn_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    main_fn_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    main_fn_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    main_fn_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    main_fn_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    main_fn_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    main_fn_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    main_fn_gmem_m_axi_U->RID(m_axi_gmem_RID);
    main_fn_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    main_fn_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    main_fn_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    main_fn_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    main_fn_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    main_fn_gmem_m_axi_U->BID(m_axi_gmem_BID);
    main_fn_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    main_fn_gmem_m_axi_U->ACLK(ap_clk);
    main_fn_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    main_fn_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    main_fn_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    main_fn_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    main_fn_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    main_fn_gmem_m_axi_U->I_ARID(gmem_ARID);
    main_fn_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    main_fn_gmem_m_axi_U->I_ARSIZE(gmem_ARSIZE);
    main_fn_gmem_m_axi_U->I_ARLOCK(gmem_ARLOCK);
    main_fn_gmem_m_axi_U->I_ARCACHE(gmem_ARCACHE);
    main_fn_gmem_m_axi_U->I_ARQOS(gmem_ARQOS);
    main_fn_gmem_m_axi_U->I_ARPROT(gmem_ARPROT);
    main_fn_gmem_m_axi_U->I_ARUSER(gmem_ARUSER);
    main_fn_gmem_m_axi_U->I_ARBURST(gmem_ARBURST);
    main_fn_gmem_m_axi_U->I_ARREGION(gmem_ARREGION);
    main_fn_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    main_fn_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    main_fn_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    main_fn_gmem_m_axi_U->I_RID(gmem_RID);
    main_fn_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    main_fn_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    main_fn_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    main_fn_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    main_fn_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    main_fn_gmem_m_axi_U->I_AWADDR(grp_sha256_final_fu_68_m_axi_hash_AWADDR);
    main_fn_gmem_m_axi_U->I_AWID(grp_sha256_final_fu_68_m_axi_hash_AWID);
    main_fn_gmem_m_axi_U->I_AWLEN(grp_sha256_final_fu_68_m_axi_hash_AWLEN);
    main_fn_gmem_m_axi_U->I_AWSIZE(grp_sha256_final_fu_68_m_axi_hash_AWSIZE);
    main_fn_gmem_m_axi_U->I_AWLOCK(grp_sha256_final_fu_68_m_axi_hash_AWLOCK);
    main_fn_gmem_m_axi_U->I_AWCACHE(grp_sha256_final_fu_68_m_axi_hash_AWCACHE);
    main_fn_gmem_m_axi_U->I_AWQOS(grp_sha256_final_fu_68_m_axi_hash_AWQOS);
    main_fn_gmem_m_axi_U->I_AWPROT(grp_sha256_final_fu_68_m_axi_hash_AWPROT);
    main_fn_gmem_m_axi_U->I_AWUSER(grp_sha256_final_fu_68_m_axi_hash_AWUSER);
    main_fn_gmem_m_axi_U->I_AWBURST(grp_sha256_final_fu_68_m_axi_hash_AWBURST);
    main_fn_gmem_m_axi_U->I_AWREGION(grp_sha256_final_fu_68_m_axi_hash_AWREGION);
    main_fn_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    main_fn_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    main_fn_gmem_m_axi_U->I_WDATA(grp_sha256_final_fu_68_m_axi_hash_WDATA);
    main_fn_gmem_m_axi_U->I_WID(grp_sha256_final_fu_68_m_axi_hash_WID);
    main_fn_gmem_m_axi_U->I_WUSER(grp_sha256_final_fu_68_m_axi_hash_WUSER);
    main_fn_gmem_m_axi_U->I_WLAST(grp_sha256_final_fu_68_m_axi_hash_WLAST);
    main_fn_gmem_m_axi_U->I_WSTRB(grp_sha256_final_fu_68_m_axi_hash_WSTRB);
    main_fn_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    main_fn_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    main_fn_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    main_fn_gmem_m_axi_U->I_BID(gmem_BID);
    main_fn_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    ctx_data_U = new main_fn_ctx_data("ctx_data_U");
    ctx_data_U->clk(ap_clk);
    ctx_data_U->reset(ap_rst_n_inv);
    ctx_data_U->address0(ctx_data_address0);
    ctx_data_U->ce0(ctx_data_ce0);
    ctx_data_U->we0(ctx_data_we0);
    ctx_data_U->d0(ctx_data_d0);
    ctx_data_U->q0(ctx_data_q0);
    ctx_data_U->address1(ctx_data_address1);
    ctx_data_U->ce1(ctx_data_ce1);
    ctx_data_U->we1(ctx_data_we1);
    ctx_data_U->d1(grp_sha256_final_fu_68_ctx_data_d1);
    ctx_data_U->q1(ctx_data_q1);
    grp_sha256_final_fu_68 = new sha256_final("grp_sha256_final_fu_68");
    grp_sha256_final_fu_68->ap_clk(ap_clk);
    grp_sha256_final_fu_68->ap_rst(ap_rst_n_inv);
    grp_sha256_final_fu_68->ap_start(grp_sha256_final_fu_68_ap_start);
    grp_sha256_final_fu_68->ap_done(grp_sha256_final_fu_68_ap_done);
    grp_sha256_final_fu_68->ap_idle(grp_sha256_final_fu_68_ap_idle);
    grp_sha256_final_fu_68->ap_ready(grp_sha256_final_fu_68_ap_ready);
    grp_sha256_final_fu_68->ctx_data_address0(grp_sha256_final_fu_68_ctx_data_address0);
    grp_sha256_final_fu_68->ctx_data_ce0(grp_sha256_final_fu_68_ctx_data_ce0);
    grp_sha256_final_fu_68->ctx_data_we0(grp_sha256_final_fu_68_ctx_data_we0);
    grp_sha256_final_fu_68->ctx_data_d0(grp_sha256_final_fu_68_ctx_data_d0);
    grp_sha256_final_fu_68->ctx_data_q0(ctx_data_q0);
    grp_sha256_final_fu_68->ctx_data_address1(grp_sha256_final_fu_68_ctx_data_address1);
    grp_sha256_final_fu_68->ctx_data_ce1(grp_sha256_final_fu_68_ctx_data_ce1);
    grp_sha256_final_fu_68->ctx_data_we1(grp_sha256_final_fu_68_ctx_data_we1);
    grp_sha256_final_fu_68->ctx_data_d1(grp_sha256_final_fu_68_ctx_data_d1);
    grp_sha256_final_fu_68->ctx_data_q1(ctx_data_q1);
    grp_sha256_final_fu_68->ctx_datalen_read(ctx_datalen_reg_168);
    grp_sha256_final_fu_68->ctx_bitlen_read(ctx_bitlen_reg_163);
    grp_sha256_final_fu_68->p_read2(ctx_state_0_reg_173);
    grp_sha256_final_fu_68->p_read3(ctx_state_1_reg_178);
    grp_sha256_final_fu_68->p_read4(ctx_state_2_reg_183);
    grp_sha256_final_fu_68->p_read5(ctx_state_3_reg_188);
    grp_sha256_final_fu_68->p_read6(ctx_state_4_reg_193);
    grp_sha256_final_fu_68->p_read7(ctx_state_5_reg_198);
    grp_sha256_final_fu_68->p_read8(ctx_state_6_reg_203);
    grp_sha256_final_fu_68->p_read9(ctx_state_7_reg_208);
    grp_sha256_final_fu_68->m_axi_hash_AWVALID(grp_sha256_final_fu_68_m_axi_hash_AWVALID);
    grp_sha256_final_fu_68->m_axi_hash_AWREADY(gmem_AWREADY);
    grp_sha256_final_fu_68->m_axi_hash_AWADDR(grp_sha256_final_fu_68_m_axi_hash_AWADDR);
    grp_sha256_final_fu_68->m_axi_hash_AWID(grp_sha256_final_fu_68_m_axi_hash_AWID);
    grp_sha256_final_fu_68->m_axi_hash_AWLEN(grp_sha256_final_fu_68_m_axi_hash_AWLEN);
    grp_sha256_final_fu_68->m_axi_hash_AWSIZE(grp_sha256_final_fu_68_m_axi_hash_AWSIZE);
    grp_sha256_final_fu_68->m_axi_hash_AWBURST(grp_sha256_final_fu_68_m_axi_hash_AWBURST);
    grp_sha256_final_fu_68->m_axi_hash_AWLOCK(grp_sha256_final_fu_68_m_axi_hash_AWLOCK);
    grp_sha256_final_fu_68->m_axi_hash_AWCACHE(grp_sha256_final_fu_68_m_axi_hash_AWCACHE);
    grp_sha256_final_fu_68->m_axi_hash_AWPROT(grp_sha256_final_fu_68_m_axi_hash_AWPROT);
    grp_sha256_final_fu_68->m_axi_hash_AWQOS(grp_sha256_final_fu_68_m_axi_hash_AWQOS);
    grp_sha256_final_fu_68->m_axi_hash_AWREGION(grp_sha256_final_fu_68_m_axi_hash_AWREGION);
    grp_sha256_final_fu_68->m_axi_hash_AWUSER(grp_sha256_final_fu_68_m_axi_hash_AWUSER);
    grp_sha256_final_fu_68->m_axi_hash_WVALID(grp_sha256_final_fu_68_m_axi_hash_WVALID);
    grp_sha256_final_fu_68->m_axi_hash_WREADY(gmem_WREADY);
    grp_sha256_final_fu_68->m_axi_hash_WDATA(grp_sha256_final_fu_68_m_axi_hash_WDATA);
    grp_sha256_final_fu_68->m_axi_hash_WSTRB(grp_sha256_final_fu_68_m_axi_hash_WSTRB);
    grp_sha256_final_fu_68->m_axi_hash_WLAST(grp_sha256_final_fu_68_m_axi_hash_WLAST);
    grp_sha256_final_fu_68->m_axi_hash_WID(grp_sha256_final_fu_68_m_axi_hash_WID);
    grp_sha256_final_fu_68->m_axi_hash_WUSER(grp_sha256_final_fu_68_m_axi_hash_WUSER);
    grp_sha256_final_fu_68->m_axi_hash_ARVALID(grp_sha256_final_fu_68_m_axi_hash_ARVALID);
    grp_sha256_final_fu_68->m_axi_hash_ARREADY(ap_var_for_const1);
    grp_sha256_final_fu_68->m_axi_hash_ARADDR(grp_sha256_final_fu_68_m_axi_hash_ARADDR);
    grp_sha256_final_fu_68->m_axi_hash_ARID(grp_sha256_final_fu_68_m_axi_hash_ARID);
    grp_sha256_final_fu_68->m_axi_hash_ARLEN(grp_sha256_final_fu_68_m_axi_hash_ARLEN);
    grp_sha256_final_fu_68->m_axi_hash_ARSIZE(grp_sha256_final_fu_68_m_axi_hash_ARSIZE);
    grp_sha256_final_fu_68->m_axi_hash_ARBURST(grp_sha256_final_fu_68_m_axi_hash_ARBURST);
    grp_sha256_final_fu_68->m_axi_hash_ARLOCK(grp_sha256_final_fu_68_m_axi_hash_ARLOCK);
    grp_sha256_final_fu_68->m_axi_hash_ARCACHE(grp_sha256_final_fu_68_m_axi_hash_ARCACHE);
    grp_sha256_final_fu_68->m_axi_hash_ARPROT(grp_sha256_final_fu_68_m_axi_hash_ARPROT);
    grp_sha256_final_fu_68->m_axi_hash_ARQOS(grp_sha256_final_fu_68_m_axi_hash_ARQOS);
    grp_sha256_final_fu_68->m_axi_hash_ARREGION(grp_sha256_final_fu_68_m_axi_hash_ARREGION);
    grp_sha256_final_fu_68->m_axi_hash_ARUSER(grp_sha256_final_fu_68_m_axi_hash_ARUSER);
    grp_sha256_final_fu_68->m_axi_hash_RVALID(ap_var_for_const1);
    grp_sha256_final_fu_68->m_axi_hash_RREADY(grp_sha256_final_fu_68_m_axi_hash_RREADY);
    grp_sha256_final_fu_68->m_axi_hash_RDATA(ap_var_for_const2);
    grp_sha256_final_fu_68->m_axi_hash_RLAST(ap_var_for_const1);
    grp_sha256_final_fu_68->m_axi_hash_RID(ap_var_for_const3);
    grp_sha256_final_fu_68->m_axi_hash_RUSER(ap_var_for_const3);
    grp_sha256_final_fu_68->m_axi_hash_RRESP(ap_var_for_const4);
    grp_sha256_final_fu_68->m_axi_hash_BVALID(gmem_BVALID);
    grp_sha256_final_fu_68->m_axi_hash_BREADY(grp_sha256_final_fu_68_m_axi_hash_BREADY);
    grp_sha256_final_fu_68->m_axi_hash_BRESP(gmem_BRESP);
    grp_sha256_final_fu_68->m_axi_hash_BID(gmem_BID);
    grp_sha256_final_fu_68->m_axi_hash_BUSER(gmem_BUSER);
    grp_sha256_final_fu_68->hash_offset(output_read_reg_147);
    grp_sha256_update_fu_88 = new sha256_update("grp_sha256_update_fu_88");
    grp_sha256_update_fu_88->ap_clk(ap_clk);
    grp_sha256_update_fu_88->ap_rst(ap_rst_n_inv);
    grp_sha256_update_fu_88->ap_start(grp_sha256_update_fu_88_ap_start);
    grp_sha256_update_fu_88->ap_done(grp_sha256_update_fu_88_ap_done);
    grp_sha256_update_fu_88->ap_idle(grp_sha256_update_fu_88_ap_idle);
    grp_sha256_update_fu_88->ap_ready(grp_sha256_update_fu_88_ap_ready);
    grp_sha256_update_fu_88->ctx_data_address0(grp_sha256_update_fu_88_ctx_data_address0);
    grp_sha256_update_fu_88->ctx_data_ce0(grp_sha256_update_fu_88_ctx_data_ce0);
    grp_sha256_update_fu_88->ctx_data_we0(grp_sha256_update_fu_88_ctx_data_we0);
    grp_sha256_update_fu_88->ctx_data_d0(grp_sha256_update_fu_88_ctx_data_d0);
    grp_sha256_update_fu_88->ctx_data_q0(ctx_data_q0);
    grp_sha256_update_fu_88->ctx_data_address1(grp_sha256_update_fu_88_ctx_data_address1);
    grp_sha256_update_fu_88->ctx_data_ce1(grp_sha256_update_fu_88_ctx_data_ce1);
    grp_sha256_update_fu_88->ctx_data_q1(ctx_data_q1);
    grp_sha256_update_fu_88->m_axi_data_AWVALID(grp_sha256_update_fu_88_m_axi_data_AWVALID);
    grp_sha256_update_fu_88->m_axi_data_AWREADY(ap_var_for_const1);
    grp_sha256_update_fu_88->m_axi_data_AWADDR(grp_sha256_update_fu_88_m_axi_data_AWADDR);
    grp_sha256_update_fu_88->m_axi_data_AWID(grp_sha256_update_fu_88_m_axi_data_AWID);
    grp_sha256_update_fu_88->m_axi_data_AWLEN(grp_sha256_update_fu_88_m_axi_data_AWLEN);
    grp_sha256_update_fu_88->m_axi_data_AWSIZE(grp_sha256_update_fu_88_m_axi_data_AWSIZE);
    grp_sha256_update_fu_88->m_axi_data_AWBURST(grp_sha256_update_fu_88_m_axi_data_AWBURST);
    grp_sha256_update_fu_88->m_axi_data_AWLOCK(grp_sha256_update_fu_88_m_axi_data_AWLOCK);
    grp_sha256_update_fu_88->m_axi_data_AWCACHE(grp_sha256_update_fu_88_m_axi_data_AWCACHE);
    grp_sha256_update_fu_88->m_axi_data_AWPROT(grp_sha256_update_fu_88_m_axi_data_AWPROT);
    grp_sha256_update_fu_88->m_axi_data_AWQOS(grp_sha256_update_fu_88_m_axi_data_AWQOS);
    grp_sha256_update_fu_88->m_axi_data_AWREGION(grp_sha256_update_fu_88_m_axi_data_AWREGION);
    grp_sha256_update_fu_88->m_axi_data_AWUSER(grp_sha256_update_fu_88_m_axi_data_AWUSER);
    grp_sha256_update_fu_88->m_axi_data_WVALID(grp_sha256_update_fu_88_m_axi_data_WVALID);
    grp_sha256_update_fu_88->m_axi_data_WREADY(ap_var_for_const1);
    grp_sha256_update_fu_88->m_axi_data_WDATA(grp_sha256_update_fu_88_m_axi_data_WDATA);
    grp_sha256_update_fu_88->m_axi_data_WSTRB(grp_sha256_update_fu_88_m_axi_data_WSTRB);
    grp_sha256_update_fu_88->m_axi_data_WLAST(grp_sha256_update_fu_88_m_axi_data_WLAST);
    grp_sha256_update_fu_88->m_axi_data_WID(grp_sha256_update_fu_88_m_axi_data_WID);
    grp_sha256_update_fu_88->m_axi_data_WUSER(grp_sha256_update_fu_88_m_axi_data_WUSER);
    grp_sha256_update_fu_88->m_axi_data_ARVALID(grp_sha256_update_fu_88_m_axi_data_ARVALID);
    grp_sha256_update_fu_88->m_axi_data_ARREADY(gmem_ARREADY);
    grp_sha256_update_fu_88->m_axi_data_ARADDR(grp_sha256_update_fu_88_m_axi_data_ARADDR);
    grp_sha256_update_fu_88->m_axi_data_ARID(grp_sha256_update_fu_88_m_axi_data_ARID);
    grp_sha256_update_fu_88->m_axi_data_ARLEN(grp_sha256_update_fu_88_m_axi_data_ARLEN);
    grp_sha256_update_fu_88->m_axi_data_ARSIZE(grp_sha256_update_fu_88_m_axi_data_ARSIZE);
    grp_sha256_update_fu_88->m_axi_data_ARBURST(grp_sha256_update_fu_88_m_axi_data_ARBURST);
    grp_sha256_update_fu_88->m_axi_data_ARLOCK(grp_sha256_update_fu_88_m_axi_data_ARLOCK);
    grp_sha256_update_fu_88->m_axi_data_ARCACHE(grp_sha256_update_fu_88_m_axi_data_ARCACHE);
    grp_sha256_update_fu_88->m_axi_data_ARPROT(grp_sha256_update_fu_88_m_axi_data_ARPROT);
    grp_sha256_update_fu_88->m_axi_data_ARQOS(grp_sha256_update_fu_88_m_axi_data_ARQOS);
    grp_sha256_update_fu_88->m_axi_data_ARREGION(grp_sha256_update_fu_88_m_axi_data_ARREGION);
    grp_sha256_update_fu_88->m_axi_data_ARUSER(grp_sha256_update_fu_88_m_axi_data_ARUSER);
    grp_sha256_update_fu_88->m_axi_data_RVALID(gmem_RVALID);
    grp_sha256_update_fu_88->m_axi_data_RREADY(grp_sha256_update_fu_88_m_axi_data_RREADY);
    grp_sha256_update_fu_88->m_axi_data_RDATA(gmem_RDATA);
    grp_sha256_update_fu_88->m_axi_data_RLAST(gmem_RLAST);
    grp_sha256_update_fu_88->m_axi_data_RID(gmem_RID);
    grp_sha256_update_fu_88->m_axi_data_RUSER(gmem_RUSER);
    grp_sha256_update_fu_88->m_axi_data_RRESP(gmem_RRESP);
    grp_sha256_update_fu_88->m_axi_data_BVALID(ap_var_for_const1);
    grp_sha256_update_fu_88->m_axi_data_BREADY(grp_sha256_update_fu_88_m_axi_data_BREADY);
    grp_sha256_update_fu_88->m_axi_data_BRESP(ap_var_for_const4);
    grp_sha256_update_fu_88->m_axi_data_BID(ap_var_for_const3);
    grp_sha256_update_fu_88->m_axi_data_BUSER(ap_var_for_const3);
    grp_sha256_update_fu_88->data_offset(input_read_reg_152);
    grp_sha256_update_fu_88->len(tmp_reg_158);
    grp_sha256_update_fu_88->ap_return_0(grp_sha256_update_fu_88_ap_return_0);
    grp_sha256_update_fu_88->ap_return_1(grp_sha256_update_fu_88_ap_return_1);
    grp_sha256_update_fu_88->ap_return_2(grp_sha256_update_fu_88_ap_return_2);
    grp_sha256_update_fu_88->ap_return_3(grp_sha256_update_fu_88_ap_return_3);
    grp_sha256_update_fu_88->ap_return_4(grp_sha256_update_fu_88_ap_return_4);
    grp_sha256_update_fu_88->ap_return_5(grp_sha256_update_fu_88_ap_return_5);
    grp_sha256_update_fu_88->ap_return_6(grp_sha256_update_fu_88_ap_return_6);
    grp_sha256_update_fu_88->ap_return_7(grp_sha256_update_fu_88_ap_return_7);
    grp_sha256_update_fu_88->ap_return_8(grp_sha256_update_fu_88_ap_return_8);
    grp_sha256_update_fu_88->ap_return_9(grp_sha256_update_fu_88_ap_return_9);
    grp_calculateStringLengt_fu_99 = new calculateStringLengt("grp_calculateStringLengt_fu_99");
    grp_calculateStringLengt_fu_99->ap_clk(ap_clk);
    grp_calculateStringLengt_fu_99->ap_rst(ap_rst_n_inv);
    grp_calculateStringLengt_fu_99->ap_start(grp_calculateStringLengt_fu_99_ap_start);
    grp_calculateStringLengt_fu_99->ap_done(grp_calculateStringLengt_fu_99_ap_done);
    grp_calculateStringLengt_fu_99->ap_idle(grp_calculateStringLengt_fu_99_ap_idle);
    grp_calculateStringLengt_fu_99->ap_ready(grp_calculateStringLengt_fu_99_ap_ready);
    grp_calculateStringLengt_fu_99->m_axi_str_AWVALID(grp_calculateStringLengt_fu_99_m_axi_str_AWVALID);
    grp_calculateStringLengt_fu_99->m_axi_str_AWREADY(ap_var_for_const1);
    grp_calculateStringLengt_fu_99->m_axi_str_AWADDR(grp_calculateStringLengt_fu_99_m_axi_str_AWADDR);
    grp_calculateStringLengt_fu_99->m_axi_str_AWID(grp_calculateStringLengt_fu_99_m_axi_str_AWID);
    grp_calculateStringLengt_fu_99->m_axi_str_AWLEN(grp_calculateStringLengt_fu_99_m_axi_str_AWLEN);
    grp_calculateStringLengt_fu_99->m_axi_str_AWSIZE(grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE);
    grp_calculateStringLengt_fu_99->m_axi_str_AWBURST(grp_calculateStringLengt_fu_99_m_axi_str_AWBURST);
    grp_calculateStringLengt_fu_99->m_axi_str_AWLOCK(grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK);
    grp_calculateStringLengt_fu_99->m_axi_str_AWCACHE(grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE);
    grp_calculateStringLengt_fu_99->m_axi_str_AWPROT(grp_calculateStringLengt_fu_99_m_axi_str_AWPROT);
    grp_calculateStringLengt_fu_99->m_axi_str_AWQOS(grp_calculateStringLengt_fu_99_m_axi_str_AWQOS);
    grp_calculateStringLengt_fu_99->m_axi_str_AWREGION(grp_calculateStringLengt_fu_99_m_axi_str_AWREGION);
    grp_calculateStringLengt_fu_99->m_axi_str_AWUSER(grp_calculateStringLengt_fu_99_m_axi_str_AWUSER);
    grp_calculateStringLengt_fu_99->m_axi_str_WVALID(grp_calculateStringLengt_fu_99_m_axi_str_WVALID);
    grp_calculateStringLengt_fu_99->m_axi_str_WREADY(ap_var_for_const1);
    grp_calculateStringLengt_fu_99->m_axi_str_WDATA(grp_calculateStringLengt_fu_99_m_axi_str_WDATA);
    grp_calculateStringLengt_fu_99->m_axi_str_WSTRB(grp_calculateStringLengt_fu_99_m_axi_str_WSTRB);
    grp_calculateStringLengt_fu_99->m_axi_str_WLAST(grp_calculateStringLengt_fu_99_m_axi_str_WLAST);
    grp_calculateStringLengt_fu_99->m_axi_str_WID(grp_calculateStringLengt_fu_99_m_axi_str_WID);
    grp_calculateStringLengt_fu_99->m_axi_str_WUSER(grp_calculateStringLengt_fu_99_m_axi_str_WUSER);
    grp_calculateStringLengt_fu_99->m_axi_str_ARVALID(grp_calculateStringLengt_fu_99_m_axi_str_ARVALID);
    grp_calculateStringLengt_fu_99->m_axi_str_ARREADY(gmem_ARREADY);
    grp_calculateStringLengt_fu_99->m_axi_str_ARADDR(grp_calculateStringLengt_fu_99_m_axi_str_ARADDR);
    grp_calculateStringLengt_fu_99->m_axi_str_ARID(grp_calculateStringLengt_fu_99_m_axi_str_ARID);
    grp_calculateStringLengt_fu_99->m_axi_str_ARLEN(grp_calculateStringLengt_fu_99_m_axi_str_ARLEN);
    grp_calculateStringLengt_fu_99->m_axi_str_ARSIZE(grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE);
    grp_calculateStringLengt_fu_99->m_axi_str_ARBURST(grp_calculateStringLengt_fu_99_m_axi_str_ARBURST);
    grp_calculateStringLengt_fu_99->m_axi_str_ARLOCK(grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK);
    grp_calculateStringLengt_fu_99->m_axi_str_ARCACHE(grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE);
    grp_calculateStringLengt_fu_99->m_axi_str_ARPROT(grp_calculateStringLengt_fu_99_m_axi_str_ARPROT);
    grp_calculateStringLengt_fu_99->m_axi_str_ARQOS(grp_calculateStringLengt_fu_99_m_axi_str_ARQOS);
    grp_calculateStringLengt_fu_99->m_axi_str_ARREGION(grp_calculateStringLengt_fu_99_m_axi_str_ARREGION);
    grp_calculateStringLengt_fu_99->m_axi_str_ARUSER(grp_calculateStringLengt_fu_99_m_axi_str_ARUSER);
    grp_calculateStringLengt_fu_99->m_axi_str_RVALID(gmem_RVALID);
    grp_calculateStringLengt_fu_99->m_axi_str_RREADY(grp_calculateStringLengt_fu_99_m_axi_str_RREADY);
    grp_calculateStringLengt_fu_99->m_axi_str_RDATA(gmem_RDATA);
    grp_calculateStringLengt_fu_99->m_axi_str_RLAST(gmem_RLAST);
    grp_calculateStringLengt_fu_99->m_axi_str_RID(gmem_RID);
    grp_calculateStringLengt_fu_99->m_axi_str_RUSER(gmem_RUSER);
    grp_calculateStringLengt_fu_99->m_axi_str_RRESP(gmem_RRESP);
    grp_calculateStringLengt_fu_99->m_axi_str_BVALID(ap_var_for_const1);
    grp_calculateStringLengt_fu_99->m_axi_str_BREADY(grp_calculateStringLengt_fu_99_m_axi_str_BREADY);
    grp_calculateStringLengt_fu_99->m_axi_str_BRESP(ap_var_for_const4);
    grp_calculateStringLengt_fu_99->m_axi_str_BID(ap_var_for_const3);
    grp_calculateStringLengt_fu_99->m_axi_str_BUSER(ap_var_for_const3);
    grp_calculateStringLengt_fu_99->str_offset(input_read_reg_152);
    grp_calculateStringLengt_fu_99->ap_return(grp_calculateStringLengt_fu_99_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_sha256_final_fu_68_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_sha256_final_fu_68_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ctx_data_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_final_fu_68_ctx_data_address0 );
    sensitive << ( grp_sha256_update_fu_88_ctx_data_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_data_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_final_fu_68_ctx_data_address1 );
    sensitive << ( grp_sha256_update_fu_88_ctx_data_address1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_data_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_final_fu_68_ctx_data_ce0 );
    sensitive << ( grp_sha256_update_fu_88_ctx_data_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_data_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_final_fu_68_ctx_data_ce1 );
    sensitive << ( grp_sha256_update_fu_88_ctx_data_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_data_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_final_fu_68_ctx_data_d0 );
    sensitive << ( grp_sha256_update_fu_88_ctx_data_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_data_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_final_fu_68_ctx_data_we0 );
    sensitive << ( grp_sha256_update_fu_88_ctx_data_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_data_we1);
    sensitive << ( grp_sha256_final_fu_68_ctx_data_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARADDR );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARADDR );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARBURST);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARBURST );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARBURST );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARCACHE);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARCACHE );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARID);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARID );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARLEN );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARLEN );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARLOCK);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARLOCK );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARPROT);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARPROT );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARPROT );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARQOS);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARQOS );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARQOS );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARREGION);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARREGION );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARREGION );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARSIZE);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARSIZE );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARUSER);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARUSER );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARUSER );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_ARVALID );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_ARVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( grp_sha256_final_fu_68_m_axi_hash_AWVALID );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( grp_sha256_final_fu_68_m_axi_hash_BREADY );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_m_axi_data_RREADY );
    sensitive << ( grp_calculateStringLengt_fu_99_m_axi_str_RREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( grp_sha256_final_fu_68_m_axi_hash_WVALID );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_calculateStringLengt_fu_99_ap_start);
    sensitive << ( grp_calculateStringLengt_fu_99_ap_start_reg );

    SC_METHOD(thread_grp_sha256_final_fu_68_ap_start);
    sensitive << ( grp_sha256_final_fu_68_ap_start_reg );

    SC_METHOD(thread_grp_sha256_update_fu_88_ap_start);
    sensitive << ( grp_sha256_update_fu_88_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_calculateStringLengt_fu_99_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_update_fu_88_ap_done );
    sensitive << ( grp_sha256_final_fu_68_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    ap_CS_fsm = "000001";
    grp_sha256_final_fu_68_ap_start_reg = SC_LOGIC_0;
    grp_sha256_update_fu_88_ap_start_reg = SC_LOGIC_0;
    grp_calculateStringLengt_fu_99_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "main_fn_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_r, "input_r");
    sc_trace(mVcdFile, output_r, "output_r");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARID, "gmem_ARID");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_ARSIZE, "gmem_ARSIZE");
    sc_trace(mVcdFile, gmem_ARBURST, "gmem_ARBURST");
    sc_trace(mVcdFile, gmem_ARLOCK, "gmem_ARLOCK");
    sc_trace(mVcdFile, gmem_ARCACHE, "gmem_ARCACHE");
    sc_trace(mVcdFile, gmem_ARPROT, "gmem_ARPROT");
    sc_trace(mVcdFile, gmem_ARQOS, "gmem_ARQOS");
    sc_trace(mVcdFile, gmem_ARREGION, "gmem_ARREGION");
    sc_trace(mVcdFile, gmem_ARUSER, "gmem_ARUSER");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, output_read_reg_147, "output_read_reg_147");
    sc_trace(mVcdFile, input_read_reg_152, "input_read_reg_152");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_ap_return, "grp_calculateStringLengt_fu_99_ap_return");
    sc_trace(mVcdFile, tmp_reg_158, "tmp_reg_158");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_ap_ready, "grp_calculateStringLengt_fu_99_ap_ready");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_ap_done, "grp_calculateStringLengt_fu_99_ap_done");
    sc_trace(mVcdFile, ctx_bitlen_reg_163, "ctx_bitlen_reg_163");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_ready, "grp_sha256_update_fu_88_ap_ready");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_done, "grp_sha256_update_fu_88_ap_done");
    sc_trace(mVcdFile, ctx_datalen_reg_168, "ctx_datalen_reg_168");
    sc_trace(mVcdFile, ctx_state_0_reg_173, "ctx_state_0_reg_173");
    sc_trace(mVcdFile, ctx_state_1_reg_178, "ctx_state_1_reg_178");
    sc_trace(mVcdFile, ctx_state_2_reg_183, "ctx_state_2_reg_183");
    sc_trace(mVcdFile, ctx_state_3_reg_188, "ctx_state_3_reg_188");
    sc_trace(mVcdFile, ctx_state_4_reg_193, "ctx_state_4_reg_193");
    sc_trace(mVcdFile, ctx_state_5_reg_198, "ctx_state_5_reg_198");
    sc_trace(mVcdFile, ctx_state_6_reg_203, "ctx_state_6_reg_203");
    sc_trace(mVcdFile, ctx_state_7_reg_208, "ctx_state_7_reg_208");
    sc_trace(mVcdFile, ctx_data_address0, "ctx_data_address0");
    sc_trace(mVcdFile, ctx_data_ce0, "ctx_data_ce0");
    sc_trace(mVcdFile, ctx_data_we0, "ctx_data_we0");
    sc_trace(mVcdFile, ctx_data_d0, "ctx_data_d0");
    sc_trace(mVcdFile, ctx_data_q0, "ctx_data_q0");
    sc_trace(mVcdFile, ctx_data_address1, "ctx_data_address1");
    sc_trace(mVcdFile, ctx_data_ce1, "ctx_data_ce1");
    sc_trace(mVcdFile, ctx_data_we1, "ctx_data_we1");
    sc_trace(mVcdFile, ctx_data_q1, "ctx_data_q1");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ap_start, "grp_sha256_final_fu_68_ap_start");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ap_done, "grp_sha256_final_fu_68_ap_done");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ap_idle, "grp_sha256_final_fu_68_ap_idle");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ap_ready, "grp_sha256_final_fu_68_ap_ready");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_address0, "grp_sha256_final_fu_68_ctx_data_address0");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_ce0, "grp_sha256_final_fu_68_ctx_data_ce0");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_we0, "grp_sha256_final_fu_68_ctx_data_we0");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_d0, "grp_sha256_final_fu_68_ctx_data_d0");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_address1, "grp_sha256_final_fu_68_ctx_data_address1");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_ce1, "grp_sha256_final_fu_68_ctx_data_ce1");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_we1, "grp_sha256_final_fu_68_ctx_data_we1");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ctx_data_d1, "grp_sha256_final_fu_68_ctx_data_d1");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWVALID, "grp_sha256_final_fu_68_m_axi_hash_AWVALID");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWADDR, "grp_sha256_final_fu_68_m_axi_hash_AWADDR");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWID, "grp_sha256_final_fu_68_m_axi_hash_AWID");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWLEN, "grp_sha256_final_fu_68_m_axi_hash_AWLEN");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWSIZE, "grp_sha256_final_fu_68_m_axi_hash_AWSIZE");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWBURST, "grp_sha256_final_fu_68_m_axi_hash_AWBURST");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWLOCK, "grp_sha256_final_fu_68_m_axi_hash_AWLOCK");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWCACHE, "grp_sha256_final_fu_68_m_axi_hash_AWCACHE");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWPROT, "grp_sha256_final_fu_68_m_axi_hash_AWPROT");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWQOS, "grp_sha256_final_fu_68_m_axi_hash_AWQOS");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWREGION, "grp_sha256_final_fu_68_m_axi_hash_AWREGION");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_AWUSER, "grp_sha256_final_fu_68_m_axi_hash_AWUSER");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_WVALID, "grp_sha256_final_fu_68_m_axi_hash_WVALID");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_WDATA, "grp_sha256_final_fu_68_m_axi_hash_WDATA");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_WSTRB, "grp_sha256_final_fu_68_m_axi_hash_WSTRB");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_WLAST, "grp_sha256_final_fu_68_m_axi_hash_WLAST");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_WID, "grp_sha256_final_fu_68_m_axi_hash_WID");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_WUSER, "grp_sha256_final_fu_68_m_axi_hash_WUSER");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARVALID, "grp_sha256_final_fu_68_m_axi_hash_ARVALID");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARADDR, "grp_sha256_final_fu_68_m_axi_hash_ARADDR");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARID, "grp_sha256_final_fu_68_m_axi_hash_ARID");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARLEN, "grp_sha256_final_fu_68_m_axi_hash_ARLEN");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARSIZE, "grp_sha256_final_fu_68_m_axi_hash_ARSIZE");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARBURST, "grp_sha256_final_fu_68_m_axi_hash_ARBURST");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARLOCK, "grp_sha256_final_fu_68_m_axi_hash_ARLOCK");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARCACHE, "grp_sha256_final_fu_68_m_axi_hash_ARCACHE");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARPROT, "grp_sha256_final_fu_68_m_axi_hash_ARPROT");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARQOS, "grp_sha256_final_fu_68_m_axi_hash_ARQOS");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARREGION, "grp_sha256_final_fu_68_m_axi_hash_ARREGION");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_ARUSER, "grp_sha256_final_fu_68_m_axi_hash_ARUSER");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_RREADY, "grp_sha256_final_fu_68_m_axi_hash_RREADY");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_m_axi_hash_BREADY, "grp_sha256_final_fu_68_m_axi_hash_BREADY");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_start, "grp_sha256_update_fu_88_ap_start");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_idle, "grp_sha256_update_fu_88_ap_idle");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ctx_data_address0, "grp_sha256_update_fu_88_ctx_data_address0");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ctx_data_ce0, "grp_sha256_update_fu_88_ctx_data_ce0");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ctx_data_we0, "grp_sha256_update_fu_88_ctx_data_we0");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ctx_data_d0, "grp_sha256_update_fu_88_ctx_data_d0");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ctx_data_address1, "grp_sha256_update_fu_88_ctx_data_address1");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ctx_data_ce1, "grp_sha256_update_fu_88_ctx_data_ce1");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWVALID, "grp_sha256_update_fu_88_m_axi_data_AWVALID");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWADDR, "grp_sha256_update_fu_88_m_axi_data_AWADDR");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWID, "grp_sha256_update_fu_88_m_axi_data_AWID");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWLEN, "grp_sha256_update_fu_88_m_axi_data_AWLEN");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWSIZE, "grp_sha256_update_fu_88_m_axi_data_AWSIZE");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWBURST, "grp_sha256_update_fu_88_m_axi_data_AWBURST");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWLOCK, "grp_sha256_update_fu_88_m_axi_data_AWLOCK");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWCACHE, "grp_sha256_update_fu_88_m_axi_data_AWCACHE");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWPROT, "grp_sha256_update_fu_88_m_axi_data_AWPROT");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWQOS, "grp_sha256_update_fu_88_m_axi_data_AWQOS");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWREGION, "grp_sha256_update_fu_88_m_axi_data_AWREGION");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_AWUSER, "grp_sha256_update_fu_88_m_axi_data_AWUSER");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_WVALID, "grp_sha256_update_fu_88_m_axi_data_WVALID");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_WDATA, "grp_sha256_update_fu_88_m_axi_data_WDATA");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_WSTRB, "grp_sha256_update_fu_88_m_axi_data_WSTRB");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_WLAST, "grp_sha256_update_fu_88_m_axi_data_WLAST");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_WID, "grp_sha256_update_fu_88_m_axi_data_WID");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_WUSER, "grp_sha256_update_fu_88_m_axi_data_WUSER");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARVALID, "grp_sha256_update_fu_88_m_axi_data_ARVALID");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARADDR, "grp_sha256_update_fu_88_m_axi_data_ARADDR");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARID, "grp_sha256_update_fu_88_m_axi_data_ARID");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARLEN, "grp_sha256_update_fu_88_m_axi_data_ARLEN");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARSIZE, "grp_sha256_update_fu_88_m_axi_data_ARSIZE");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARBURST, "grp_sha256_update_fu_88_m_axi_data_ARBURST");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARLOCK, "grp_sha256_update_fu_88_m_axi_data_ARLOCK");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARCACHE, "grp_sha256_update_fu_88_m_axi_data_ARCACHE");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARPROT, "grp_sha256_update_fu_88_m_axi_data_ARPROT");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARQOS, "grp_sha256_update_fu_88_m_axi_data_ARQOS");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARREGION, "grp_sha256_update_fu_88_m_axi_data_ARREGION");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_ARUSER, "grp_sha256_update_fu_88_m_axi_data_ARUSER");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_RREADY, "grp_sha256_update_fu_88_m_axi_data_RREADY");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_m_axi_data_BREADY, "grp_sha256_update_fu_88_m_axi_data_BREADY");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_0, "grp_sha256_update_fu_88_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_1, "grp_sha256_update_fu_88_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_2, "grp_sha256_update_fu_88_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_3, "grp_sha256_update_fu_88_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_4, "grp_sha256_update_fu_88_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_5, "grp_sha256_update_fu_88_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_6, "grp_sha256_update_fu_88_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_7, "grp_sha256_update_fu_88_ap_return_7");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_8, "grp_sha256_update_fu_88_ap_return_8");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_return_9, "grp_sha256_update_fu_88_ap_return_9");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_ap_start, "grp_calculateStringLengt_fu_99_ap_start");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_ap_idle, "grp_calculateStringLengt_fu_99_ap_idle");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWVALID, "grp_calculateStringLengt_fu_99_m_axi_str_AWVALID");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWADDR, "grp_calculateStringLengt_fu_99_m_axi_str_AWADDR");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWID, "grp_calculateStringLengt_fu_99_m_axi_str_AWID");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWLEN, "grp_calculateStringLengt_fu_99_m_axi_str_AWLEN");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE, "grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWBURST, "grp_calculateStringLengt_fu_99_m_axi_str_AWBURST");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK, "grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE, "grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWPROT, "grp_calculateStringLengt_fu_99_m_axi_str_AWPROT");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWQOS, "grp_calculateStringLengt_fu_99_m_axi_str_AWQOS");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWREGION, "grp_calculateStringLengt_fu_99_m_axi_str_AWREGION");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_AWUSER, "grp_calculateStringLengt_fu_99_m_axi_str_AWUSER");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_WVALID, "grp_calculateStringLengt_fu_99_m_axi_str_WVALID");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_WDATA, "grp_calculateStringLengt_fu_99_m_axi_str_WDATA");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_WSTRB, "grp_calculateStringLengt_fu_99_m_axi_str_WSTRB");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_WLAST, "grp_calculateStringLengt_fu_99_m_axi_str_WLAST");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_WID, "grp_calculateStringLengt_fu_99_m_axi_str_WID");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_WUSER, "grp_calculateStringLengt_fu_99_m_axi_str_WUSER");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARVALID, "grp_calculateStringLengt_fu_99_m_axi_str_ARVALID");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARADDR, "grp_calculateStringLengt_fu_99_m_axi_str_ARADDR");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARID, "grp_calculateStringLengt_fu_99_m_axi_str_ARID");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARLEN, "grp_calculateStringLengt_fu_99_m_axi_str_ARLEN");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE, "grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARBURST, "grp_calculateStringLengt_fu_99_m_axi_str_ARBURST");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK, "grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE, "grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARPROT, "grp_calculateStringLengt_fu_99_m_axi_str_ARPROT");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARQOS, "grp_calculateStringLengt_fu_99_m_axi_str_ARQOS");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARREGION, "grp_calculateStringLengt_fu_99_m_axi_str_ARREGION");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_ARUSER, "grp_calculateStringLengt_fu_99_m_axi_str_ARUSER");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_RREADY, "grp_calculateStringLengt_fu_99_m_axi_str_RREADY");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_m_axi_str_BREADY, "grp_calculateStringLengt_fu_99_m_axi_str_BREADY");
    sc_trace(mVcdFile, grp_sha256_final_fu_68_ap_start_reg, "grp_sha256_final_fu_68_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_sha256_update_fu_88_ap_start_reg, "grp_sha256_update_fu_88_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_calculateStringLengt_fu_99_ap_start_reg, "grp_calculateStringLengt_fu_99_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("main_fn.hdltvin.dat");
    mHdltvoutHandle.open("main_fn.hdltvout.dat");
}

main_fn::~main_fn() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete main_fn_AXILiteS_s_axi_U;
    delete main_fn_gmem_m_axi_U;
    delete ctx_data_U;
    delete grp_sha256_final_fu_68;
    delete grp_sha256_update_fu_88;
    delete grp_calculateStringLengt_fu_99;
}

void main_fn::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void main_fn::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void main_fn::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv8_0;
}

void main_fn::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void main_fn::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void main_fn::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_calculateStringLengt_fu_99_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_calculateStringLengt_fu_99_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_calculateStringLengt_fu_99_ap_ready.read())) {
            grp_calculateStringLengt_fu_99_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_sha256_final_fu_68_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_sha256_final_fu_68_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_final_fu_68_ap_ready.read())) {
            grp_sha256_final_fu_68_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_sha256_update_fu_88_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_sha256_update_fu_88_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_update_fu_88_ap_ready.read())) {
            grp_sha256_update_fu_88_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_sha256_update_fu_88_ap_done.read(), ap_const_logic_1))) {
        ctx_bitlen_reg_163 = grp_sha256_update_fu_88_ap_return_1.read();
        ctx_datalen_reg_168 = grp_sha256_update_fu_88_ap_return_0.read();
        ctx_state_0_reg_173 = grp_sha256_update_fu_88_ap_return_2.read();
        ctx_state_1_reg_178 = grp_sha256_update_fu_88_ap_return_3.read();
        ctx_state_2_reg_183 = grp_sha256_update_fu_88_ap_return_4.read();
        ctx_state_3_reg_188 = grp_sha256_update_fu_88_ap_return_5.read();
        ctx_state_4_reg_193 = grp_sha256_update_fu_88_ap_return_6.read();
        ctx_state_5_reg_198 = grp_sha256_update_fu_88_ap_return_7.read();
        ctx_state_6_reg_203 = grp_sha256_update_fu_88_ap_return_8.read();
        ctx_state_7_reg_208 = grp_sha256_update_fu_88_ap_return_9.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        input_read_reg_152 = input_r.read();
        output_read_reg_147 = output_r.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_calculateStringLengt_fu_99_ap_done.read(), ap_const_logic_1))) {
        tmp_reg_158 = grp_calculateStringLengt_fu_99_ap_return.read();
    }
}

void main_fn::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void main_fn::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void main_fn::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void main_fn::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void main_fn::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void main_fn::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void main_fn::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_sha256_final_fu_68_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void main_fn::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void main_fn::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_sha256_final_fu_68_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void main_fn::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void main_fn::thread_ctx_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_address0 = grp_sha256_update_fu_88_ctx_data_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_address0 = grp_sha256_final_fu_68_ctx_data_address0.read();
    } else {
        ctx_data_address0 = "XXXXXX";
    }
}

void main_fn::thread_ctx_data_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_address1 = grp_sha256_update_fu_88_ctx_data_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_address1 = grp_sha256_final_fu_68_ctx_data_address1.read();
    } else {
        ctx_data_address1 = "XXXXXX";
    }
}

void main_fn::thread_ctx_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_ce0 = grp_sha256_update_fu_88_ctx_data_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_ce0 = grp_sha256_final_fu_68_ctx_data_ce0.read();
    } else {
        ctx_data_ce0 = ap_const_logic_0;
    }
}

void main_fn::thread_ctx_data_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_ce1 = grp_sha256_update_fu_88_ctx_data_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_ce1 = grp_sha256_final_fu_68_ctx_data_ce1.read();
    } else {
        ctx_data_ce1 = ap_const_logic_0;
    }
}

void main_fn::thread_ctx_data_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_d0 = grp_sha256_update_fu_88_ctx_data_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_d0 = grp_sha256_final_fu_68_ctx_data_d0.read();
    } else {
        ctx_data_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void main_fn::thread_ctx_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_we0 = grp_sha256_update_fu_88_ctx_data_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_we0 = grp_sha256_final_fu_68_ctx_data_we0.read();
    } else {
        ctx_data_we0 = ap_const_logic_0;
    }
}

void main_fn::thread_ctx_data_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_we1 = grp_sha256_final_fu_68_ctx_data_we1.read();
    } else {
        ctx_data_we1 = ap_const_logic_0;
    }
}

void main_fn::thread_gmem_ARADDR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARADDR = grp_calculateStringLengt_fu_99_m_axi_str_ARADDR.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARADDR = grp_sha256_update_fu_88_m_axi_data_ARADDR.read();
    } else {
        gmem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void main_fn::thread_gmem_ARBURST() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARBURST = grp_calculateStringLengt_fu_99_m_axi_str_ARBURST.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARBURST = grp_sha256_update_fu_88_m_axi_data_ARBURST.read();
    } else {
        gmem_ARBURST =  (sc_lv<2>) ("XX");
    }
}

void main_fn::thread_gmem_ARCACHE() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARCACHE = grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARCACHE = grp_sha256_update_fu_88_m_axi_data_ARCACHE.read();
    } else {
        gmem_ARCACHE =  (sc_lv<4>) ("XXXX");
    }
}

void main_fn::thread_gmem_ARID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARID = grp_calculateStringLengt_fu_99_m_axi_str_ARID.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARID = grp_sha256_update_fu_88_m_axi_data_ARID.read();
    } else {
        gmem_ARID =  (sc_lv<1>) ("X");
    }
}

void main_fn::thread_gmem_ARLEN() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARLEN = grp_calculateStringLengt_fu_99_m_axi_str_ARLEN.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARLEN = grp_sha256_update_fu_88_m_axi_data_ARLEN.read();
    } else {
        gmem_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void main_fn::thread_gmem_ARLOCK() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARLOCK = grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARLOCK = grp_sha256_update_fu_88_m_axi_data_ARLOCK.read();
    } else {
        gmem_ARLOCK =  (sc_lv<2>) ("XX");
    }
}

void main_fn::thread_gmem_ARPROT() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARPROT = grp_calculateStringLengt_fu_99_m_axi_str_ARPROT.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARPROT = grp_sha256_update_fu_88_m_axi_data_ARPROT.read();
    } else {
        gmem_ARPROT =  (sc_lv<3>) ("XXX");
    }
}

void main_fn::thread_gmem_ARQOS() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARQOS = grp_calculateStringLengt_fu_99_m_axi_str_ARQOS.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARQOS = grp_sha256_update_fu_88_m_axi_data_ARQOS.read();
    } else {
        gmem_ARQOS =  (sc_lv<4>) ("XXXX");
    }
}

void main_fn::thread_gmem_ARREGION() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARREGION = grp_calculateStringLengt_fu_99_m_axi_str_ARREGION.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARREGION = grp_sha256_update_fu_88_m_axi_data_ARREGION.read();
    } else {
        gmem_ARREGION =  (sc_lv<4>) ("XXXX");
    }
}

void main_fn::thread_gmem_ARSIZE() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARSIZE = grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARSIZE = grp_sha256_update_fu_88_m_axi_data_ARSIZE.read();
    } else {
        gmem_ARSIZE =  (sc_lv<3>) ("XXX");
    }
}

void main_fn::thread_gmem_ARUSER() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARUSER = grp_calculateStringLengt_fu_99_m_axi_str_ARUSER.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARUSER = grp_sha256_update_fu_88_m_axi_data_ARUSER.read();
    } else {
        gmem_ARUSER =  (sc_lv<1>) ("X");
    }
}

void main_fn::thread_gmem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_ARVALID = grp_calculateStringLengt_fu_99_m_axi_str_ARVALID.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_ARVALID = grp_sha256_update_fu_88_m_axi_data_ARVALID.read();
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void main_fn::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        gmem_AWVALID = grp_sha256_final_fu_68_m_axi_hash_AWVALID.read();
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void main_fn::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        gmem_BREADY = grp_sha256_final_fu_68_m_axi_hash_BREADY.read();
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void main_fn::thread_gmem_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        gmem_RREADY = grp_calculateStringLengt_fu_99_m_axi_str_RREADY.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        gmem_RREADY = grp_sha256_update_fu_88_m_axi_data_RREADY.read();
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void main_fn::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        gmem_WVALID = grp_sha256_final_fu_68_m_axi_hash_WVALID.read();
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void main_fn::thread_grp_calculateStringLengt_fu_99_ap_start() {
    grp_calculateStringLengt_fu_99_ap_start = grp_calculateStringLengt_fu_99_ap_start_reg.read();
}

void main_fn::thread_grp_sha256_final_fu_68_ap_start() {
    grp_sha256_final_fu_68_ap_start = grp_sha256_final_fu_68_ap_start_reg.read();
}

void main_fn::thread_grp_sha256_update_fu_88_ap_start() {
    grp_sha256_update_fu_88_ap_start = grp_sha256_update_fu_88_ap_start_reg.read();
}

void main_fn::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_calculateStringLengt_fu_99_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_sha256_update_fu_88_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_sha256_final_fu_68_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void main_fn::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

