// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_final.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_final::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_final::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> sha256_final::ap_ST_fsm_state1 = "1";
const sc_lv<19> sha256_final::ap_ST_fsm_state2 = "10";
const sc_lv<19> sha256_final::ap_ST_fsm_state3 = "100";
const sc_lv<19> sha256_final::ap_ST_fsm_state4 = "1000";
const sc_lv<19> sha256_final::ap_ST_fsm_state5 = "10000";
const sc_lv<19> sha256_final::ap_ST_fsm_state6 = "100000";
const sc_lv<19> sha256_final::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> sha256_final::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> sha256_final::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> sha256_final::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage0 = "10000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage1 = "100000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage2 = "1000000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage3 = "10000000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage4 = "100000000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage5 = "1000000000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage6 = "10000000000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_pp0_stage7 = "100000000000000000";
const sc_lv<19> sha256_final::ap_ST_fsm_state26 = "1000000000000000000";
const bool sha256_final::ap_const_boolean_1 = true;
const sc_lv<32> sha256_final::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sha256_final::ap_const_lv1_0 = "0";
const sc_lv<3> sha256_final::ap_const_lv3_0 = "000";
const sc_lv<2> sha256_final::ap_const_lv2_0 = "00";
const sc_lv<4> sha256_final::ap_const_lv4_0 = "0000";
const sc_lv<32> sha256_final::ap_const_lv32_B = "1011";
const bool sha256_final::ap_const_boolean_0 = false;
const sc_lv<32> sha256_final::ap_const_lv32_C = "1100";
const sc_lv<32> sha256_final::ap_const_lv32_11 = "10001";
const sc_lv<32> sha256_final::ap_const_lv32_D = "1101";
const sc_lv<32> sha256_final::ap_const_lv32_A = "1010";
const sc_lv<32> sha256_final::ap_const_lv32_E = "1110";
const sc_lv<32> sha256_final::ap_const_lv32_F = "1111";
const sc_lv<32> sha256_final::ap_const_lv32_10 = "10000";
const sc_lv<32> sha256_final::ap_const_lv32_2 = "10";
const sc_lv<32> sha256_final::ap_const_lv32_9 = "1001";
const sc_lv<32> sha256_final::ap_const_lv32_1 = "1";
const sc_lv<32> sha256_final::ap_const_lv32_3 = "11";
const sc_lv<1> sha256_final::ap_const_lv1_1 = "1";
const sc_lv<32> sha256_final::ap_const_lv32_8 = "1000";
const sc_lv<64> sha256_final::ap_const_lv64_3F = "111111";
const sc_lv<32> sha256_final::ap_const_lv32_4 = "100";
const sc_lv<64> sha256_final::ap_const_lv64_3E = "111110";
const sc_lv<64> sha256_final::ap_const_lv64_3D = "111101";
const sc_lv<32> sha256_final::ap_const_lv32_5 = "101";
const sc_lv<64> sha256_final::ap_const_lv64_3C = "111100";
const sc_lv<64> sha256_final::ap_const_lv64_3B = "111011";
const sc_lv<32> sha256_final::ap_const_lv32_6 = "110";
const sc_lv<64> sha256_final::ap_const_lv64_3A = "111010";
const sc_lv<64> sha256_final::ap_const_lv64_39 = "111001";
const sc_lv<32> sha256_final::ap_const_lv32_7 = "111";
const sc_lv<64> sha256_final::ap_const_lv64_38 = "111000";
const sc_lv<8> sha256_final::ap_const_lv8_80 = "10000000";
const sc_lv<8> sha256_final::ap_const_lv8_0 = "00000000";
const sc_lv<32> sha256_final::ap_const_lv32_38 = "111000";
const sc_lv<32> sha256_final::ap_const_lv32_1F = "11111";
const sc_lv<26> sha256_final::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<32> sha256_final::ap_const_lv32_17 = "10111";
const sc_lv<32> sha256_final::ap_const_lv32_18 = "11000";
const sc_lv<32> sha256_final::ap_const_lv32_20 = "100000";
const sc_lv<32> sha256_final::ap_const_lv32_27 = "100111";
const sc_lv<32> sha256_final::ap_const_lv32_28 = "101000";
const sc_lv<32> sha256_final::ap_const_lv32_2F = "101111";
const sc_lv<32> sha256_final::ap_const_lv32_30 = "110000";
const sc_lv<32> sha256_final::ap_const_lv32_37 = "110111";
const sc_lv<32> sha256_final::ap_const_lv32_3F = "111111";
const sc_lv<3> sha256_final::ap_const_lv3_4 = "100";
const sc_lv<3> sha256_final::ap_const_lv3_1 = "1";
const sc_lv<5> sha256_final::ap_const_lv5_18 = "11000";
const sc_lv<2> sha256_final::ap_const_lv2_2 = "10";
const sc_lv<5> sha256_final::ap_const_lv5_14 = "10100";
const sc_lv<32> sha256_final::ap_const_lv32_12 = "10010";

sha256_final::sha256_final(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sha256_transform_fu_575 = new sha256_transform("grp_sha256_transform_fu_575");
    grp_sha256_transform_fu_575->ap_clk(ap_clk);
    grp_sha256_transform_fu_575->ap_rst(ap_rst);
    grp_sha256_transform_fu_575->ap_start(grp_sha256_transform_fu_575_ap_start);
    grp_sha256_transform_fu_575->ap_done(grp_sha256_transform_fu_575_ap_done);
    grp_sha256_transform_fu_575->ap_idle(grp_sha256_transform_fu_575_ap_idle);
    grp_sha256_transform_fu_575->ap_ready(grp_sha256_transform_fu_575_ap_ready);
    grp_sha256_transform_fu_575->ctx_state_0_read(grp_sha256_transform_fu_575_ctx_state_0_read);
    grp_sha256_transform_fu_575->ctx_state_1_read(grp_sha256_transform_fu_575_ctx_state_1_read);
    grp_sha256_transform_fu_575->ctx_state_2_read(grp_sha256_transform_fu_575_ctx_state_2_read);
    grp_sha256_transform_fu_575->ctx_state_3_read(grp_sha256_transform_fu_575_ctx_state_3_read);
    grp_sha256_transform_fu_575->ctx_state_4_read(grp_sha256_transform_fu_575_ctx_state_4_read);
    grp_sha256_transform_fu_575->ctx_state_5_read(grp_sha256_transform_fu_575_ctx_state_5_read);
    grp_sha256_transform_fu_575->ctx_state_6_read(grp_sha256_transform_fu_575_ctx_state_6_read);
    grp_sha256_transform_fu_575->ctx_state_7_read(grp_sha256_transform_fu_575_ctx_state_7_read);
    grp_sha256_transform_fu_575->data_address0(grp_sha256_transform_fu_575_data_address0);
    grp_sha256_transform_fu_575->data_ce0(grp_sha256_transform_fu_575_data_ce0);
    grp_sha256_transform_fu_575->data_q0(ctx_data_q0);
    grp_sha256_transform_fu_575->data_address1(grp_sha256_transform_fu_575_data_address1);
    grp_sha256_transform_fu_575->data_ce1(grp_sha256_transform_fu_575_data_ce1);
    grp_sha256_transform_fu_575->data_q1(ctx_data_q1);
    grp_sha256_transform_fu_575->ap_return_0(grp_sha256_transform_fu_575_ap_return_0);
    grp_sha256_transform_fu_575->ap_return_1(grp_sha256_transform_fu_575_ap_return_1);
    grp_sha256_transform_fu_575->ap_return_2(grp_sha256_transform_fu_575_ap_return_2);
    grp_sha256_transform_fu_575->ap_return_3(grp_sha256_transform_fu_575_ap_return_3);
    grp_sha256_transform_fu_575->ap_return_4(grp_sha256_transform_fu_575_ap_return_4);
    grp_sha256_transform_fu_575->ap_return_5(grp_sha256_transform_fu_575_ap_return_5);
    grp_sha256_transform_fu_575->ap_return_6(grp_sha256_transform_fu_575_ap_return_6);
    grp_sha256_transform_fu_575->ap_return_7(grp_sha256_transform_fu_575_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln103_fu_969_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln103_1_fu_965_p1 );

    SC_METHOD(thread_add_ln104_fu_1003_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln104_fu_999_p1 );

    SC_METHOD(thread_add_ln105_fu_1039_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln105_fu_1035_p1 );

    SC_METHOD(thread_add_ln106_fu_1070_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln106_fu_1066_p1 );

    SC_METHOD(thread_add_ln107_fu_1106_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln107_fu_1102_p1 );

    SC_METHOD(thread_add_ln108_1_fu_1144_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln108_fu_1140_p1 );

    SC_METHOD(thread_add_ln108_fu_1134_p2);
    sensitive << ( zext_ln101_fu_1121_p1 );

    SC_METHOD(thread_add_ln109_fu_1166_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln109_fu_1162_p1 );

    SC_METHOD(thread_add_ln110_fu_1188_p2);
    sensitive << ( sext_ln101_reg_1356 );
    sensitive << ( zext_ln110_fu_1184_p1 );

    SC_METHOD(thread_add_ln89_fu_784_p2);
    sensitive << ( ctx_bitlen_read );
    sensitive << ( zext_ln89_fu_714_p1 );

    SC_METHOD(thread_add_ln90_1_fu_789_p2);
    sensitive << ( zext_ln89_3_fu_780_p1 );
    sensitive << ( trunc_ln89_12_fu_777_p1 );

    SC_METHOD(thread_add_ln90_2_fu_795_p2);
    sensitive << ( zext_ln89_2_fu_773_p1 );
    sensitive << ( trunc_ln89_11_fu_770_p1 );

    SC_METHOD(thread_add_ln90_3_fu_801_p2);
    sensitive << ( zext_ln89_1_fu_766_p1 );
    sensitive << ( trunc_ln89_10_fu_763_p1 );

    SC_METHOD(thread_add_ln90_4_fu_807_p2);
    sensitive << ( shl_ln89_fu_709_p2 );
    sensitive << ( trunc_ln89_9_fu_760_p1 );

    SC_METHOD(thread_add_ln90_5_fu_813_p2);
    sensitive << ( trunc_ln89_5_fu_752_p3 );
    sensitive << ( trunc_ln89_7_fu_746_p1 );

    SC_METHOD(thread_add_ln90_6_fu_819_p2);
    sensitive << ( trunc_ln89_3_fu_738_p3 );
    sensitive << ( trunc_ln89_4_fu_732_p1 );

    SC_METHOD(thread_add_ln90_fu_825_p2);
    sensitive << ( trunc_ln89_fu_718_p1 );
    sensitive << ( trunc_ln89_1_fu_724_p3 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state19_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state19_io );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state12_io );
    sensitive << ( ap_block_state20_io );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state12_io );
    sensitive << ( ap_block_state20_io );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage2_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage3_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage4_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp0_stage5);

    SC_METHOD(thread_ap_block_pp0_stage5_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage5_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp0_stage6);

    SC_METHOD(thread_ap_block_pp0_stage6_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage6_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state17_io );

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_block_state17_io );

    SC_METHOD(thread_ap_block_pp0_stage7);

    SC_METHOD(thread_ap_block_pp0_stage7_01001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_pp0_stage7_11001);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_block_pp0_stage7_subdone);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state12_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state12_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state13_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state14_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state15_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state16_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state17_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state17_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state18_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state18_pp0_stage7_iter0);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state19_io);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368 );

    SC_METHOD(thread_ap_block_state20_io);
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state20_pp0_stage1_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state21_pp0_stage2_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state22_pp0_stage3_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state23_pp0_stage4_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state24_pp0_stage5_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state25_pp0_stage6_iter1);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state3_on_subcall_done);
    sensitive << ( grp_sha256_transform_fu_575_ap_done );
    sensitive << ( icmp_ln76_reg_1296 );

    SC_METHOD(thread_ap_condition_582);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_656);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_ap_condition_658);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );

    SC_METHOD(thread_ap_condition_660);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_ap_condition_669);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_ap_condition_682);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );

    SC_METHOD(thread_ap_condition_695);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );

    SC_METHOD(thread_ap_condition_708);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state11);
    sensitive << ( icmp_ln101_fu_921_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_2_phi_fu_567_p4);
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( i_2_reg_563 );
    sensitive << ( i_5_reg_1372 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_ctx_data_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_transform_fu_575_data_address0 );
    sensitive << ( icmp_ln83_fu_698_p2 );
    sensitive << ( zext_ln77_fu_677_p1 );
    sensitive << ( zext_ln84_fu_704_p1 );
    sensitive << ( zext_ln79_fu_913_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_sha256_transform_fu_575_data_address1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_sha256_transform_fu_575_data_ce0 );
    sensitive << ( icmp_ln83_fu_698_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_sha256_transform_fu_575_data_ce1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( add_ln90_reg_1308 );
    sensitive << ( trunc_ln3_reg_1323 );
    sensitive << ( trunc_ln5_reg_1333 );
    sensitive << ( trunc_ln7_reg_1343 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln83_fu_698_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_d1);
    sensitive << ( trunc_ln1_reg_1313 );
    sensitive << ( trunc_ln2_reg_1318 );
    sensitive << ( trunc_ln4_reg_1328 );
    sensitive << ( trunc_ln6_reg_1338 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln83_fu_698_p2 );
    sensitive << ( icmp_ln78_fu_907_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_data_we1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ap_start);
    sensitive << ( grp_sha256_transform_fu_575_ap_start_reg );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_0_read);
    sensitive << ( p_read2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_0_0_reg_483 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_1_read);
    sensitive << ( p_read3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_1_0_reg_493 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_2_read);
    sensitive << ( p_read4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_2_0_reg_503 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_3_read);
    sensitive << ( p_read5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_3_0_reg_513 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_4_read);
    sensitive << ( p_read6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_4_0_reg_523 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_5_read);
    sensitive << ( p_read7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_5_0_reg_533 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_6_read);
    sensitive << ( p_read8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_6_0_reg_543 );

    SC_METHOD(thread_grp_sha256_transform_fu_575_ctx_state_7_read);
    sensitive << ( p_read9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln76_reg_1296 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ctx_state_7_0_reg_553 );

    SC_METHOD(thread_hash_blk_n_AW);
    sensitive << ( m_axi_hash_AWREADY );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_hash_blk_n_B);
    sensitive << ( m_axi_hash_BVALID );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_hash_blk_n_W);
    sensitive << ( m_axi_hash_WREADY );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_i_4_fu_682_p2);
    sensitive << ( i_1_in_reg_465 );

    SC_METHOD(thread_i_5_fu_927_p2);
    sensitive << ( ap_phi_mux_i_2_phi_fu_567_p4 );

    SC_METHOD(thread_i_fu_901_p2);
    sensitive << ( i_0_in_reg_474 );

    SC_METHOD(thread_icmp_ln101_fu_921_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_2_phi_fu_567_p4 );

    SC_METHOD(thread_icmp_ln76_fu_671_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ctx_datalen_read );

    SC_METHOD(thread_icmp_ln78_fu_907_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_in_reg_474 );

    SC_METHOD(thread_icmp_ln83_fu_698_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_688_p4 );

    SC_METHOD(thread_lshr_ln103_fu_955_p2);
    sensitive << ( reg_631 );
    sensitive << ( zext_ln103_fu_951_p1 );

    SC_METHOD(thread_lshr_ln104_fu_984_p2);
    sensitive << ( reg_636 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_lshr_ln105_fu_1018_p2);
    sensitive << ( reg_641 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_lshr_ln106_fu_1054_p2);
    sensitive << ( reg_646 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_lshr_ln107_fu_1085_p2);
    sensitive << ( reg_651 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_lshr_ln108_fu_1125_p2);
    sensitive << ( reg_656 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_lshr_ln109_fu_1203_p2);
    sensitive << ( reg_661 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_lshr_ln110_fu_1212_p2);
    sensitive << ( reg_666 );
    sensitive << ( zext_ln103_reg_1377 );

    SC_METHOD(thread_m_axi_hash_ARADDR);

    SC_METHOD(thread_m_axi_hash_ARBURST);

    SC_METHOD(thread_m_axi_hash_ARCACHE);

    SC_METHOD(thread_m_axi_hash_ARID);

    SC_METHOD(thread_m_axi_hash_ARLEN);

    SC_METHOD(thread_m_axi_hash_ARLOCK);

    SC_METHOD(thread_m_axi_hash_ARPROT);

    SC_METHOD(thread_m_axi_hash_ARQOS);

    SC_METHOD(thread_m_axi_hash_ARREGION);

    SC_METHOD(thread_m_axi_hash_ARSIZE);

    SC_METHOD(thread_m_axi_hash_ARUSER);

    SC_METHOD(thread_m_axi_hash_ARVALID);

    SC_METHOD(thread_m_axi_hash_AWADDR);
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( hash_addr_reg_1393 );
    sensitive << ( hash_addr_1_reg_1410 );
    sensitive << ( hash_addr_2_reg_1426 );
    sensitive << ( hash_addr_3_reg_1437 );
    sensitive << ( hash_addr_4_reg_1448 );
    sensitive << ( hash_addr_5_reg_1459 );
    sensitive << ( hash_addr_6_reg_1465 );
    sensitive << ( hash_addr_7_reg_1471 );
    sensitive << ( ap_condition_656 );
    sensitive << ( ap_condition_660 );
    sensitive << ( ap_condition_669 );
    sensitive << ( ap_condition_682 );
    sensitive << ( ap_condition_695 );
    sensitive << ( ap_condition_708 );
    sensitive << ( ap_condition_658 );
    sensitive << ( ap_condition_582 );

    SC_METHOD(thread_m_axi_hash_AWBURST);

    SC_METHOD(thread_m_axi_hash_AWCACHE);

    SC_METHOD(thread_m_axi_hash_AWID);

    SC_METHOD(thread_m_axi_hash_AWLEN);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_block_pp0_stage7_11001 );

    SC_METHOD(thread_m_axi_hash_AWLOCK);

    SC_METHOD(thread_m_axi_hash_AWPROT);

    SC_METHOD(thread_m_axi_hash_AWQOS);

    SC_METHOD(thread_m_axi_hash_AWREGION);

    SC_METHOD(thread_m_axi_hash_AWSIZE);

    SC_METHOD(thread_m_axi_hash_AWUSER);

    SC_METHOD(thread_m_axi_hash_AWVALID);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_block_pp0_stage7_11001 );

    SC_METHOD(thread_m_axi_hash_BREADY);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_block_pp0_stage7_11001 );

    SC_METHOD(thread_m_axi_hash_RREADY);

    SC_METHOD(thread_m_axi_hash_WDATA);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( trunc_ln103_1_reg_1388 );
    sensitive << ( trunc_ln104_reg_1399 );
    sensitive << ( trunc_ln105_reg_1416 );
    sensitive << ( trunc_ln106_reg_1432 );
    sensitive << ( trunc_ln107_reg_1443 );
    sensitive << ( trunc_ln108_reg_1454 );
    sensitive << ( trunc_ln109_reg_1477 );
    sensitive << ( trunc_ln110_reg_1482 );
    sensitive << ( ap_block_pp0_stage2_01001 );
    sensitive << ( ap_block_pp0_stage3_01001 );
    sensitive << ( ap_block_pp0_stage4_01001 );
    sensitive << ( ap_block_pp0_stage5_01001 );
    sensitive << ( ap_block_pp0_stage6_01001 );
    sensitive << ( ap_block_pp0_stage7_01001 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_m_axi_hash_WID);

    SC_METHOD(thread_m_axi_hash_WLAST);

    SC_METHOD(thread_m_axi_hash_WSTRB);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage2_01001 );
    sensitive << ( ap_block_pp0_stage3_01001 );
    sensitive << ( ap_block_pp0_stage4_01001 );
    sensitive << ( ap_block_pp0_stage5_01001 );
    sensitive << ( ap_block_pp0_stage6_01001 );
    sensitive << ( ap_block_pp0_stage7_01001 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_m_axi_hash_WUSER);

    SC_METHOD(thread_m_axi_hash_WVALID);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln101_reg_1368 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( icmp_ln101_reg_1368_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_block_pp0_stage7_11001 );

    SC_METHOD(thread_or_ln3_fu_1094_p3);
    sensitive << ( i_2_reg_563 );

    SC_METHOD(thread_or_ln_fu_1027_p3);
    sensitive << ( i_2_reg_563 );

    SC_METHOD(thread_sext_ln101_fu_918_p1);
    sensitive << ( hash_offset );

    SC_METHOD(thread_sext_ln103_fu_974_p1);
    sensitive << ( add_ln103_fu_969_p2 );

    SC_METHOD(thread_sext_ln104_fu_1008_p1);
    sensitive << ( add_ln104_fu_1003_p2 );

    SC_METHOD(thread_sext_ln105_fu_1044_p1);
    sensitive << ( add_ln105_fu_1039_p2 );

    SC_METHOD(thread_sext_ln106_1_fu_1075_p1);
    sensitive << ( add_ln106_fu_1070_p2 );

    SC_METHOD(thread_sext_ln106_fu_1063_p1);
    sensitive << ( xor_ln104_reg_1404 );

    SC_METHOD(thread_sext_ln107_fu_1111_p1);
    sensitive << ( add_ln107_fu_1106_p2 );

    SC_METHOD(thread_sext_ln108_fu_1149_p1);
    sensitive << ( add_ln108_1_fu_1144_p2 );

    SC_METHOD(thread_sext_ln109_1_fu_1171_p1);
    sensitive << ( add_ln109_fu_1166_p2 );

    SC_METHOD(thread_sext_ln109_fu_1159_p1);
    sensitive << ( or_ln_reg_1421 );

    SC_METHOD(thread_sext_ln110_1_fu_1193_p1);
    sensitive << ( add_ln110_fu_1188_p2 );

    SC_METHOD(thread_sext_ln110_fu_1181_p1);
    sensitive << ( xor_ln104_reg_1404 );

    SC_METHOD(thread_shl_ln1_fu_937_p3);
    sensitive << ( trunc_ln103_fu_933_p1 );

    SC_METHOD(thread_shl_ln89_fu_709_p2);
    sensitive << ( ctx_datalen_read );

    SC_METHOD(thread_sub_ln103_fu_945_p2);
    sensitive << ( shl_ln1_fu_937_p3 );

    SC_METHOD(thread_tmp_1_fu_688_p4);
    sensitive << ( i_4_fu_682_p2 );

    SC_METHOD(thread_trunc_ln103_1_fu_961_p1);
    sensitive << ( lshr_ln103_fu_955_p2 );

    SC_METHOD(thread_trunc_ln103_fu_933_p1);
    sensitive << ( ap_phi_mux_i_2_phi_fu_567_p4 );

    SC_METHOD(thread_trunc_ln104_fu_989_p1);
    sensitive << ( lshr_ln104_fu_984_p2 );

    SC_METHOD(thread_trunc_ln105_fu_1023_p1);
    sensitive << ( lshr_ln105_fu_1018_p2 );

    SC_METHOD(thread_trunc_ln106_fu_1059_p1);
    sensitive << ( lshr_ln106_fu_1054_p2 );

    SC_METHOD(thread_trunc_ln107_fu_1090_p1);
    sensitive << ( lshr_ln107_fu_1085_p2 );

    SC_METHOD(thread_trunc_ln108_fu_1130_p1);
    sensitive << ( lshr_ln108_fu_1125_p2 );

    SC_METHOD(thread_trunc_ln109_fu_1208_p1);
    sensitive << ( lshr_ln109_fu_1203_p2 );

    SC_METHOD(thread_trunc_ln110_fu_1217_p1);
    sensitive << ( lshr_ln110_fu_1212_p2 );

    SC_METHOD(thread_trunc_ln89_10_fu_763_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_trunc_ln89_11_fu_770_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_trunc_ln89_12_fu_777_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_trunc_ln89_1_fu_724_p3);
    sensitive << ( trunc_ln89_2_fu_721_p1 );

    SC_METHOD(thread_trunc_ln89_2_fu_721_p1);
    sensitive << ( ctx_datalen_read );

    SC_METHOD(thread_trunc_ln89_3_fu_738_p3);
    sensitive << ( trunc_ln89_6_fu_735_p1 );

    SC_METHOD(thread_trunc_ln89_4_fu_732_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_trunc_ln89_5_fu_752_p3);
    sensitive << ( trunc_ln89_8_fu_749_p1 );

    SC_METHOD(thread_trunc_ln89_6_fu_735_p1);
    sensitive << ( ctx_datalen_read );

    SC_METHOD(thread_trunc_ln89_7_fu_746_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_trunc_ln89_8_fu_749_p1);
    sensitive << ( ctx_datalen_read );

    SC_METHOD(thread_trunc_ln89_9_fu_760_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_trunc_ln89_fu_718_p1);
    sensitive << ( ctx_bitlen_read );

    SC_METHOD(thread_xor_ln104_fu_993_p2);
    sensitive << ( i_2_reg_563 );

    SC_METHOD(thread_zext_ln101_fu_1121_p1);
    sensitive << ( i_2_reg_563 );

    SC_METHOD(thread_zext_ln103_1_fu_965_p1);
    sensitive << ( ap_phi_mux_i_2_phi_fu_567_p4 );

    SC_METHOD(thread_zext_ln103_fu_951_p1);
    sensitive << ( sub_ln103_fu_945_p2 );

    SC_METHOD(thread_zext_ln104_fu_999_p1);
    sensitive << ( xor_ln104_fu_993_p2 );

    SC_METHOD(thread_zext_ln105_fu_1035_p1);
    sensitive << ( or_ln_fu_1027_p3 );

    SC_METHOD(thread_zext_ln106_fu_1066_p1);
    sensitive << ( sext_ln106_fu_1063_p1 );

    SC_METHOD(thread_zext_ln107_fu_1102_p1);
    sensitive << ( or_ln3_fu_1094_p3 );

    SC_METHOD(thread_zext_ln108_fu_1140_p1);
    sensitive << ( add_ln108_fu_1134_p2 );

    SC_METHOD(thread_zext_ln109_fu_1162_p1);
    sensitive << ( sext_ln109_fu_1159_p1 );

    SC_METHOD(thread_zext_ln110_fu_1184_p1);
    sensitive << ( sext_ln110_fu_1181_p1 );

    SC_METHOD(thread_zext_ln77_fu_677_p1);
    sensitive << ( ctx_datalen_read );

    SC_METHOD(thread_zext_ln79_fu_913_p1);
    sensitive << ( i_fu_901_p2 );

    SC_METHOD(thread_zext_ln84_fu_704_p1);
    sensitive << ( i_4_fu_682_p2 );

    SC_METHOD(thread_zext_ln89_1_fu_766_p1);
    sensitive << ( shl_ln89_fu_709_p2 );

    SC_METHOD(thread_zext_ln89_2_fu_773_p1);
    sensitive << ( shl_ln89_fu_709_p2 );

    SC_METHOD(thread_zext_ln89_3_fu_780_p1);
    sensitive << ( shl_ln89_fu_709_p2 );

    SC_METHOD(thread_zext_ln89_fu_714_p1);
    sensitive << ( shl_ln89_fu_709_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_transform_fu_575_ap_done );
    sensitive << ( ap_block_state3_on_subcall_done );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln76_fu_671_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln101_fu_921_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage7_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );
    sensitive << ( icmp_ln83_fu_698_p2 );
    sensitive << ( icmp_ln78_fu_907_p2 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );

    ap_CS_fsm = "0000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    grp_sha256_transform_fu_575_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_final_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_data_address0, "(port)ctx_data_address0");
    sc_trace(mVcdFile, ctx_data_ce0, "(port)ctx_data_ce0");
    sc_trace(mVcdFile, ctx_data_we0, "(port)ctx_data_we0");
    sc_trace(mVcdFile, ctx_data_d0, "(port)ctx_data_d0");
    sc_trace(mVcdFile, ctx_data_q0, "(port)ctx_data_q0");
    sc_trace(mVcdFile, ctx_data_address1, "(port)ctx_data_address1");
    sc_trace(mVcdFile, ctx_data_ce1, "(port)ctx_data_ce1");
    sc_trace(mVcdFile, ctx_data_we1, "(port)ctx_data_we1");
    sc_trace(mVcdFile, ctx_data_d1, "(port)ctx_data_d1");
    sc_trace(mVcdFile, ctx_data_q1, "(port)ctx_data_q1");
    sc_trace(mVcdFile, ctx_datalen_read, "(port)ctx_datalen_read");
    sc_trace(mVcdFile, ctx_bitlen_read, "(port)ctx_bitlen_read");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, p_read9, "(port)p_read9");
    sc_trace(mVcdFile, m_axi_hash_AWVALID, "(port)m_axi_hash_AWVALID");
    sc_trace(mVcdFile, m_axi_hash_AWREADY, "(port)m_axi_hash_AWREADY");
    sc_trace(mVcdFile, m_axi_hash_AWADDR, "(port)m_axi_hash_AWADDR");
    sc_trace(mVcdFile, m_axi_hash_AWID, "(port)m_axi_hash_AWID");
    sc_trace(mVcdFile, m_axi_hash_AWLEN, "(port)m_axi_hash_AWLEN");
    sc_trace(mVcdFile, m_axi_hash_AWSIZE, "(port)m_axi_hash_AWSIZE");
    sc_trace(mVcdFile, m_axi_hash_AWBURST, "(port)m_axi_hash_AWBURST");
    sc_trace(mVcdFile, m_axi_hash_AWLOCK, "(port)m_axi_hash_AWLOCK");
    sc_trace(mVcdFile, m_axi_hash_AWCACHE, "(port)m_axi_hash_AWCACHE");
    sc_trace(mVcdFile, m_axi_hash_AWPROT, "(port)m_axi_hash_AWPROT");
    sc_trace(mVcdFile, m_axi_hash_AWQOS, "(port)m_axi_hash_AWQOS");
    sc_trace(mVcdFile, m_axi_hash_AWREGION, "(port)m_axi_hash_AWREGION");
    sc_trace(mVcdFile, m_axi_hash_AWUSER, "(port)m_axi_hash_AWUSER");
    sc_trace(mVcdFile, m_axi_hash_WVALID, "(port)m_axi_hash_WVALID");
    sc_trace(mVcdFile, m_axi_hash_WREADY, "(port)m_axi_hash_WREADY");
    sc_trace(mVcdFile, m_axi_hash_WDATA, "(port)m_axi_hash_WDATA");
    sc_trace(mVcdFile, m_axi_hash_WSTRB, "(port)m_axi_hash_WSTRB");
    sc_trace(mVcdFile, m_axi_hash_WLAST, "(port)m_axi_hash_WLAST");
    sc_trace(mVcdFile, m_axi_hash_WID, "(port)m_axi_hash_WID");
    sc_trace(mVcdFile, m_axi_hash_WUSER, "(port)m_axi_hash_WUSER");
    sc_trace(mVcdFile, m_axi_hash_ARVALID, "(port)m_axi_hash_ARVALID");
    sc_trace(mVcdFile, m_axi_hash_ARREADY, "(port)m_axi_hash_ARREADY");
    sc_trace(mVcdFile, m_axi_hash_ARADDR, "(port)m_axi_hash_ARADDR");
    sc_trace(mVcdFile, m_axi_hash_ARID, "(port)m_axi_hash_ARID");
    sc_trace(mVcdFile, m_axi_hash_ARLEN, "(port)m_axi_hash_ARLEN");
    sc_trace(mVcdFile, m_axi_hash_ARSIZE, "(port)m_axi_hash_ARSIZE");
    sc_trace(mVcdFile, m_axi_hash_ARBURST, "(port)m_axi_hash_ARBURST");
    sc_trace(mVcdFile, m_axi_hash_ARLOCK, "(port)m_axi_hash_ARLOCK");
    sc_trace(mVcdFile, m_axi_hash_ARCACHE, "(port)m_axi_hash_ARCACHE");
    sc_trace(mVcdFile, m_axi_hash_ARPROT, "(port)m_axi_hash_ARPROT");
    sc_trace(mVcdFile, m_axi_hash_ARQOS, "(port)m_axi_hash_ARQOS");
    sc_trace(mVcdFile, m_axi_hash_ARREGION, "(port)m_axi_hash_ARREGION");
    sc_trace(mVcdFile, m_axi_hash_ARUSER, "(port)m_axi_hash_ARUSER");
    sc_trace(mVcdFile, m_axi_hash_RVALID, "(port)m_axi_hash_RVALID");
    sc_trace(mVcdFile, m_axi_hash_RREADY, "(port)m_axi_hash_RREADY");
    sc_trace(mVcdFile, m_axi_hash_RDATA, "(port)m_axi_hash_RDATA");
    sc_trace(mVcdFile, m_axi_hash_RLAST, "(port)m_axi_hash_RLAST");
    sc_trace(mVcdFile, m_axi_hash_RID, "(port)m_axi_hash_RID");
    sc_trace(mVcdFile, m_axi_hash_RUSER, "(port)m_axi_hash_RUSER");
    sc_trace(mVcdFile, m_axi_hash_RRESP, "(port)m_axi_hash_RRESP");
    sc_trace(mVcdFile, m_axi_hash_BVALID, "(port)m_axi_hash_BVALID");
    sc_trace(mVcdFile, m_axi_hash_BREADY, "(port)m_axi_hash_BREADY");
    sc_trace(mVcdFile, m_axi_hash_BRESP, "(port)m_axi_hash_BRESP");
    sc_trace(mVcdFile, m_axi_hash_BID, "(port)m_axi_hash_BID");
    sc_trace(mVcdFile, m_axi_hash_BUSER, "(port)m_axi_hash_BUSER");
    sc_trace(mVcdFile, hash_offset, "(port)hash_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, hash_blk_n_AW, "hash_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, icmp_ln101_reg_1368, "icmp_ln101_reg_1368");
    sc_trace(mVcdFile, hash_blk_n_W, "hash_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, hash_blk_n_B, "hash_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_pp0_stage7, "ap_block_pp0_stage7");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, icmp_ln101_reg_1368_pp0_iter1_reg, "icmp_ln101_reg_1368_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_pp0_stage5, "ap_block_pp0_stage5");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_pp0_stage6, "ap_block_pp0_stage6");
    sc_trace(mVcdFile, i_2_reg_563, "i_2_reg_563");
    sc_trace(mVcdFile, reg_631, "reg_631");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_ready, "grp_sha256_transform_fu_575_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_done, "grp_sha256_transform_fu_575_ap_done");
    sc_trace(mVcdFile, icmp_ln76_reg_1296, "icmp_ln76_reg_1296");
    sc_trace(mVcdFile, ap_block_state3_on_subcall_done, "ap_block_state3_on_subcall_done");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, reg_636, "reg_636");
    sc_trace(mVcdFile, reg_641, "reg_641");
    sc_trace(mVcdFile, reg_646, "reg_646");
    sc_trace(mVcdFile, reg_651, "reg_651");
    sc_trace(mVcdFile, reg_656, "reg_656");
    sc_trace(mVcdFile, reg_661, "reg_661");
    sc_trace(mVcdFile, reg_666, "reg_666");
    sc_trace(mVcdFile, icmp_ln76_fu_671_p2, "icmp_ln76_fu_671_p2");
    sc_trace(mVcdFile, i_4_fu_682_p2, "i_4_fu_682_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln90_fu_825_p2, "add_ln90_fu_825_p2");
    sc_trace(mVcdFile, add_ln90_reg_1308, "add_ln90_reg_1308");
    sc_trace(mVcdFile, trunc_ln1_reg_1313, "trunc_ln1_reg_1313");
    sc_trace(mVcdFile, trunc_ln2_reg_1318, "trunc_ln2_reg_1318");
    sc_trace(mVcdFile, trunc_ln3_reg_1323, "trunc_ln3_reg_1323");
    sc_trace(mVcdFile, trunc_ln4_reg_1328, "trunc_ln4_reg_1328");
    sc_trace(mVcdFile, trunc_ln5_reg_1333, "trunc_ln5_reg_1333");
    sc_trace(mVcdFile, trunc_ln6_reg_1338, "trunc_ln6_reg_1338");
    sc_trace(mVcdFile, trunc_ln7_reg_1343, "trunc_ln7_reg_1343");
    sc_trace(mVcdFile, i_fu_901_p2, "i_fu_901_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sext_ln101_fu_918_p1, "sext_ln101_fu_918_p1");
    sc_trace(mVcdFile, sext_ln101_reg_1356, "sext_ln101_reg_1356");
    sc_trace(mVcdFile, icmp_ln101_fu_921_p2, "icmp_ln101_fu_921_p2");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter0, "ap_block_state11_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter1, "ap_block_state19_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state19_io, "ap_block_state19_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_5_fu_927_p2, "i_5_fu_927_p2");
    sc_trace(mVcdFile, i_5_reg_1372, "i_5_reg_1372");
    sc_trace(mVcdFile, zext_ln103_fu_951_p1, "zext_ln103_fu_951_p1");
    sc_trace(mVcdFile, zext_ln103_reg_1377, "zext_ln103_reg_1377");
    sc_trace(mVcdFile, trunc_ln103_1_fu_961_p1, "trunc_ln103_1_fu_961_p1");
    sc_trace(mVcdFile, trunc_ln103_1_reg_1388, "trunc_ln103_1_reg_1388");
    sc_trace(mVcdFile, hash_addr_reg_1393, "hash_addr_reg_1393");
    sc_trace(mVcdFile, trunc_ln104_fu_989_p1, "trunc_ln104_fu_989_p1");
    sc_trace(mVcdFile, trunc_ln104_reg_1399, "trunc_ln104_reg_1399");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage1_iter0, "ap_block_state12_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state12_io, "ap_block_state12_io");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage1_iter1, "ap_block_state20_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state20_io, "ap_block_state20_io");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, xor_ln104_fu_993_p2, "xor_ln104_fu_993_p2");
    sc_trace(mVcdFile, xor_ln104_reg_1404, "xor_ln104_reg_1404");
    sc_trace(mVcdFile, hash_addr_1_reg_1410, "hash_addr_1_reg_1410");
    sc_trace(mVcdFile, trunc_ln105_fu_1023_p1, "trunc_ln105_fu_1023_p1");
    sc_trace(mVcdFile, trunc_ln105_reg_1416, "trunc_ln105_reg_1416");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage2_iter0, "ap_block_state13_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage2_iter1, "ap_block_state21_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, or_ln_fu_1027_p3, "or_ln_fu_1027_p3");
    sc_trace(mVcdFile, or_ln_reg_1421, "or_ln_reg_1421");
    sc_trace(mVcdFile, hash_addr_2_reg_1426, "hash_addr_2_reg_1426");
    sc_trace(mVcdFile, trunc_ln106_fu_1059_p1, "trunc_ln106_fu_1059_p1");
    sc_trace(mVcdFile, trunc_ln106_reg_1432, "trunc_ln106_reg_1432");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage3_iter0, "ap_block_state14_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_state22_pp0_stage3_iter1, "ap_block_state22_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, hash_addr_3_reg_1437, "hash_addr_3_reg_1437");
    sc_trace(mVcdFile, trunc_ln107_fu_1090_p1, "trunc_ln107_fu_1090_p1");
    sc_trace(mVcdFile, trunc_ln107_reg_1443, "trunc_ln107_reg_1443");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage4_iter0, "ap_block_state15_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_state23_pp0_stage4_iter1, "ap_block_state23_pp0_stage4_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, hash_addr_4_reg_1448, "hash_addr_4_reg_1448");
    sc_trace(mVcdFile, trunc_ln108_fu_1130_p1, "trunc_ln108_fu_1130_p1");
    sc_trace(mVcdFile, trunc_ln108_reg_1454, "trunc_ln108_reg_1454");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage5_iter0, "ap_block_state16_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_state24_pp0_stage5_iter1, "ap_block_state24_pp0_stage5_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage5_11001, "ap_block_pp0_stage5_11001");
    sc_trace(mVcdFile, hash_addr_5_reg_1459, "hash_addr_5_reg_1459");
    sc_trace(mVcdFile, hash_addr_6_reg_1465, "hash_addr_6_reg_1465");
    sc_trace(mVcdFile, hash_addr_7_reg_1471, "hash_addr_7_reg_1471");
    sc_trace(mVcdFile, trunc_ln109_fu_1208_p1, "trunc_ln109_fu_1208_p1");
    sc_trace(mVcdFile, trunc_ln109_reg_1477, "trunc_ln109_reg_1477");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage6_iter0, "ap_block_state17_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_state17_io, "ap_block_state17_io");
    sc_trace(mVcdFile, ap_block_state25_pp0_stage6_iter1, "ap_block_state25_pp0_stage6_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage6_11001, "ap_block_pp0_stage6_11001");
    sc_trace(mVcdFile, trunc_ln110_fu_1217_p1, "trunc_ln110_fu_1217_p1");
    sc_trace(mVcdFile, trunc_ln110_reg_1482, "trunc_ln110_reg_1482");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage7_iter0, "ap_block_state18_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_state18_io, "ap_block_state18_io");
    sc_trace(mVcdFile, ap_block_pp0_stage7_11001, "ap_block_pp0_stage7_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state11, "ap_condition_pp0_exit_iter0_state11");
    sc_trace(mVcdFile, ap_block_pp0_stage7_subdone, "ap_block_pp0_stage7_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_start, "grp_sha256_transform_fu_575_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_idle, "grp_sha256_transform_fu_575_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_0_read, "grp_sha256_transform_fu_575_ctx_state_0_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_1_read, "grp_sha256_transform_fu_575_ctx_state_1_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_2_read, "grp_sha256_transform_fu_575_ctx_state_2_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_3_read, "grp_sha256_transform_fu_575_ctx_state_3_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_4_read, "grp_sha256_transform_fu_575_ctx_state_4_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_5_read, "grp_sha256_transform_fu_575_ctx_state_5_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_6_read, "grp_sha256_transform_fu_575_ctx_state_6_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ctx_state_7_read, "grp_sha256_transform_fu_575_ctx_state_7_read");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_data_address0, "grp_sha256_transform_fu_575_data_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_data_ce0, "grp_sha256_transform_fu_575_data_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_data_address1, "grp_sha256_transform_fu_575_data_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_data_ce1, "grp_sha256_transform_fu_575_data_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_0, "grp_sha256_transform_fu_575_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_1, "grp_sha256_transform_fu_575_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_2, "grp_sha256_transform_fu_575_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_3, "grp_sha256_transform_fu_575_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_4, "grp_sha256_transform_fu_575_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_5, "grp_sha256_transform_fu_575_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_6, "grp_sha256_transform_fu_575_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_return_7, "grp_sha256_transform_fu_575_ap_return_7");
    sc_trace(mVcdFile, i_1_in_reg_465, "i_1_in_reg_465");
    sc_trace(mVcdFile, icmp_ln83_fu_698_p2, "icmp_ln83_fu_698_p2");
    sc_trace(mVcdFile, i_0_in_reg_474, "i_0_in_reg_474");
    sc_trace(mVcdFile, icmp_ln78_fu_907_p2, "icmp_ln78_fu_907_p2");
    sc_trace(mVcdFile, ctx_state_0_0_reg_483, "ctx_state_0_0_reg_483");
    sc_trace(mVcdFile, ctx_state_1_0_reg_493, "ctx_state_1_0_reg_493");
    sc_trace(mVcdFile, ctx_state_2_0_reg_503, "ctx_state_2_0_reg_503");
    sc_trace(mVcdFile, ctx_state_3_0_reg_513, "ctx_state_3_0_reg_513");
    sc_trace(mVcdFile, ctx_state_4_0_reg_523, "ctx_state_4_0_reg_523");
    sc_trace(mVcdFile, ctx_state_5_0_reg_533, "ctx_state_5_0_reg_533");
    sc_trace(mVcdFile, ctx_state_6_0_reg_543, "ctx_state_6_0_reg_543");
    sc_trace(mVcdFile, ctx_state_7_0_reg_553, "ctx_state_7_0_reg_553");
    sc_trace(mVcdFile, ap_phi_mux_i_2_phi_fu_567_p4, "ap_phi_mux_i_2_phi_fu_567_p4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_575_ap_start_reg, "grp_sha256_transform_fu_575_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, zext_ln77_fu_677_p1, "zext_ln77_fu_677_p1");
    sc_trace(mVcdFile, zext_ln84_fu_704_p1, "zext_ln84_fu_704_p1");
    sc_trace(mVcdFile, zext_ln79_fu_913_p1, "zext_ln79_fu_913_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, sext_ln103_fu_974_p1, "sext_ln103_fu_974_p1");
    sc_trace(mVcdFile, sext_ln104_fu_1008_p1, "sext_ln104_fu_1008_p1");
    sc_trace(mVcdFile, sext_ln105_fu_1044_p1, "sext_ln105_fu_1044_p1");
    sc_trace(mVcdFile, sext_ln106_1_fu_1075_p1, "sext_ln106_1_fu_1075_p1");
    sc_trace(mVcdFile, sext_ln107_fu_1111_p1, "sext_ln107_fu_1111_p1");
    sc_trace(mVcdFile, sext_ln108_fu_1149_p1, "sext_ln108_fu_1149_p1");
    sc_trace(mVcdFile, sext_ln109_1_fu_1171_p1, "sext_ln109_1_fu_1171_p1");
    sc_trace(mVcdFile, sext_ln110_1_fu_1193_p1, "sext_ln110_1_fu_1193_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_01001, "ap_block_pp0_stage2_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage3_01001, "ap_block_pp0_stage3_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage4_01001, "ap_block_pp0_stage4_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage5_01001, "ap_block_pp0_stage5_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage6_01001, "ap_block_pp0_stage6_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage7_01001, "ap_block_pp0_stage7_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage1_01001, "ap_block_pp0_stage1_01001");
    sc_trace(mVcdFile, tmp_1_fu_688_p4, "tmp_1_fu_688_p4");
    sc_trace(mVcdFile, shl_ln89_fu_709_p2, "shl_ln89_fu_709_p2");
    sc_trace(mVcdFile, trunc_ln89_2_fu_721_p1, "trunc_ln89_2_fu_721_p1");
    sc_trace(mVcdFile, trunc_ln89_6_fu_735_p1, "trunc_ln89_6_fu_735_p1");
    sc_trace(mVcdFile, trunc_ln89_8_fu_749_p1, "trunc_ln89_8_fu_749_p1");
    sc_trace(mVcdFile, zext_ln89_fu_714_p1, "zext_ln89_fu_714_p1");
    sc_trace(mVcdFile, zext_ln89_3_fu_780_p1, "zext_ln89_3_fu_780_p1");
    sc_trace(mVcdFile, trunc_ln89_12_fu_777_p1, "trunc_ln89_12_fu_777_p1");
    sc_trace(mVcdFile, zext_ln89_2_fu_773_p1, "zext_ln89_2_fu_773_p1");
    sc_trace(mVcdFile, trunc_ln89_11_fu_770_p1, "trunc_ln89_11_fu_770_p1");
    sc_trace(mVcdFile, zext_ln89_1_fu_766_p1, "zext_ln89_1_fu_766_p1");
    sc_trace(mVcdFile, trunc_ln89_10_fu_763_p1, "trunc_ln89_10_fu_763_p1");
    sc_trace(mVcdFile, trunc_ln89_9_fu_760_p1, "trunc_ln89_9_fu_760_p1");
    sc_trace(mVcdFile, trunc_ln89_5_fu_752_p3, "trunc_ln89_5_fu_752_p3");
    sc_trace(mVcdFile, trunc_ln89_7_fu_746_p1, "trunc_ln89_7_fu_746_p1");
    sc_trace(mVcdFile, trunc_ln89_3_fu_738_p3, "trunc_ln89_3_fu_738_p3");
    sc_trace(mVcdFile, trunc_ln89_4_fu_732_p1, "trunc_ln89_4_fu_732_p1");
    sc_trace(mVcdFile, trunc_ln89_fu_718_p1, "trunc_ln89_fu_718_p1");
    sc_trace(mVcdFile, trunc_ln89_1_fu_724_p3, "trunc_ln89_1_fu_724_p3");
    sc_trace(mVcdFile, add_ln90_6_fu_819_p2, "add_ln90_6_fu_819_p2");
    sc_trace(mVcdFile, add_ln90_5_fu_813_p2, "add_ln90_5_fu_813_p2");
    sc_trace(mVcdFile, add_ln90_4_fu_807_p2, "add_ln90_4_fu_807_p2");
    sc_trace(mVcdFile, add_ln90_3_fu_801_p2, "add_ln90_3_fu_801_p2");
    sc_trace(mVcdFile, add_ln90_2_fu_795_p2, "add_ln90_2_fu_795_p2");
    sc_trace(mVcdFile, add_ln90_1_fu_789_p2, "add_ln90_1_fu_789_p2");
    sc_trace(mVcdFile, add_ln89_fu_784_p2, "add_ln89_fu_784_p2");
    sc_trace(mVcdFile, trunc_ln103_fu_933_p1, "trunc_ln103_fu_933_p1");
    sc_trace(mVcdFile, shl_ln1_fu_937_p3, "shl_ln1_fu_937_p3");
    sc_trace(mVcdFile, sub_ln103_fu_945_p2, "sub_ln103_fu_945_p2");
    sc_trace(mVcdFile, lshr_ln103_fu_955_p2, "lshr_ln103_fu_955_p2");
    sc_trace(mVcdFile, zext_ln103_1_fu_965_p1, "zext_ln103_1_fu_965_p1");
    sc_trace(mVcdFile, add_ln103_fu_969_p2, "add_ln103_fu_969_p2");
    sc_trace(mVcdFile, lshr_ln104_fu_984_p2, "lshr_ln104_fu_984_p2");
    sc_trace(mVcdFile, zext_ln104_fu_999_p1, "zext_ln104_fu_999_p1");
    sc_trace(mVcdFile, add_ln104_fu_1003_p2, "add_ln104_fu_1003_p2");
    sc_trace(mVcdFile, lshr_ln105_fu_1018_p2, "lshr_ln105_fu_1018_p2");
    sc_trace(mVcdFile, zext_ln105_fu_1035_p1, "zext_ln105_fu_1035_p1");
    sc_trace(mVcdFile, add_ln105_fu_1039_p2, "add_ln105_fu_1039_p2");
    sc_trace(mVcdFile, lshr_ln106_fu_1054_p2, "lshr_ln106_fu_1054_p2");
    sc_trace(mVcdFile, sext_ln106_fu_1063_p1, "sext_ln106_fu_1063_p1");
    sc_trace(mVcdFile, zext_ln106_fu_1066_p1, "zext_ln106_fu_1066_p1");
    sc_trace(mVcdFile, add_ln106_fu_1070_p2, "add_ln106_fu_1070_p2");
    sc_trace(mVcdFile, lshr_ln107_fu_1085_p2, "lshr_ln107_fu_1085_p2");
    sc_trace(mVcdFile, or_ln3_fu_1094_p3, "or_ln3_fu_1094_p3");
    sc_trace(mVcdFile, zext_ln107_fu_1102_p1, "zext_ln107_fu_1102_p1");
    sc_trace(mVcdFile, add_ln107_fu_1106_p2, "add_ln107_fu_1106_p2");
    sc_trace(mVcdFile, lshr_ln108_fu_1125_p2, "lshr_ln108_fu_1125_p2");
    sc_trace(mVcdFile, zext_ln101_fu_1121_p1, "zext_ln101_fu_1121_p1");
    sc_trace(mVcdFile, add_ln108_fu_1134_p2, "add_ln108_fu_1134_p2");
    sc_trace(mVcdFile, zext_ln108_fu_1140_p1, "zext_ln108_fu_1140_p1");
    sc_trace(mVcdFile, add_ln108_1_fu_1144_p2, "add_ln108_1_fu_1144_p2");
    sc_trace(mVcdFile, sext_ln109_fu_1159_p1, "sext_ln109_fu_1159_p1");
    sc_trace(mVcdFile, zext_ln109_fu_1162_p1, "zext_ln109_fu_1162_p1");
    sc_trace(mVcdFile, add_ln109_fu_1166_p2, "add_ln109_fu_1166_p2");
    sc_trace(mVcdFile, sext_ln110_fu_1181_p1, "sext_ln110_fu_1181_p1");
    sc_trace(mVcdFile, zext_ln110_fu_1184_p1, "zext_ln110_fu_1184_p1");
    sc_trace(mVcdFile, add_ln110_fu_1188_p2, "add_ln110_fu_1188_p2");
    sc_trace(mVcdFile, lshr_ln109_fu_1203_p2, "lshr_ln109_fu_1203_p2");
    sc_trace(mVcdFile, lshr_ln110_fu_1212_p2, "lshr_ln110_fu_1212_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_656, "ap_condition_656");
    sc_trace(mVcdFile, ap_condition_660, "ap_condition_660");
    sc_trace(mVcdFile, ap_condition_669, "ap_condition_669");
    sc_trace(mVcdFile, ap_condition_682, "ap_condition_682");
    sc_trace(mVcdFile, ap_condition_695, "ap_condition_695");
    sc_trace(mVcdFile, ap_condition_708, "ap_condition_708");
    sc_trace(mVcdFile, ap_condition_658, "ap_condition_658");
    sc_trace(mVcdFile, ap_condition_582, "ap_condition_582");
#endif

    }
}

sha256_final::~sha256_final() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_sha256_transform_fu_575;
}

void sha256_final::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state11.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                    esl_seteq<1,1,1>(grp_sha256_transform_fu_575_ap_done.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                    esl_seteq<1,1,1>(grp_sha256_transform_fu_575_ap_done.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_0_0_reg_483 = p_read2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_0_0_reg_483 = grp_sha256_transform_fu_575_ap_return_0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_1_0_reg_493 = p_read3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_1_0_reg_493 = grp_sha256_transform_fu_575_ap_return_1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_2_0_reg_503 = p_read4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_2_0_reg_503 = grp_sha256_transform_fu_575_ap_return_2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_3_0_reg_513 = p_read5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_3_0_reg_513 = grp_sha256_transform_fu_575_ap_return_3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_4_0_reg_523 = p_read6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_4_0_reg_523 = grp_sha256_transform_fu_575_ap_return_4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_5_0_reg_533 = p_read7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_5_0_reg_533 = grp_sha256_transform_fu_575_ap_return_5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_6_0_reg_543 = p_read8.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_6_0_reg_543 = grp_sha256_transform_fu_575_ap_return_6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
        ctx_state_7_0_reg_553 = p_read9.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
                esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_7_0_reg_553 = grp_sha256_transform_fu_575_ap_return_7.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_transform_fu_575_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln83_fu_698_p2.read())) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
            grp_sha256_transform_fu_575_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_575_ap_ready.read())) {
            grp_sha256_transform_fu_575_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(icmp_ln76_fu_671_p2.read(), ap_const_lv1_1))) {
        i_0_in_reg_474 = ctx_datalen_read.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln78_fu_907_p2.read()))) {
        i_0_in_reg_474 = i_fu_901_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_fu_671_p2.read()))) {
        i_1_in_reg_465 = ctx_datalen_read.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln83_fu_698_p2.read()))) {
        i_1_in_reg_465 = i_4_fu_682_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_2_reg_563 = i_5_reg_1372.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(grp_sha256_transform_fu_575_ap_done.read(), ap_const_logic_1))) {
        i_2_reg_563 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        add_ln90_reg_1308 = add_ln90_fu_825_p2.read();
        trunc_ln1_reg_1313 = add_ln90_6_fu_819_p2.read().range(15, 8);
        trunc_ln2_reg_1318 = add_ln90_5_fu_813_p2.read().range(23, 16);
        trunc_ln3_reg_1323 = add_ln90_4_fu_807_p2.read().range(31, 24);
        trunc_ln4_reg_1328 = add_ln90_3_fu_801_p2.read().range(39, 32);
        trunc_ln5_reg_1333 = add_ln90_2_fu_795_p2.read().range(47, 40);
        trunc_ln6_reg_1338 = add_ln90_1_fu_789_p2.read().range(55, 48);
        trunc_ln7_reg_1343 = add_ln89_fu_784_p2.read().range(63, 56);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        hash_addr_1_reg_1410 =  (sc_lv<32>) (sext_ln104_fu_1008_p1.read());
        trunc_ln104_reg_1399 = trunc_ln104_fu_989_p1.read();
        xor_ln104_reg_1404 = xor_ln104_fu_993_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        hash_addr_2_reg_1426 =  (sc_lv<32>) (sext_ln105_fu_1044_p1.read());
        or_ln_reg_1421 = or_ln_fu_1027_p3.read();
        trunc_ln105_reg_1416 = trunc_ln105_fu_1023_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        hash_addr_3_reg_1437 =  (sc_lv<32>) (sext_ln106_1_fu_1075_p1.read());
        trunc_ln106_reg_1432 = trunc_ln106_fu_1059_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        hash_addr_4_reg_1448 =  (sc_lv<32>) (sext_ln107_fu_1111_p1.read());
        trunc_ln107_reg_1443 = trunc_ln107_fu_1090_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        hash_addr_5_reg_1459 =  (sc_lv<32>) (sext_ln108_fu_1149_p1.read());
        hash_addr_6_reg_1465 =  (sc_lv<32>) (sext_ln109_1_fu_1171_p1.read());
        hash_addr_7_reg_1471 =  (sc_lv<32>) (sext_ln110_1_fu_1193_p1.read());
        trunc_ln108_reg_1454 = trunc_ln108_fu_1130_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_921_p2.read()))) {
        hash_addr_reg_1393 =  (sc_lv<32>) (sext_ln103_fu_974_p1.read());
        trunc_ln103_1_reg_1388 = trunc_ln103_1_fu_961_p1.read();
        zext_ln103_reg_1377 = zext_ln103_fu_951_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_5_reg_1372 = i_5_fu_927_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln101_reg_1368 = icmp_ln101_fu_921_p2.read();
        icmp_ln101_reg_1368_pp0_iter1_reg = icmp_ln101_reg_1368.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln76_reg_1296 = icmp_ln76_fu_671_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()) && 
  esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
  esl_seteq<1,1,1>(grp_sha256_transform_fu_575_ap_done.read(), ap_const_logic_1)))) {
        reg_631 = grp_sha256_transform_fu_575_ap_return_0.read();
        reg_636 = grp_sha256_transform_fu_575_ap_return_1.read();
        reg_641 = grp_sha256_transform_fu_575_ap_return_2.read();
        reg_646 = grp_sha256_transform_fu_575_ap_return_3.read();
        reg_651 = grp_sha256_transform_fu_575_ap_return_4.read();
        reg_656 = grp_sha256_transform_fu_575_ap_return_5.read();
        reg_661 = grp_sha256_transform_fu_575_ap_return_6.read();
        reg_666 = grp_sha256_transform_fu_575_ap_return_7.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_sha256_transform_fu_575_ap_done.read(), ap_const_logic_1))) {
        sext_ln101_reg_1356 = sext_ln101_fu_918_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        trunc_ln109_reg_1477 = trunc_ln109_fu_1208_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0))) {
        trunc_ln110_reg_1482 = trunc_ln110_fu_1217_p1.read();
    }
}

void sha256_final::thread_add_ln103_fu_969_p2() {
    add_ln103_fu_969_p2 = (!zext_ln103_1_fu_965_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln103_1_fu_965_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln104_fu_1003_p2() {
    add_ln104_fu_1003_p2 = (!zext_ln104_fu_999_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln104_fu_999_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln105_fu_1039_p2() {
    add_ln105_fu_1039_p2 = (!zext_ln105_fu_1035_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln105_fu_1035_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln106_fu_1070_p2() {
    add_ln106_fu_1070_p2 = (!zext_ln106_fu_1066_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln106_fu_1066_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln107_fu_1106_p2() {
    add_ln107_fu_1106_p2 = (!zext_ln107_fu_1102_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln107_fu_1102_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln108_1_fu_1144_p2() {
    add_ln108_1_fu_1144_p2 = (!zext_ln108_fu_1140_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln108_fu_1140_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln108_fu_1134_p2() {
    add_ln108_fu_1134_p2 = (!ap_const_lv5_14.is_01() || !zext_ln101_fu_1121_p1.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_14) + sc_biguint<5>(zext_ln101_fu_1121_p1.read()));
}

void sha256_final::thread_add_ln109_fu_1166_p2() {
    add_ln109_fu_1166_p2 = (!zext_ln109_fu_1162_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln109_fu_1162_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln110_fu_1188_p2() {
    add_ln110_fu_1188_p2 = (!zext_ln110_fu_1184_p1.read().is_01() || !sext_ln101_reg_1356.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln110_fu_1184_p1.read()) + sc_bigint<33>(sext_ln101_reg_1356.read()));
}

void sha256_final::thread_add_ln89_fu_784_p2() {
    add_ln89_fu_784_p2 = (!zext_ln89_fu_714_p1.read().is_01() || !ctx_bitlen_read.read().is_01())? sc_lv<64>(): (sc_biguint<64>(zext_ln89_fu_714_p1.read()) + sc_biguint<64>(ctx_bitlen_read.read()));
}

void sha256_final::thread_add_ln90_1_fu_789_p2() {
    add_ln90_1_fu_789_p2 = (!zext_ln89_3_fu_780_p1.read().is_01() || !trunc_ln89_12_fu_777_p1.read().is_01())? sc_lv<56>(): (sc_biguint<56>(zext_ln89_3_fu_780_p1.read()) + sc_biguint<56>(trunc_ln89_12_fu_777_p1.read()));
}

void sha256_final::thread_add_ln90_2_fu_795_p2() {
    add_ln90_2_fu_795_p2 = (!zext_ln89_2_fu_773_p1.read().is_01() || !trunc_ln89_11_fu_770_p1.read().is_01())? sc_lv<48>(): (sc_biguint<48>(zext_ln89_2_fu_773_p1.read()) + sc_biguint<48>(trunc_ln89_11_fu_770_p1.read()));
}

void sha256_final::thread_add_ln90_3_fu_801_p2() {
    add_ln90_3_fu_801_p2 = (!zext_ln89_1_fu_766_p1.read().is_01() || !trunc_ln89_10_fu_763_p1.read().is_01())? sc_lv<40>(): (sc_biguint<40>(zext_ln89_1_fu_766_p1.read()) + sc_biguint<40>(trunc_ln89_10_fu_763_p1.read()));
}

void sha256_final::thread_add_ln90_4_fu_807_p2() {
    add_ln90_4_fu_807_p2 = (!shl_ln89_fu_709_p2.read().is_01() || !trunc_ln89_9_fu_760_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln89_fu_709_p2.read()) + sc_biguint<32>(trunc_ln89_9_fu_760_p1.read()));
}

void sha256_final::thread_add_ln90_5_fu_813_p2() {
    add_ln90_5_fu_813_p2 = (!trunc_ln89_5_fu_752_p3.read().is_01() || !trunc_ln89_7_fu_746_p1.read().is_01())? sc_lv<24>(): (sc_biguint<24>(trunc_ln89_5_fu_752_p3.read()) + sc_biguint<24>(trunc_ln89_7_fu_746_p1.read()));
}

void sha256_final::thread_add_ln90_6_fu_819_p2() {
    add_ln90_6_fu_819_p2 = (!trunc_ln89_3_fu_738_p3.read().is_01() || !trunc_ln89_4_fu_732_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(trunc_ln89_3_fu_738_p3.read()) + sc_biguint<16>(trunc_ln89_4_fu_732_p1.read()));
}

void sha256_final::thread_add_ln90_fu_825_p2() {
    add_ln90_fu_825_p2 = (!trunc_ln89_fu_718_p1.read().is_01() || !trunc_ln89_1_fu_724_p3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(trunc_ln89_fu_718_p1.read()) + sc_biguint<8>(trunc_ln89_1_fu_724_p3.read()));
}

void sha256_final::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[10];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[11];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[12];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[13];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[14];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[15];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[16];
}

void sha256_final::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[17];
}

void sha256_final::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_final::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256_final::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_final::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[18];
}

void sha256_final::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_final::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_final::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_final::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256_final::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_final::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256_final::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256_final::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state19_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state19_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage1_01001() {
    ap_block_pp0_stage1_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state12_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read()))));
}

void sha256_final::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state12_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read()))));
}

void sha256_final::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage2_01001() {
    ap_block_pp0_stage2_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())));
}

void sha256_final::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())));
}

void sha256_final::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage3_01001() {
    ap_block_pp0_stage3_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage4_01001() {
    ap_block_pp0_stage4_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage5() {
    ap_block_pp0_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage5_01001() {
    ap_block_pp0_stage5_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage5_11001() {
    ap_block_pp0_stage5_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage6() {
    ap_block_pp0_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage6_01001() {
    ap_block_pp0_stage6_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage6_11001() {
    ap_block_pp0_stage6_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state17_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state17_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage7() {
    ap_block_pp0_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_pp0_stage7_01001() {
    ap_block_pp0_stage7_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_pp0_stage7_11001() {
    ap_block_pp0_stage7_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())));
}

void sha256_final::thread_ap_block_pp0_stage7_subdone() {
    ap_block_pp0_stage7_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())));
}

void sha256_final::thread_ap_block_state11_pp0_stage0_iter0() {
    ap_block_state11_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state12_io() {
    ap_block_state12_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read()));
}

void sha256_final::thread_ap_block_state12_pp0_stage1_iter0() {
    ap_block_state12_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state13_io() {
    ap_block_state13_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state13_pp0_stage2_iter0() {
    ap_block_state13_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state14_io() {
    ap_block_state14_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state14_pp0_stage3_iter0() {
    ap_block_state14_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state15_io() {
    ap_block_state15_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state15_pp0_stage4_iter0() {
    ap_block_state15_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state16_io() {
    ap_block_state16_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state16_pp0_stage5_iter0() {
    ap_block_state16_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state17_io() {
    ap_block_state17_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state17_pp0_stage6_iter0() {
    ap_block_state17_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sha256_final::thread_ap_block_state18_io() {
    ap_block_state18_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state18_pp0_stage7_iter0() {
    ap_block_state18_pp0_stage7_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state19_io() {
    ap_block_state19_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_AWREADY.read())));
}

void sha256_final::thread_ap_block_state19_pp0_stage0_iter1() {
    ap_block_state19_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state20_io() {
    ap_block_state20_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_WREADY.read()));
}

void sha256_final::thread_ap_block_state20_pp0_stage1_iter1() {
    ap_block_state20_pp0_stage1_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state21_pp0_stage2_iter1() {
    ap_block_state21_pp0_stage2_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state22_pp0_stage3_iter1() {
    ap_block_state22_pp0_stage3_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state23_pp0_stage4_iter1() {
    ap_block_state23_pp0_stage4_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state24_pp0_stage5_iter1() {
    ap_block_state24_pp0_stage5_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state25_pp0_stage6_iter1() {
    ap_block_state25_pp0_stage6_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_hash_BVALID.read()));
}

void sha256_final::thread_ap_block_state3_on_subcall_done() {
    ap_block_state3_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_575_ap_done.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()));
}

void sha256_final::thread_ap_condition_582() {
    ap_condition_582 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_656() {
    ap_condition_656 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_658() {
    ap_condition_658 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_660() {
    ap_condition_660 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_669() {
    ap_condition_669 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_682() {
    ap_condition_682 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_695() {
    ap_condition_695 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_708() {
    ap_condition_708 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0));
}

void sha256_final::thread_ap_condition_pp0_exit_iter0_state11() {
    if (esl_seteq<1,1,1>(icmp_ln101_fu_921_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state11 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state11 = ap_const_logic_0;
    }
}

void sha256_final::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_final::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void sha256_final::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_final::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void sha256_final::thread_ap_phi_mux_i_2_phi_fu_567_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_2_phi_fu_567_p4 = i_5_reg_1372.read();
    } else {
        ap_phi_mux_i_2_phi_fu_567_p4 = i_2_reg_563.read();
    }
}

void sha256_final::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_final::thread_ctx_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctx_data_address0 =  (sc_lv<6>) (ap_const_lv64_38);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_data_address0 =  (sc_lv<6>) (ap_const_lv64_3A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_address0 =  (sc_lv<6>) (ap_const_lv64_3C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctx_data_address0 =  (sc_lv<6>) (ap_const_lv64_3F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_data_address0 =  (sc_lv<6>) (zext_ln79_fu_913_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln83_fu_698_p2.read()))) {
        ctx_data_address0 =  (sc_lv<6>) (zext_ln84_fu_704_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ctx_data_address0 =  (sc_lv<6>) (zext_ln77_fu_677_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read())))) {
        ctx_data_address0 = grp_sha256_transform_fu_575_data_address0.read();
    } else {
        ctx_data_address0 = "XXXXXX";
    }
}

void sha256_final::thread_ctx_data_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctx_data_address1 =  (sc_lv<6>) (ap_const_lv64_39);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_data_address1 =  (sc_lv<6>) (ap_const_lv64_3B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_address1 =  (sc_lv<6>) (ap_const_lv64_3D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctx_data_address1 =  (sc_lv<6>) (ap_const_lv64_3E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read())))) {
        ctx_data_address1 = grp_sha256_transform_fu_575_data_address1.read();
    } else {
        ctx_data_address1 = "XXXXXX";
    }
}

void sha256_final::thread_ctx_data_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln83_fu_698_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ctx_data_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read())))) {
        ctx_data_ce0 = grp_sha256_transform_fu_575_data_ce0.read();
    } else {
        ctx_data_ce0 = ap_const_logic_0;
    }
}

void sha256_final::thread_ctx_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ctx_data_ce1 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read())))) {
        ctx_data_ce1 = grp_sha256_transform_fu_575_data_ce1.read();
    } else {
        ctx_data_ce1 = ap_const_logic_0;
    }
}

void sha256_final::thread_ctx_data_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctx_data_d0 = trunc_ln7_reg_1343.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_data_d0 = trunc_ln5_reg_1333.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_d0 = trunc_ln3_reg_1323.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctx_data_d0 = add_ln90_reg_1308.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln83_fu_698_p2.read())))) {
        ctx_data_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ctx_data_d0 = ap_const_lv8_80;
    } else {
        ctx_data_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_final::thread_ctx_data_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctx_data_d1 = trunc_ln6_reg_1338.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_data_d1 = trunc_ln4_reg_1328.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_data_d1 = trunc_ln2_reg_1318.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctx_data_d1 = trunc_ln1_reg_1313.read();
    } else {
        ctx_data_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_final::thread_ctx_data_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln83_fu_698_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln78_fu_907_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ctx_data_we0 = ap_const_logic_1;
    } else {
        ctx_data_we0 = ap_const_logic_0;
    }
}

void sha256_final::thread_ctx_data_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ctx_data_we1 = ap_const_logic_1;
    } else {
        ctx_data_we1 = ap_const_logic_0;
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ap_start() {
    grp_sha256_transform_fu_575_ap_start = grp_sha256_transform_fu_575_ap_start_reg.read();
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_0_read = ctx_state_0_0_reg_483.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_0_read = p_read2.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_0_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_1_read = ctx_state_1_0_reg_493.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_1_read = p_read3.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_1_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_2_read = ctx_state_2_0_reg_503.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_2_read = p_read4.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_2_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_3_read = ctx_state_3_0_reg_513.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_3_read = p_read5.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_3_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_4_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_4_read = ctx_state_4_0_reg_523.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_4_read = p_read6.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_4_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_5_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_5_read = ctx_state_5_0_reg_533.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_5_read = p_read7.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_5_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_6_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_6_read = ctx_state_6_0_reg_543.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_6_read = p_read8.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_6_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_grp_sha256_transform_fu_575_ctx_state_7_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_sha256_transform_fu_575_ctx_state_7_read = ctx_state_7_0_reg_553.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_reg_1296.read()))) {
        grp_sha256_transform_fu_575_ctx_state_7_read = p_read9.read();
    } else {
        grp_sha256_transform_fu_575_ctx_state_7_read =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_hash_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0)))) {
        hash_blk_n_AW = m_axi_hash_AWREADY.read();
    } else {
        hash_blk_n_AW = ap_const_logic_1;
    }
}

void sha256_final::thread_hash_blk_n_B() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0)))) {
        hash_blk_n_B = m_axi_hash_BVALID.read();
    } else {
        hash_blk_n_B = ap_const_logic_1;
    }
}

void sha256_final::thread_hash_blk_n_W() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0)))) {
        hash_blk_n_W = m_axi_hash_WREADY.read();
    } else {
        hash_blk_n_W = ap_const_logic_1;
    }
}

void sha256_final::thread_i_4_fu_682_p2() {
    i_4_fu_682_p2 = (!i_1_in_reg_465.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_1_in_reg_465.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_final::thread_i_5_fu_927_p2() {
    i_5_fu_927_p2 = (!ap_phi_mux_i_2_phi_fu_567_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ap_phi_mux_i_2_phi_fu_567_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void sha256_final::thread_i_fu_901_p2() {
    i_fu_901_p2 = (!i_0_in_reg_474.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_in_reg_474.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_final::thread_icmp_ln101_fu_921_p2() {
    icmp_ln101_fu_921_p2 = (!ap_phi_mux_i_2_phi_fu_567_p4.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_2_phi_fu_567_p4.read() == ap_const_lv3_4);
}

void sha256_final::thread_icmp_ln76_fu_671_p2() {
    icmp_ln76_fu_671_p2 = (!ctx_datalen_read.read().is_01() || !ap_const_lv32_38.is_01())? sc_lv<1>(): (sc_biguint<32>(ctx_datalen_read.read()) < sc_biguint<32>(ap_const_lv32_38));
}

void sha256_final::thread_icmp_ln78_fu_907_p2() {
    icmp_ln78_fu_907_p2 = (!i_0_in_reg_474.read().is_01() || !ap_const_lv32_37.is_01())? sc_lv<1>(): sc_lv<1>(i_0_in_reg_474.read() == ap_const_lv32_37);
}

void sha256_final::thread_icmp_ln83_fu_698_p2() {
    icmp_ln83_fu_698_p2 = (!tmp_1_fu_688_p4.read().is_01() || !ap_const_lv26_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_688_p4.read() == ap_const_lv26_0);
}

void sha256_final::thread_lshr_ln103_fu_955_p2() {
    lshr_ln103_fu_955_p2 = (!zext_ln103_fu_951_p1.read().is_01())? sc_lv<32>(): reg_631.read() >> (unsigned short)zext_ln103_fu_951_p1.read().to_uint();
}

void sha256_final::thread_lshr_ln104_fu_984_p2() {
    lshr_ln104_fu_984_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_636.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_lshr_ln105_fu_1018_p2() {
    lshr_ln105_fu_1018_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_641.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_lshr_ln106_fu_1054_p2() {
    lshr_ln106_fu_1054_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_646.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_lshr_ln107_fu_1085_p2() {
    lshr_ln107_fu_1085_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_651.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_lshr_ln108_fu_1125_p2() {
    lshr_ln108_fu_1125_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_656.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_lshr_ln109_fu_1203_p2() {
    lshr_ln109_fu_1203_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_661.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_lshr_ln110_fu_1212_p2() {
    lshr_ln110_fu_1212_p2 = (!zext_ln103_reg_1377.read().is_01())? sc_lv<32>(): reg_666.read() >> (unsigned short)zext_ln103_reg_1377.read().to_uint();
}

void sha256_final::thread_m_axi_hash_ARADDR() {
    m_axi_hash_ARADDR = ap_const_lv32_0;
}

void sha256_final::thread_m_axi_hash_ARBURST() {
    m_axi_hash_ARBURST = ap_const_lv2_0;
}

void sha256_final::thread_m_axi_hash_ARCACHE() {
    m_axi_hash_ARCACHE = ap_const_lv4_0;
}

void sha256_final::thread_m_axi_hash_ARID() {
    m_axi_hash_ARID = ap_const_lv1_0;
}

void sha256_final::thread_m_axi_hash_ARLEN() {
    m_axi_hash_ARLEN = ap_const_lv32_0;
}

void sha256_final::thread_m_axi_hash_ARLOCK() {
    m_axi_hash_ARLOCK = ap_const_lv2_0;
}

void sha256_final::thread_m_axi_hash_ARPROT() {
    m_axi_hash_ARPROT = ap_const_lv3_0;
}

void sha256_final::thread_m_axi_hash_ARQOS() {
    m_axi_hash_ARQOS = ap_const_lv4_0;
}

void sha256_final::thread_m_axi_hash_ARREGION() {
    m_axi_hash_ARREGION = ap_const_lv4_0;
}

void sha256_final::thread_m_axi_hash_ARSIZE() {
    m_axi_hash_ARSIZE = ap_const_lv3_0;
}

void sha256_final::thread_m_axi_hash_ARUSER() {
    m_axi_hash_ARUSER = ap_const_lv1_0;
}

void sha256_final::thread_m_axi_hash_ARVALID() {
    m_axi_hash_ARVALID = ap_const_logic_0;
}

void sha256_final::thread_m_axi_hash_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read())) {
        if (esl_seteq<1,1,1>(ap_condition_582.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_7_reg_1471.read();
        } else if (esl_seteq<1,1,1>(ap_condition_658.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_6_reg_1465.read();
        } else if (esl_seteq<1,1,1>(ap_condition_708.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_5_reg_1459.read();
        } else if (esl_seteq<1,1,1>(ap_condition_695.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_4_reg_1448.read();
        } else if (esl_seteq<1,1,1>(ap_condition_682.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_3_reg_1437.read();
        } else if (esl_seteq<1,1,1>(ap_condition_669.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_2_reg_1426.read();
        } else if (esl_seteq<1,1,1>(ap_condition_660.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_1_reg_1410.read();
        } else if (esl_seteq<1,1,1>(ap_condition_656.read(), ap_const_boolean_1)) {
            m_axi_hash_AWADDR = hash_addr_reg_1393.read();
        } else {
            m_axi_hash_AWADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        m_axi_hash_AWADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_final::thread_m_axi_hash_AWBURST() {
    m_axi_hash_AWBURST = ap_const_lv2_0;
}

void sha256_final::thread_m_axi_hash_AWCACHE() {
    m_axi_hash_AWCACHE = ap_const_lv4_0;
}

void sha256_final::thread_m_axi_hash_AWID() {
    m_axi_hash_AWID = ap_const_lv1_0;
}

void sha256_final::thread_m_axi_hash_AWLEN() {
    m_axi_hash_AWLEN = ap_const_lv32_1;
}

void sha256_final::thread_m_axi_hash_AWLOCK() {
    m_axi_hash_AWLOCK = ap_const_lv2_0;
}

void sha256_final::thread_m_axi_hash_AWPROT() {
    m_axi_hash_AWPROT = ap_const_lv3_0;
}

void sha256_final::thread_m_axi_hash_AWQOS() {
    m_axi_hash_AWQOS = ap_const_lv4_0;
}

void sha256_final::thread_m_axi_hash_AWREGION() {
    m_axi_hash_AWREGION = ap_const_lv4_0;
}

void sha256_final::thread_m_axi_hash_AWSIZE() {
    m_axi_hash_AWSIZE = ap_const_lv3_0;
}

void sha256_final::thread_m_axi_hash_AWUSER() {
    m_axi_hash_AWUSER = ap_const_lv1_0;
}

void sha256_final::thread_m_axi_hash_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)))) {
        m_axi_hash_AWVALID = ap_const_logic_1;
    } else {
        m_axi_hash_AWVALID = ap_const_logic_0;
    }
}

void sha256_final::thread_m_axi_hash_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)))) {
        m_axi_hash_BREADY = ap_const_logic_1;
    } else {
        m_axi_hash_BREADY = ap_const_logic_0;
    }
}

void sha256_final::thread_m_axi_hash_RREADY() {
    m_axi_hash_RREADY = ap_const_logic_0;
}

void sha256_final::thread_m_axi_hash_WDATA() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln110_reg_1482.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln109_reg_1477.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage7_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln108_reg_1454.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage6_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln107_reg_1443.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage5_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln106_reg_1432.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln105_reg_1416.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln104_reg_1399.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
        m_axi_hash_WDATA = trunc_ln103_1_reg_1388.read();
    } else {
        m_axi_hash_WDATA =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_final::thread_m_axi_hash_WID() {
    m_axi_hash_WID = ap_const_lv1_0;
}

void sha256_final::thread_m_axi_hash_WLAST() {
    m_axi_hash_WLAST = ap_const_logic_0;
}

void sha256_final::thread_m_axi_hash_WSTRB() {
    m_axi_hash_WSTRB = ap_const_lv1_1;
}

void sha256_final::thread_m_axi_hash_WUSER() {
    m_axi_hash_WUSER = ap_const_lv1_0;
}

void sha256_final::thread_m_axi_hash_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_reg_1368.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)))) {
        m_axi_hash_WVALID = ap_const_logic_1;
    } else {
        m_axi_hash_WVALID = ap_const_logic_0;
    }
}

void sha256_final::thread_or_ln3_fu_1094_p3() {
    or_ln3_fu_1094_p3 = esl_concat<2,3>(ap_const_lv2_2, i_2_reg_563.read());
}

void sha256_final::thread_or_ln_fu_1027_p3() {
    or_ln_fu_1027_p3 = esl_concat<1,3>(ap_const_lv1_1, i_2_reg_563.read());
}

void sha256_final::thread_sext_ln101_fu_918_p1() {
    sext_ln101_fu_918_p1 = esl_sext<33,32>(hash_offset.read());
}

void sha256_final::thread_sext_ln103_fu_974_p1() {
    sext_ln103_fu_974_p1 = esl_sext<64,33>(add_ln103_fu_969_p2.read());
}

void sha256_final::thread_sext_ln104_fu_1008_p1() {
    sext_ln104_fu_1008_p1 = esl_sext<64,33>(add_ln104_fu_1003_p2.read());
}

void sha256_final::thread_sext_ln105_fu_1044_p1() {
    sext_ln105_fu_1044_p1 = esl_sext<64,33>(add_ln105_fu_1039_p2.read());
}

void sha256_final::thread_sext_ln106_1_fu_1075_p1() {
    sext_ln106_1_fu_1075_p1 = esl_sext<64,33>(add_ln106_fu_1070_p2.read());
}

void sha256_final::thread_sext_ln106_fu_1063_p1() {
    sext_ln106_fu_1063_p1 = esl_sext<4,3>(xor_ln104_reg_1404.read());
}

void sha256_final::thread_sext_ln107_fu_1111_p1() {
    sext_ln107_fu_1111_p1 = esl_sext<64,33>(add_ln107_fu_1106_p2.read());
}

void sha256_final::thread_sext_ln108_fu_1149_p1() {
    sext_ln108_fu_1149_p1 = esl_sext<64,33>(add_ln108_1_fu_1144_p2.read());
}

void sha256_final::thread_sext_ln109_1_fu_1171_p1() {
    sext_ln109_1_fu_1171_p1 = esl_sext<64,33>(add_ln109_fu_1166_p2.read());
}

void sha256_final::thread_sext_ln109_fu_1159_p1() {
    sext_ln109_fu_1159_p1 = esl_sext<5,4>(or_ln_reg_1421.read());
}

void sha256_final::thread_sext_ln110_1_fu_1193_p1() {
    sext_ln110_1_fu_1193_p1 = esl_sext<64,33>(add_ln110_fu_1188_p2.read());
}

void sha256_final::thread_sext_ln110_fu_1181_p1() {
    sext_ln110_fu_1181_p1 = esl_sext<5,3>(xor_ln104_reg_1404.read());
}

void sha256_final::thread_shl_ln1_fu_937_p3() {
    shl_ln1_fu_937_p3 = esl_concat<2,3>(trunc_ln103_fu_933_p1.read(), ap_const_lv3_0);
}

void sha256_final::thread_shl_ln89_fu_709_p2() {
    shl_ln89_fu_709_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): ctx_datalen_read.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void sha256_final::thread_sub_ln103_fu_945_p2() {
    sub_ln103_fu_945_p2 = (!ap_const_lv5_18.is_01() || !shl_ln1_fu_937_p3.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_18) - sc_biguint<5>(shl_ln1_fu_937_p3.read()));
}

void sha256_final::thread_tmp_1_fu_688_p4() {
    tmp_1_fu_688_p4 = i_4_fu_682_p2.read().range(31, 6);
}

void sha256_final::thread_trunc_ln103_1_fu_961_p1() {
    trunc_ln103_1_fu_961_p1 = lshr_ln103_fu_955_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln103_fu_933_p1() {
    trunc_ln103_fu_933_p1 = ap_phi_mux_i_2_phi_fu_567_p4.read().range(2-1, 0);
}

void sha256_final::thread_trunc_ln104_fu_989_p1() {
    trunc_ln104_fu_989_p1 = lshr_ln104_fu_984_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln105_fu_1023_p1() {
    trunc_ln105_fu_1023_p1 = lshr_ln105_fu_1018_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln106_fu_1059_p1() {
    trunc_ln106_fu_1059_p1 = lshr_ln106_fu_1054_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln107_fu_1090_p1() {
    trunc_ln107_fu_1090_p1 = lshr_ln107_fu_1085_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln108_fu_1130_p1() {
    trunc_ln108_fu_1130_p1 = lshr_ln108_fu_1125_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln109_fu_1208_p1() {
    trunc_ln109_fu_1208_p1 = lshr_ln109_fu_1203_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln110_fu_1217_p1() {
    trunc_ln110_fu_1217_p1 = lshr_ln110_fu_1212_p2.read().range(8-1, 0);
}

void sha256_final::thread_trunc_ln89_10_fu_763_p1() {
    trunc_ln89_10_fu_763_p1 = ctx_bitlen_read.read().range(40-1, 0);
}

void sha256_final::thread_trunc_ln89_11_fu_770_p1() {
    trunc_ln89_11_fu_770_p1 = ctx_bitlen_read.read().range(48-1, 0);
}

void sha256_final::thread_trunc_ln89_12_fu_777_p1() {
    trunc_ln89_12_fu_777_p1 = ctx_bitlen_read.read().range(56-1, 0);
}

void sha256_final::thread_trunc_ln89_1_fu_724_p3() {
    trunc_ln89_1_fu_724_p3 = esl_concat<5,3>(trunc_ln89_2_fu_721_p1.read(), ap_const_lv3_0);
}

void sha256_final::thread_trunc_ln89_2_fu_721_p1() {
    trunc_ln89_2_fu_721_p1 = ctx_datalen_read.read().range(5-1, 0);
}

void sha256_final::thread_trunc_ln89_3_fu_738_p3() {
    trunc_ln89_3_fu_738_p3 = esl_concat<13,3>(trunc_ln89_6_fu_735_p1.read(), ap_const_lv3_0);
}

void sha256_final::thread_trunc_ln89_4_fu_732_p1() {
    trunc_ln89_4_fu_732_p1 = ctx_bitlen_read.read().range(16-1, 0);
}

void sha256_final::thread_trunc_ln89_5_fu_752_p3() {
    trunc_ln89_5_fu_752_p3 = esl_concat<21,3>(trunc_ln89_8_fu_749_p1.read(), ap_const_lv3_0);
}

void sha256_final::thread_trunc_ln89_6_fu_735_p1() {
    trunc_ln89_6_fu_735_p1 = ctx_datalen_read.read().range(13-1, 0);
}

void sha256_final::thread_trunc_ln89_7_fu_746_p1() {
    trunc_ln89_7_fu_746_p1 = ctx_bitlen_read.read().range(24-1, 0);
}

void sha256_final::thread_trunc_ln89_8_fu_749_p1() {
    trunc_ln89_8_fu_749_p1 = ctx_datalen_read.read().range(21-1, 0);
}

void sha256_final::thread_trunc_ln89_9_fu_760_p1() {
    trunc_ln89_9_fu_760_p1 = ctx_bitlen_read.read().range(32-1, 0);
}

void sha256_final::thread_trunc_ln89_fu_718_p1() {
    trunc_ln89_fu_718_p1 = ctx_bitlen_read.read().range(8-1, 0);
}

void sha256_final::thread_xor_ln104_fu_993_p2() {
    xor_ln104_fu_993_p2 = (i_2_reg_563.read() ^ ap_const_lv3_4);
}

void sha256_final::thread_zext_ln101_fu_1121_p1() {
    zext_ln101_fu_1121_p1 = esl_zext<5,3>(i_2_reg_563.read());
}

void sha256_final::thread_zext_ln103_1_fu_965_p1() {
    zext_ln103_1_fu_965_p1 = esl_zext<33,3>(ap_phi_mux_i_2_phi_fu_567_p4.read());
}

void sha256_final::thread_zext_ln103_fu_951_p1() {
    zext_ln103_fu_951_p1 = esl_zext<32,5>(sub_ln103_fu_945_p2.read());
}

void sha256_final::thread_zext_ln104_fu_999_p1() {
    zext_ln104_fu_999_p1 = esl_zext<33,3>(xor_ln104_fu_993_p2.read());
}

void sha256_final::thread_zext_ln105_fu_1035_p1() {
    zext_ln105_fu_1035_p1 = esl_zext<33,4>(or_ln_fu_1027_p3.read());
}

void sha256_final::thread_zext_ln106_fu_1066_p1() {
    zext_ln106_fu_1066_p1 = esl_zext<33,4>(sext_ln106_fu_1063_p1.read());
}

void sha256_final::thread_zext_ln107_fu_1102_p1() {
    zext_ln107_fu_1102_p1 = esl_zext<33,5>(or_ln3_fu_1094_p3.read());
}

void sha256_final::thread_zext_ln108_fu_1140_p1() {
    zext_ln108_fu_1140_p1 = esl_zext<33,5>(add_ln108_fu_1134_p2.read());
}

void sha256_final::thread_zext_ln109_fu_1162_p1() {
    zext_ln109_fu_1162_p1 = esl_zext<33,5>(sext_ln109_fu_1159_p1.read());
}

void sha256_final::thread_zext_ln110_fu_1184_p1() {
    zext_ln110_fu_1184_p1 = esl_zext<33,5>(sext_ln110_fu_1181_p1.read());
}

void sha256_final::thread_zext_ln77_fu_677_p1() {
    zext_ln77_fu_677_p1 = esl_zext<64,32>(ctx_datalen_read.read());
}

void sha256_final::thread_zext_ln79_fu_913_p1() {
    zext_ln79_fu_913_p1 = esl_zext<64,32>(i_fu_901_p2.read());
}

void sha256_final::thread_zext_ln84_fu_704_p1() {
    zext_ln84_fu_704_p1 = esl_zext<64,32>(i_4_fu_682_p2.read());
}

void sha256_final::thread_zext_ln89_1_fu_766_p1() {
    zext_ln89_1_fu_766_p1 = esl_zext<40,32>(shl_ln89_fu_709_p2.read());
}

void sha256_final::thread_zext_ln89_2_fu_773_p1() {
    zext_ln89_2_fu_773_p1 = esl_zext<48,32>(shl_ln89_fu_709_p2.read());
}

void sha256_final::thread_zext_ln89_3_fu_780_p1() {
    zext_ln89_3_fu_780_p1 = esl_zext<56,32>(shl_ln89_fu_709_p2.read());
}

void sha256_final::thread_zext_ln89_fu_714_p1() {
    zext_ln89_fu_714_p1 = esl_zext<64,32>(shl_ln89_fu_709_p2.read());
}

void sha256_final::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln76_fu_671_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln76_fu_671_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln83_fu_698_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln78_fu_907_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_sha256_transform_fu_575_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln101_fu_921_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln101_fu_921_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2048 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4096 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8192 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 16384 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 32768 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 131072 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

