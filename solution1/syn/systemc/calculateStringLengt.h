// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _calculateStringLengt_HH_
#define _calculateStringLengt_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct calculateStringLengt : public sc_module {
    // Port declarations 53
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_str_AWVALID;
    sc_in< sc_logic > m_axi_str_AWREADY;
    sc_out< sc_lv<32> > m_axi_str_AWADDR;
    sc_out< sc_lv<1> > m_axi_str_AWID;
    sc_out< sc_lv<32> > m_axi_str_AWLEN;
    sc_out< sc_lv<3> > m_axi_str_AWSIZE;
    sc_out< sc_lv<2> > m_axi_str_AWBURST;
    sc_out< sc_lv<2> > m_axi_str_AWLOCK;
    sc_out< sc_lv<4> > m_axi_str_AWCACHE;
    sc_out< sc_lv<3> > m_axi_str_AWPROT;
    sc_out< sc_lv<4> > m_axi_str_AWQOS;
    sc_out< sc_lv<4> > m_axi_str_AWREGION;
    sc_out< sc_lv<1> > m_axi_str_AWUSER;
    sc_out< sc_logic > m_axi_str_WVALID;
    sc_in< sc_logic > m_axi_str_WREADY;
    sc_out< sc_lv<8> > m_axi_str_WDATA;
    sc_out< sc_lv<1> > m_axi_str_WSTRB;
    sc_out< sc_logic > m_axi_str_WLAST;
    sc_out< sc_lv<1> > m_axi_str_WID;
    sc_out< sc_lv<1> > m_axi_str_WUSER;
    sc_out< sc_logic > m_axi_str_ARVALID;
    sc_in< sc_logic > m_axi_str_ARREADY;
    sc_out< sc_lv<32> > m_axi_str_ARADDR;
    sc_out< sc_lv<1> > m_axi_str_ARID;
    sc_out< sc_lv<32> > m_axi_str_ARLEN;
    sc_out< sc_lv<3> > m_axi_str_ARSIZE;
    sc_out< sc_lv<2> > m_axi_str_ARBURST;
    sc_out< sc_lv<2> > m_axi_str_ARLOCK;
    sc_out< sc_lv<4> > m_axi_str_ARCACHE;
    sc_out< sc_lv<3> > m_axi_str_ARPROT;
    sc_out< sc_lv<4> > m_axi_str_ARQOS;
    sc_out< sc_lv<4> > m_axi_str_ARREGION;
    sc_out< sc_lv<1> > m_axi_str_ARUSER;
    sc_in< sc_logic > m_axi_str_RVALID;
    sc_out< sc_logic > m_axi_str_RREADY;
    sc_in< sc_lv<8> > m_axi_str_RDATA;
    sc_in< sc_logic > m_axi_str_RLAST;
    sc_in< sc_lv<1> > m_axi_str_RID;
    sc_in< sc_lv<1> > m_axi_str_RUSER;
    sc_in< sc_lv<2> > m_axi_str_RRESP;
    sc_in< sc_logic > m_axi_str_BVALID;
    sc_out< sc_logic > m_axi_str_BREADY;
    sc_in< sc_lv<2> > m_axi_str_BRESP;
    sc_in< sc_lv<1> > m_axi_str_BID;
    sc_in< sc_lv<1> > m_axi_str_BUSER;
    sc_in< sc_lv<32> > str_offset;
    sc_out< sc_lv<64> > ap_return;


    // Module declarations
    calculateStringLengt(sc_module_name name);
    SC_HAS_PROCESS(calculateStringLengt);

    ~calculateStringLengt();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > str_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > str_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<64> > sext_ln115_fu_64_p1;
    sc_signal< sc_lv<64> > sext_ln115_reg_90;
    sc_signal< sc_lv<32> > str_addr_reg_95;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > str_addr_read_reg_101;
    sc_signal< sc_lv<64> > length_fu_84_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<64> > length_0_reg_52;
    sc_signal< sc_lv<1> > icmp_ln115_fu_79_p2;
    sc_signal< sc_lv<64> > add_ln115_fu_68_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln115_fu_68_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln115_fu_79_p2();
    void thread_length_fu_84_p2();
    void thread_m_axi_str_ARADDR();
    void thread_m_axi_str_ARBURST();
    void thread_m_axi_str_ARCACHE();
    void thread_m_axi_str_ARID();
    void thread_m_axi_str_ARLEN();
    void thread_m_axi_str_ARLOCK();
    void thread_m_axi_str_ARPROT();
    void thread_m_axi_str_ARQOS();
    void thread_m_axi_str_ARREGION();
    void thread_m_axi_str_ARSIZE();
    void thread_m_axi_str_ARUSER();
    void thread_m_axi_str_ARVALID();
    void thread_m_axi_str_AWADDR();
    void thread_m_axi_str_AWBURST();
    void thread_m_axi_str_AWCACHE();
    void thread_m_axi_str_AWID();
    void thread_m_axi_str_AWLEN();
    void thread_m_axi_str_AWLOCK();
    void thread_m_axi_str_AWPROT();
    void thread_m_axi_str_AWQOS();
    void thread_m_axi_str_AWREGION();
    void thread_m_axi_str_AWSIZE();
    void thread_m_axi_str_AWUSER();
    void thread_m_axi_str_AWVALID();
    void thread_m_axi_str_BREADY();
    void thread_m_axi_str_RREADY();
    void thread_m_axi_str_WDATA();
    void thread_m_axi_str_WID();
    void thread_m_axi_str_WLAST();
    void thread_m_axi_str_WSTRB();
    void thread_m_axi_str_WUSER();
    void thread_m_axi_str_WVALID();
    void thread_sext_ln115_fu_64_p1();
    void thread_str_blk_n_AR();
    void thread_str_blk_n_R();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
