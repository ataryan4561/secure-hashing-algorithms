// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "calculateStringLengt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic calculateStringLengt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic calculateStringLengt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state1 = "1";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state2 = "10";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state3 = "100";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state4 = "1000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state5 = "10000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state6 = "100000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> calculateStringLengt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> calculateStringLengt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> calculateStringLengt::ap_const_lv1_0 = "0";
const sc_lv<3> calculateStringLengt::ap_const_lv3_0 = "000";
const sc_lv<2> calculateStringLengt::ap_const_lv2_0 = "00";
const sc_lv<4> calculateStringLengt::ap_const_lv4_0 = "0000";
const sc_lv<8> calculateStringLengt::ap_const_lv8_0 = "00000000";
const sc_lv<32> calculateStringLengt::ap_const_lv32_2 = "10";
const sc_lv<32> calculateStringLengt::ap_const_lv32_9 = "1001";
const sc_lv<32> calculateStringLengt::ap_const_lv32_1 = "1";
const sc_lv<32> calculateStringLengt::ap_const_lv32_A = "1010";
const sc_lv<64> calculateStringLengt::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> calculateStringLengt::ap_const_lv64_1 = "1";
const sc_lv<1> calculateStringLengt::ap_const_lv1_1 = "1";
const bool calculateStringLengt::ap_const_boolean_1 = true;

calculateStringLengt::calculateStringLengt(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln115_fu_68_p2);
    sensitive << ( sext_ln115_reg_90 );
    sensitive << ( length_0_reg_52 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln115_fu_79_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln115_fu_79_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( length_0_reg_52 );
    sensitive << ( icmp_ln115_fu_79_p2 );

    SC_METHOD(thread_icmp_ln115_fu_79_p2);
    sensitive << ( str_addr_read_reg_101 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_length_fu_84_p2);
    sensitive << ( length_0_reg_52 );

    SC_METHOD(thread_m_axi_str_ARADDR);
    sensitive << ( m_axi_str_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( str_addr_reg_95 );

    SC_METHOD(thread_m_axi_str_ARBURST);

    SC_METHOD(thread_m_axi_str_ARCACHE);

    SC_METHOD(thread_m_axi_str_ARID);

    SC_METHOD(thread_m_axi_str_ARLEN);
    sensitive << ( m_axi_str_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_axi_str_ARLOCK);

    SC_METHOD(thread_m_axi_str_ARPROT);

    SC_METHOD(thread_m_axi_str_ARQOS);

    SC_METHOD(thread_m_axi_str_ARREGION);

    SC_METHOD(thread_m_axi_str_ARSIZE);

    SC_METHOD(thread_m_axi_str_ARUSER);

    SC_METHOD(thread_m_axi_str_ARVALID);
    sensitive << ( m_axi_str_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_axi_str_AWADDR);

    SC_METHOD(thread_m_axi_str_AWBURST);

    SC_METHOD(thread_m_axi_str_AWCACHE);

    SC_METHOD(thread_m_axi_str_AWID);

    SC_METHOD(thread_m_axi_str_AWLEN);

    SC_METHOD(thread_m_axi_str_AWLOCK);

    SC_METHOD(thread_m_axi_str_AWPROT);

    SC_METHOD(thread_m_axi_str_AWQOS);

    SC_METHOD(thread_m_axi_str_AWREGION);

    SC_METHOD(thread_m_axi_str_AWSIZE);

    SC_METHOD(thread_m_axi_str_AWUSER);

    SC_METHOD(thread_m_axi_str_AWVALID);

    SC_METHOD(thread_m_axi_str_BREADY);

    SC_METHOD(thread_m_axi_str_RREADY);
    sensitive << ( m_axi_str_RVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_m_axi_str_WDATA);

    SC_METHOD(thread_m_axi_str_WID);

    SC_METHOD(thread_m_axi_str_WLAST);

    SC_METHOD(thread_m_axi_str_WSTRB);

    SC_METHOD(thread_m_axi_str_WUSER);

    SC_METHOD(thread_m_axi_str_WVALID);

    SC_METHOD(thread_sext_ln115_fu_64_p1);
    sensitive << ( str_offset );

    SC_METHOD(thread_str_blk_n_AR);
    sensitive << ( m_axi_str_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_str_blk_n_R);
    sensitive << ( m_axi_str_RVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_str_ARREADY );
    sensitive << ( m_axi_str_RVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln115_fu_79_p2 );

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "calculateStringLengt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_str_AWVALID, "(port)m_axi_str_AWVALID");
    sc_trace(mVcdFile, m_axi_str_AWREADY, "(port)m_axi_str_AWREADY");
    sc_trace(mVcdFile, m_axi_str_AWADDR, "(port)m_axi_str_AWADDR");
    sc_trace(mVcdFile, m_axi_str_AWID, "(port)m_axi_str_AWID");
    sc_trace(mVcdFile, m_axi_str_AWLEN, "(port)m_axi_str_AWLEN");
    sc_trace(mVcdFile, m_axi_str_AWSIZE, "(port)m_axi_str_AWSIZE");
    sc_trace(mVcdFile, m_axi_str_AWBURST, "(port)m_axi_str_AWBURST");
    sc_trace(mVcdFile, m_axi_str_AWLOCK, "(port)m_axi_str_AWLOCK");
    sc_trace(mVcdFile, m_axi_str_AWCACHE, "(port)m_axi_str_AWCACHE");
    sc_trace(mVcdFile, m_axi_str_AWPROT, "(port)m_axi_str_AWPROT");
    sc_trace(mVcdFile, m_axi_str_AWQOS, "(port)m_axi_str_AWQOS");
    sc_trace(mVcdFile, m_axi_str_AWREGION, "(port)m_axi_str_AWREGION");
    sc_trace(mVcdFile, m_axi_str_AWUSER, "(port)m_axi_str_AWUSER");
    sc_trace(mVcdFile, m_axi_str_WVALID, "(port)m_axi_str_WVALID");
    sc_trace(mVcdFile, m_axi_str_WREADY, "(port)m_axi_str_WREADY");
    sc_trace(mVcdFile, m_axi_str_WDATA, "(port)m_axi_str_WDATA");
    sc_trace(mVcdFile, m_axi_str_WSTRB, "(port)m_axi_str_WSTRB");
    sc_trace(mVcdFile, m_axi_str_WLAST, "(port)m_axi_str_WLAST");
    sc_trace(mVcdFile, m_axi_str_WID, "(port)m_axi_str_WID");
    sc_trace(mVcdFile, m_axi_str_WUSER, "(port)m_axi_str_WUSER");
    sc_trace(mVcdFile, m_axi_str_ARVALID, "(port)m_axi_str_ARVALID");
    sc_trace(mVcdFile, m_axi_str_ARREADY, "(port)m_axi_str_ARREADY");
    sc_trace(mVcdFile, m_axi_str_ARADDR, "(port)m_axi_str_ARADDR");
    sc_trace(mVcdFile, m_axi_str_ARID, "(port)m_axi_str_ARID");
    sc_trace(mVcdFile, m_axi_str_ARLEN, "(port)m_axi_str_ARLEN");
    sc_trace(mVcdFile, m_axi_str_ARSIZE, "(port)m_axi_str_ARSIZE");
    sc_trace(mVcdFile, m_axi_str_ARBURST, "(port)m_axi_str_ARBURST");
    sc_trace(mVcdFile, m_axi_str_ARLOCK, "(port)m_axi_str_ARLOCK");
    sc_trace(mVcdFile, m_axi_str_ARCACHE, "(port)m_axi_str_ARCACHE");
    sc_trace(mVcdFile, m_axi_str_ARPROT, "(port)m_axi_str_ARPROT");
    sc_trace(mVcdFile, m_axi_str_ARQOS, "(port)m_axi_str_ARQOS");
    sc_trace(mVcdFile, m_axi_str_ARREGION, "(port)m_axi_str_ARREGION");
    sc_trace(mVcdFile, m_axi_str_ARUSER, "(port)m_axi_str_ARUSER");
    sc_trace(mVcdFile, m_axi_str_RVALID, "(port)m_axi_str_RVALID");
    sc_trace(mVcdFile, m_axi_str_RREADY, "(port)m_axi_str_RREADY");
    sc_trace(mVcdFile, m_axi_str_RDATA, "(port)m_axi_str_RDATA");
    sc_trace(mVcdFile, m_axi_str_RLAST, "(port)m_axi_str_RLAST");
    sc_trace(mVcdFile, m_axi_str_RID, "(port)m_axi_str_RID");
    sc_trace(mVcdFile, m_axi_str_RUSER, "(port)m_axi_str_RUSER");
    sc_trace(mVcdFile, m_axi_str_RRESP, "(port)m_axi_str_RRESP");
    sc_trace(mVcdFile, m_axi_str_BVALID, "(port)m_axi_str_BVALID");
    sc_trace(mVcdFile, m_axi_str_BREADY, "(port)m_axi_str_BREADY");
    sc_trace(mVcdFile, m_axi_str_BRESP, "(port)m_axi_str_BRESP");
    sc_trace(mVcdFile, m_axi_str_BID, "(port)m_axi_str_BID");
    sc_trace(mVcdFile, m_axi_str_BUSER, "(port)m_axi_str_BUSER");
    sc_trace(mVcdFile, str_offset, "(port)str_offset");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, str_blk_n_AR, "str_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, str_blk_n_R, "str_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, sext_ln115_fu_64_p1, "sext_ln115_fu_64_p1");
    sc_trace(mVcdFile, sext_ln115_reg_90, "sext_ln115_reg_90");
    sc_trace(mVcdFile, str_addr_reg_95, "str_addr_reg_95");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, str_addr_read_reg_101, "str_addr_read_reg_101");
    sc_trace(mVcdFile, length_fu_84_p2, "length_fu_84_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, length_0_reg_52, "length_0_reg_52");
    sc_trace(mVcdFile, icmp_ln115_fu_79_p2, "icmp_ln115_fu_79_p2");
    sc_trace(mVcdFile, add_ln115_fu_68_p2, "add_ln115_fu_68_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

calculateStringLengt::~calculateStringLengt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void calculateStringLengt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln115_fu_79_p2.read()))) {
        length_0_reg_52 = length_fu_84_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        length_0_reg_52 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sext_ln115_reg_90 = sext_ln115_fu_64_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_str_RVALID.read(), ap_const_logic_1))) {
        str_addr_read_reg_101 = m_axi_str_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        str_addr_reg_95 =  (sc_lv<32>) (add_ln115_fu_68_p2.read());
    }
}

void calculateStringLengt::thread_add_ln115_fu_68_p2() {
    add_ln115_fu_68_p2 = (!length_0_reg_52.read().is_01() || !sext_ln115_reg_90.read().is_01())? sc_lv<64>(): (sc_biguint<64>(length_0_reg_52.read()) + sc_bigint<64>(sext_ln115_reg_90.read()));
}

void calculateStringLengt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void calculateStringLengt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void calculateStringLengt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void calculateStringLengt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void calculateStringLengt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void calculateStringLengt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(icmp_ln115_fu_79_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void calculateStringLengt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void calculateStringLengt::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln115_fu_79_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void calculateStringLengt::thread_ap_return() {
    ap_return = length_0_reg_52.read();
}

void calculateStringLengt::thread_icmp_ln115_fu_79_p2() {
    icmp_ln115_fu_79_p2 = (!str_addr_read_reg_101.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(str_addr_read_reg_101.read() == ap_const_lv8_0);
}

void calculateStringLengt::thread_length_fu_84_p2() {
    length_fu_84_p2 = (!length_0_reg_52.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(length_0_reg_52.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void calculateStringLengt::thread_m_axi_str_ARADDR() {
    m_axi_str_ARADDR = str_addr_reg_95.read();
}

void calculateStringLengt::thread_m_axi_str_ARBURST() {
    m_axi_str_ARBURST = ap_const_lv2_0;
}

void calculateStringLengt::thread_m_axi_str_ARCACHE() {
    m_axi_str_ARCACHE = ap_const_lv4_0;
}

void calculateStringLengt::thread_m_axi_str_ARID() {
    m_axi_str_ARID = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_ARLEN() {
    m_axi_str_ARLEN = ap_const_lv32_1;
}

void calculateStringLengt::thread_m_axi_str_ARLOCK() {
    m_axi_str_ARLOCK = ap_const_lv2_0;
}

void calculateStringLengt::thread_m_axi_str_ARPROT() {
    m_axi_str_ARPROT = ap_const_lv3_0;
}

void calculateStringLengt::thread_m_axi_str_ARQOS() {
    m_axi_str_ARQOS = ap_const_lv4_0;
}

void calculateStringLengt::thread_m_axi_str_ARREGION() {
    m_axi_str_ARREGION = ap_const_lv4_0;
}

void calculateStringLengt::thread_m_axi_str_ARSIZE() {
    m_axi_str_ARSIZE = ap_const_lv3_0;
}

void calculateStringLengt::thread_m_axi_str_ARUSER() {
    m_axi_str_ARUSER = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(m_axi_str_ARREADY.read(), ap_const_logic_1))) {
        m_axi_str_ARVALID = ap_const_logic_1;
    } else {
        m_axi_str_ARVALID = ap_const_logic_0;
    }
}

void calculateStringLengt::thread_m_axi_str_AWADDR() {
    m_axi_str_AWADDR = ap_const_lv32_0;
}

void calculateStringLengt::thread_m_axi_str_AWBURST() {
    m_axi_str_AWBURST = ap_const_lv2_0;
}

void calculateStringLengt::thread_m_axi_str_AWCACHE() {
    m_axi_str_AWCACHE = ap_const_lv4_0;
}

void calculateStringLengt::thread_m_axi_str_AWID() {
    m_axi_str_AWID = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_AWLEN() {
    m_axi_str_AWLEN = ap_const_lv32_0;
}

void calculateStringLengt::thread_m_axi_str_AWLOCK() {
    m_axi_str_AWLOCK = ap_const_lv2_0;
}

void calculateStringLengt::thread_m_axi_str_AWPROT() {
    m_axi_str_AWPROT = ap_const_lv3_0;
}

void calculateStringLengt::thread_m_axi_str_AWQOS() {
    m_axi_str_AWQOS = ap_const_lv4_0;
}

void calculateStringLengt::thread_m_axi_str_AWREGION() {
    m_axi_str_AWREGION = ap_const_lv4_0;
}

void calculateStringLengt::thread_m_axi_str_AWSIZE() {
    m_axi_str_AWSIZE = ap_const_lv3_0;
}

void calculateStringLengt::thread_m_axi_str_AWUSER() {
    m_axi_str_AWUSER = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_AWVALID() {
    m_axi_str_AWVALID = ap_const_logic_0;
}

void calculateStringLengt::thread_m_axi_str_BREADY() {
    m_axi_str_BREADY = ap_const_logic_0;
}

void calculateStringLengt::thread_m_axi_str_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(m_axi_str_RVALID.read(), ap_const_logic_1))) {
        m_axi_str_RREADY = ap_const_logic_1;
    } else {
        m_axi_str_RREADY = ap_const_logic_0;
    }
}

void calculateStringLengt::thread_m_axi_str_WDATA() {
    m_axi_str_WDATA = ap_const_lv8_0;
}

void calculateStringLengt::thread_m_axi_str_WID() {
    m_axi_str_WID = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_WLAST() {
    m_axi_str_WLAST = ap_const_logic_0;
}

void calculateStringLengt::thread_m_axi_str_WSTRB() {
    m_axi_str_WSTRB = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_WUSER() {
    m_axi_str_WUSER = ap_const_lv1_0;
}

void calculateStringLengt::thread_m_axi_str_WVALID() {
    m_axi_str_WVALID = ap_const_logic_0;
}

void calculateStringLengt::thread_sext_ln115_fu_64_p1() {
    sext_ln115_fu_64_p1 = esl_sext<64,32>(str_offset.read());
}

void calculateStringLengt::thread_str_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        str_blk_n_AR = m_axi_str_ARREADY.read();
    } else {
        str_blk_n_AR = ap_const_logic_1;
    }
}

void calculateStringLengt::thread_str_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        str_blk_n_R = m_axi_str_RVALID.read();
    } else {
        str_blk_n_R = ap_const_logic_1;
    }
}

void calculateStringLengt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(m_axi_str_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_str_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(icmp_ln115_fu_79_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

}

