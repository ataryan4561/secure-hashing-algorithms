// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_update.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_update::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_update::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> sha256_update::ap_ST_fsm_state1 = "1";
const sc_lv<11> sha256_update::ap_ST_fsm_state2 = "10";
const sc_lv<11> sha256_update::ap_ST_fsm_state3 = "100";
const sc_lv<11> sha256_update::ap_ST_fsm_state4 = "1000";
const sc_lv<11> sha256_update::ap_ST_fsm_state5 = "10000";
const sc_lv<11> sha256_update::ap_ST_fsm_state6 = "100000";
const sc_lv<11> sha256_update::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> sha256_update::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> sha256_update::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> sha256_update::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> sha256_update::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> sha256_update::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sha256_update::ap_const_lv1_0 = "0";
const sc_lv<3> sha256_update::ap_const_lv3_0 = "000";
const sc_lv<2> sha256_update::ap_const_lv2_0 = "00";
const sc_lv<4> sha256_update::ap_const_lv4_0 = "0000";
const sc_lv<8> sha256_update::ap_const_lv8_0 = "00000000";
const sc_lv<32> sha256_update::ap_const_lv32_7 = "111";
const sc_lv<32> sha256_update::ap_const_lv32_8 = "1000";
const sc_lv<32> sha256_update::ap_const_lv32_9 = "1001";
const sc_lv<64> sha256_update::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> sha256_update::ap_const_lv32_6 = "110";
const sc_lv<32> sha256_update::ap_const_lv32_A = "1010";
const sc_lv<1> sha256_update::ap_const_lv1_1 = "1";
const bool sha256_update::ap_const_boolean_0 = false;
const sc_lv<32> sha256_update::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<32> sha256_update::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256_update::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256_update::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256_update::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256_update::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256_update::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256_update::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256_update::ap_const_lv32_1 = "1";
const sc_lv<64> sha256_update::ap_const_lv64_1 = "1";
const sc_lv<32> sha256_update::ap_const_lv32_40 = "1000000";
const sc_lv<64> sha256_update::ap_const_lv64_200 = "1000000000";
const bool sha256_update::ap_const_boolean_1 = true;

sha256_update::sha256_update(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sha256_transform_fu_151 = new sha256_transform("grp_sha256_transform_fu_151");
    grp_sha256_transform_fu_151->ap_clk(ap_clk);
    grp_sha256_transform_fu_151->ap_rst(ap_rst);
    grp_sha256_transform_fu_151->ap_start(grp_sha256_transform_fu_151_ap_start);
    grp_sha256_transform_fu_151->ap_done(grp_sha256_transform_fu_151_ap_done);
    grp_sha256_transform_fu_151->ap_idle(grp_sha256_transform_fu_151_ap_idle);
    grp_sha256_transform_fu_151->ap_ready(grp_sha256_transform_fu_151_ap_ready);
    grp_sha256_transform_fu_151->ctx_state_0_read(ctx_state_0_0_load_1_reg_585);
    grp_sha256_transform_fu_151->ctx_state_1_read(ctx_state_1_0_load_1_reg_580);
    grp_sha256_transform_fu_151->ctx_state_2_read(ctx_state_2_0_load_1_reg_575);
    grp_sha256_transform_fu_151->ctx_state_3_read(ctx_state_3_0_load_1_reg_570);
    grp_sha256_transform_fu_151->ctx_state_4_read(ctx_state_4_0_load_1_reg_565);
    grp_sha256_transform_fu_151->ctx_state_5_read(ctx_state_5_0_load_1_reg_560);
    grp_sha256_transform_fu_151->ctx_state_6_read(ctx_state_6_0_load_1_reg_555);
    grp_sha256_transform_fu_151->ctx_state_7_read(ctx_state_7_0_load_1_reg_550);
    grp_sha256_transform_fu_151->data_address0(grp_sha256_transform_fu_151_data_address0);
    grp_sha256_transform_fu_151->data_ce0(grp_sha256_transform_fu_151_data_ce0);
    grp_sha256_transform_fu_151->data_q0(ctx_data_q0);
    grp_sha256_transform_fu_151->data_address1(grp_sha256_transform_fu_151_data_address1);
    grp_sha256_transform_fu_151->data_ce1(grp_sha256_transform_fu_151_data_ce1);
    grp_sha256_transform_fu_151->data_q1(ctx_data_q1);
    grp_sha256_transform_fu_151->ap_return_0(grp_sha256_transform_fu_151_ap_return_0);
    grp_sha256_transform_fu_151->ap_return_1(grp_sha256_transform_fu_151_ap_return_1);
    grp_sha256_transform_fu_151->ap_return_2(grp_sha256_transform_fu_151_ap_return_2);
    grp_sha256_transform_fu_151->ap_return_3(grp_sha256_transform_fu_151_ap_return_3);
    grp_sha256_transform_fu_151->ap_return_4(grp_sha256_transform_fu_151_ap_return_4);
    grp_sha256_transform_fu_151->ap_return_5(grp_sha256_transform_fu_151_ap_return_5);
    grp_sha256_transform_fu_151->ap_return_6(grp_sha256_transform_fu_151_ap_return_6);
    grp_sha256_transform_fu_151->ap_return_7(grp_sha256_transform_fu_151_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln64_fu_347_p2);
    sensitive << ( ctx_datalen_0_fu_64 );

    SC_METHOD(thread_add_ln67_fu_396_p2);
    sensitive << ( ctx_bitlen_0_fu_68 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state11_on_subcall_done);
    sensitive << ( icmp_ln65_reg_546 );
    sensitive << ( grp_sha256_transform_fu_151_ap_done );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( icmp_ln61_fu_271_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_datalen_0_fu_64 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_bitlen_0_fu_68 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_0_0_fu_100 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_1_0_fu_96 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_2_0_fu_92 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_3_0_fu_88 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_4_0_fu_84 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_5_0_fu_80 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_6_0_fu_76 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( ctx_state_7_0_fu_72 );

    SC_METHOD(thread_ctx_data_address0);
    sensitive << ( icmp_ln65_reg_546 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_151_data_address0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln63_fu_342_p1 );

    SC_METHOD(thread_ctx_data_address1);
    sensitive << ( icmp_ln65_reg_546 );
    sensitive << ( grp_sha256_transform_fu_151_data_address1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ctx_data_ce0);
    sensitive << ( icmp_ln65_reg_546 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha256_transform_fu_151_data_ce0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ctx_data_ce1);
    sensitive << ( icmp_ln65_reg_546 );
    sensitive << ( grp_sha256_transform_fu_151_data_ce1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ctx_data_d0);
    sensitive << ( data_addr_read_reg_541 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ctx_data_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_data_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_ARREADY );

    SC_METHOD(thread_data_blk_n_R);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );

    SC_METHOD(thread_grp_sha256_transform_fu_151_ap_start);
    sensitive << ( grp_sha256_transform_fu_151_ap_start_reg );

    SC_METHOD(thread_i_fu_276_p2);
    sensitive << ( i_0_reg_140 );

    SC_METHOD(thread_icmp_ln61_fu_271_p2);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( len );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( i_0_reg_140 );

    SC_METHOD(thread_icmp_ln65_fu_353_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( add_ln64_fu_347_p2 );

    SC_METHOD(thread_m_axi_data_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_ARREADY );
    sensitive << ( sext_ln63_fu_210_p1 );

    SC_METHOD(thread_m_axi_data_ARBURST);

    SC_METHOD(thread_m_axi_data_ARCACHE);

    SC_METHOD(thread_m_axi_data_ARID);

    SC_METHOD(thread_m_axi_data_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_ARREADY );
    sensitive << ( len );

    SC_METHOD(thread_m_axi_data_ARLOCK);

    SC_METHOD(thread_m_axi_data_ARPROT);

    SC_METHOD(thread_m_axi_data_ARQOS);

    SC_METHOD(thread_m_axi_data_ARREGION);

    SC_METHOD(thread_m_axi_data_ARSIZE);

    SC_METHOD(thread_m_axi_data_ARUSER);

    SC_METHOD(thread_m_axi_data_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_ARREADY );

    SC_METHOD(thread_m_axi_data_AWADDR);

    SC_METHOD(thread_m_axi_data_AWBURST);

    SC_METHOD(thread_m_axi_data_AWCACHE);

    SC_METHOD(thread_m_axi_data_AWID);

    SC_METHOD(thread_m_axi_data_AWLEN);

    SC_METHOD(thread_m_axi_data_AWLOCK);

    SC_METHOD(thread_m_axi_data_AWPROT);

    SC_METHOD(thread_m_axi_data_AWQOS);

    SC_METHOD(thread_m_axi_data_AWREGION);

    SC_METHOD(thread_m_axi_data_AWSIZE);

    SC_METHOD(thread_m_axi_data_AWUSER);

    SC_METHOD(thread_m_axi_data_AWVALID);

    SC_METHOD(thread_m_axi_data_BREADY);

    SC_METHOD(thread_m_axi_data_RREADY);
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );

    SC_METHOD(thread_m_axi_data_WDATA);

    SC_METHOD(thread_m_axi_data_WID);

    SC_METHOD(thread_m_axi_data_WLAST);

    SC_METHOD(thread_m_axi_data_WSTRB);

    SC_METHOD(thread_m_axi_data_WUSER);

    SC_METHOD(thread_m_axi_data_WVALID);

    SC_METHOD(thread_sext_ln63_fu_210_p1);
    sensitive << ( data_offset );

    SC_METHOD(thread_zext_ln63_fu_342_p1);
    sensitive << ( ctx_datalen_0_fu_64 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_ARREADY );
    sensitive << ( m_axi_data_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln61_fu_271_p2 );
    sensitive << ( icmp_ln65_fu_353_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_state11_on_subcall_done );

    ap_CS_fsm = "00000000001";
    grp_sha256_transform_fu_151_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_update_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_data_address0, "(port)ctx_data_address0");
    sc_trace(mVcdFile, ctx_data_ce0, "(port)ctx_data_ce0");
    sc_trace(mVcdFile, ctx_data_we0, "(port)ctx_data_we0");
    sc_trace(mVcdFile, ctx_data_d0, "(port)ctx_data_d0");
    sc_trace(mVcdFile, ctx_data_q0, "(port)ctx_data_q0");
    sc_trace(mVcdFile, ctx_data_address1, "(port)ctx_data_address1");
    sc_trace(mVcdFile, ctx_data_ce1, "(port)ctx_data_ce1");
    sc_trace(mVcdFile, ctx_data_q1, "(port)ctx_data_q1");
    sc_trace(mVcdFile, m_axi_data_AWVALID, "(port)m_axi_data_AWVALID");
    sc_trace(mVcdFile, m_axi_data_AWREADY, "(port)m_axi_data_AWREADY");
    sc_trace(mVcdFile, m_axi_data_AWADDR, "(port)m_axi_data_AWADDR");
    sc_trace(mVcdFile, m_axi_data_AWID, "(port)m_axi_data_AWID");
    sc_trace(mVcdFile, m_axi_data_AWLEN, "(port)m_axi_data_AWLEN");
    sc_trace(mVcdFile, m_axi_data_AWSIZE, "(port)m_axi_data_AWSIZE");
    sc_trace(mVcdFile, m_axi_data_AWBURST, "(port)m_axi_data_AWBURST");
    sc_trace(mVcdFile, m_axi_data_AWLOCK, "(port)m_axi_data_AWLOCK");
    sc_trace(mVcdFile, m_axi_data_AWCACHE, "(port)m_axi_data_AWCACHE");
    sc_trace(mVcdFile, m_axi_data_AWPROT, "(port)m_axi_data_AWPROT");
    sc_trace(mVcdFile, m_axi_data_AWQOS, "(port)m_axi_data_AWQOS");
    sc_trace(mVcdFile, m_axi_data_AWREGION, "(port)m_axi_data_AWREGION");
    sc_trace(mVcdFile, m_axi_data_AWUSER, "(port)m_axi_data_AWUSER");
    sc_trace(mVcdFile, m_axi_data_WVALID, "(port)m_axi_data_WVALID");
    sc_trace(mVcdFile, m_axi_data_WREADY, "(port)m_axi_data_WREADY");
    sc_trace(mVcdFile, m_axi_data_WDATA, "(port)m_axi_data_WDATA");
    sc_trace(mVcdFile, m_axi_data_WSTRB, "(port)m_axi_data_WSTRB");
    sc_trace(mVcdFile, m_axi_data_WLAST, "(port)m_axi_data_WLAST");
    sc_trace(mVcdFile, m_axi_data_WID, "(port)m_axi_data_WID");
    sc_trace(mVcdFile, m_axi_data_WUSER, "(port)m_axi_data_WUSER");
    sc_trace(mVcdFile, m_axi_data_ARVALID, "(port)m_axi_data_ARVALID");
    sc_trace(mVcdFile, m_axi_data_ARREADY, "(port)m_axi_data_ARREADY");
    sc_trace(mVcdFile, m_axi_data_ARADDR, "(port)m_axi_data_ARADDR");
    sc_trace(mVcdFile, m_axi_data_ARID, "(port)m_axi_data_ARID");
    sc_trace(mVcdFile, m_axi_data_ARLEN, "(port)m_axi_data_ARLEN");
    sc_trace(mVcdFile, m_axi_data_ARSIZE, "(port)m_axi_data_ARSIZE");
    sc_trace(mVcdFile, m_axi_data_ARBURST, "(port)m_axi_data_ARBURST");
    sc_trace(mVcdFile, m_axi_data_ARLOCK, "(port)m_axi_data_ARLOCK");
    sc_trace(mVcdFile, m_axi_data_ARCACHE, "(port)m_axi_data_ARCACHE");
    sc_trace(mVcdFile, m_axi_data_ARPROT, "(port)m_axi_data_ARPROT");
    sc_trace(mVcdFile, m_axi_data_ARQOS, "(port)m_axi_data_ARQOS");
    sc_trace(mVcdFile, m_axi_data_ARREGION, "(port)m_axi_data_ARREGION");
    sc_trace(mVcdFile, m_axi_data_ARUSER, "(port)m_axi_data_ARUSER");
    sc_trace(mVcdFile, m_axi_data_RVALID, "(port)m_axi_data_RVALID");
    sc_trace(mVcdFile, m_axi_data_RREADY, "(port)m_axi_data_RREADY");
    sc_trace(mVcdFile, m_axi_data_RDATA, "(port)m_axi_data_RDATA");
    sc_trace(mVcdFile, m_axi_data_RLAST, "(port)m_axi_data_RLAST");
    sc_trace(mVcdFile, m_axi_data_RID, "(port)m_axi_data_RID");
    sc_trace(mVcdFile, m_axi_data_RUSER, "(port)m_axi_data_RUSER");
    sc_trace(mVcdFile, m_axi_data_RRESP, "(port)m_axi_data_RRESP");
    sc_trace(mVcdFile, m_axi_data_BVALID, "(port)m_axi_data_BVALID");
    sc_trace(mVcdFile, m_axi_data_BREADY, "(port)m_axi_data_BREADY");
    sc_trace(mVcdFile, m_axi_data_BRESP, "(port)m_axi_data_BRESP");
    sc_trace(mVcdFile, m_axi_data_BID, "(port)m_axi_data_BID");
    sc_trace(mVcdFile, m_axi_data_BUSER, "(port)m_axi_data_BUSER");
    sc_trace(mVcdFile, data_offset, "(port)data_offset");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, data_blk_n_AR, "data_blk_n_AR");
    sc_trace(mVcdFile, data_blk_n_R, "data_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln61_fu_271_p2, "icmp_ln61_fu_271_p2");
    sc_trace(mVcdFile, i_fu_276_p2, "i_fu_276_p2");
    sc_trace(mVcdFile, i_reg_536, "i_reg_536");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, data_addr_read_reg_541, "data_addr_read_reg_541");
    sc_trace(mVcdFile, icmp_ln65_fu_353_p2, "icmp_ln65_fu_353_p2");
    sc_trace(mVcdFile, icmp_ln65_reg_546, "icmp_ln65_reg_546");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ctx_state_7_0_load_1_reg_550, "ctx_state_7_0_load_1_reg_550");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ctx_state_6_0_load_1_reg_555, "ctx_state_6_0_load_1_reg_555");
    sc_trace(mVcdFile, ctx_state_5_0_load_1_reg_560, "ctx_state_5_0_load_1_reg_560");
    sc_trace(mVcdFile, ctx_state_4_0_load_1_reg_565, "ctx_state_4_0_load_1_reg_565");
    sc_trace(mVcdFile, ctx_state_3_0_load_1_reg_570, "ctx_state_3_0_load_1_reg_570");
    sc_trace(mVcdFile, ctx_state_2_0_load_1_reg_575, "ctx_state_2_0_load_1_reg_575");
    sc_trace(mVcdFile, ctx_state_1_0_load_1_reg_580, "ctx_state_1_0_load_1_reg_580");
    sc_trace(mVcdFile, ctx_state_0_0_load_1_reg_585, "ctx_state_0_0_load_1_reg_585");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_start, "grp_sha256_transform_fu_151_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_done, "grp_sha256_transform_fu_151_ap_done");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_idle, "grp_sha256_transform_fu_151_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_ready, "grp_sha256_transform_fu_151_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_data_address0, "grp_sha256_transform_fu_151_data_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_data_ce0, "grp_sha256_transform_fu_151_data_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_data_address1, "grp_sha256_transform_fu_151_data_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_data_ce1, "grp_sha256_transform_fu_151_data_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_0, "grp_sha256_transform_fu_151_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_1, "grp_sha256_transform_fu_151_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_2, "grp_sha256_transform_fu_151_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_3, "grp_sha256_transform_fu_151_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_4, "grp_sha256_transform_fu_151_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_5, "grp_sha256_transform_fu_151_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_6, "grp_sha256_transform_fu_151_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_return_7, "grp_sha256_transform_fu_151_ap_return_7");
    sc_trace(mVcdFile, i_0_reg_140, "i_0_reg_140");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_block_state11_on_subcall_done, "ap_block_state11_on_subcall_done");
    sc_trace(mVcdFile, grp_sha256_transform_fu_151_ap_start_reg, "grp_sha256_transform_fu_151_ap_start_reg");
    sc_trace(mVcdFile, zext_ln63_fu_342_p1, "zext_ln63_fu_342_p1");
    sc_trace(mVcdFile, sext_ln63_fu_210_p1, "sext_ln63_fu_210_p1");
    sc_trace(mVcdFile, ctx_datalen_0_fu_64, "ctx_datalen_0_fu_64");
    sc_trace(mVcdFile, add_ln64_fu_347_p2, "add_ln64_fu_347_p2");
    sc_trace(mVcdFile, ctx_bitlen_0_fu_68, "ctx_bitlen_0_fu_68");
    sc_trace(mVcdFile, add_ln67_fu_396_p2, "add_ln67_fu_396_p2");
    sc_trace(mVcdFile, ctx_state_7_0_fu_72, "ctx_state_7_0_fu_72");
    sc_trace(mVcdFile, ctx_state_6_0_fu_76, "ctx_state_6_0_fu_76");
    sc_trace(mVcdFile, ctx_state_5_0_fu_80, "ctx_state_5_0_fu_80");
    sc_trace(mVcdFile, ctx_state_4_0_fu_84, "ctx_state_4_0_fu_84");
    sc_trace(mVcdFile, ctx_state_3_0_fu_88, "ctx_state_3_0_fu_88");
    sc_trace(mVcdFile, ctx_state_2_0_fu_92, "ctx_state_2_0_fu_92");
    sc_trace(mVcdFile, ctx_state_1_0_fu_96, "ctx_state_1_0_fu_96");
    sc_trace(mVcdFile, ctx_state_0_0_fu_100, "ctx_state_0_0_fu_100");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sha256_update::~sha256_update() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_sha256_transform_fu_151;
}

void sha256_update::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_bitlen_0_fu_68 = add_ln67_fu_396_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_bitlen_0_fu_68 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln65_fu_353_p2.read()))) {
        ctx_datalen_0_fu_64 = add_ln64_fu_347_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read()))) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        ctx_datalen_0_fu_64 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_0_0_fu_100 = grp_sha256_transform_fu_151_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_0_0_fu_100 = ap_const_lv32_6A09E667;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_1_0_fu_96 = grp_sha256_transform_fu_151_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_1_0_fu_96 = ap_const_lv32_BB67AE85;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_2_0_fu_92 = grp_sha256_transform_fu_151_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_2_0_fu_92 = ap_const_lv32_3C6EF372;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_3_0_fu_88 = grp_sha256_transform_fu_151_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_3_0_fu_88 = ap_const_lv32_A54FF53A;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_4_0_fu_84 = grp_sha256_transform_fu_151_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_4_0_fu_84 = ap_const_lv32_510E527F;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_5_0_fu_80 = grp_sha256_transform_fu_151_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_5_0_fu_80 = ap_const_lv32_9B05688C;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_6_0_fu_76 = grp_sha256_transform_fu_151_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_6_0_fu_76 = ap_const_lv32_1F83D9AB;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_7_0_fu_72 = grp_sha256_transform_fu_151_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        ctx_state_7_0_fu_72 = ap_const_lv32_5BE0CD19;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha256_transform_fu_151_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            grp_sha256_transform_fu_151_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_151_ap_ready.read())) {
            grp_sha256_transform_fu_151_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
        i_0_reg_140 = i_reg_536.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_0_reg_140 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ctx_state_0_0_load_1_reg_585 = ctx_state_0_0_fu_100.read();
        ctx_state_1_0_load_1_reg_580 = ctx_state_1_0_fu_96.read();
        ctx_state_2_0_load_1_reg_575 = ctx_state_2_0_fu_92.read();
        ctx_state_3_0_load_1_reg_570 = ctx_state_3_0_fu_88.read();
        ctx_state_4_0_load_1_reg_565 = ctx_state_4_0_fu_84.read();
        ctx_state_5_0_load_1_reg_560 = ctx_state_5_0_fu_80.read();
        ctx_state_6_0_load_1_reg_555 = ctx_state_6_0_fu_76.read();
        ctx_state_7_0_load_1_reg_550 = ctx_state_7_0_fu_72.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
        data_addr_read_reg_541 = m_axi_data_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
        i_reg_536 = i_fu_276_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        icmp_ln65_reg_546 = icmp_ln65_fu_353_p2.read();
    }
}

void sha256_update::thread_add_ln64_fu_347_p2() {
    add_ln64_fu_347_p2 = (!ctx_datalen_0_fu_64.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_datalen_0_fu_64.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_update::thread_add_ln67_fu_396_p2() {
    add_ln67_fu_396_p2 = (!ctx_bitlen_0_fu_68.read().is_01() || !ap_const_lv64_200.is_01())? sc_lv<64>(): (sc_biguint<64>(ctx_bitlen_0_fu_68.read()) + sc_biguint<64>(ap_const_lv64_200));
}

void sha256_update::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_update::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sha256_update::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sha256_update::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_update::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256_update::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256_update::thread_ap_block_state11_on_subcall_done() {
    ap_block_state11_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_151_ap_done.read()) && esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1));
}

void sha256_update::thread_ap_block_state8() {
    ap_block_state8 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read()));
}

void sha256_update::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())) && 
          esl_seteq<1,1,1>(icmp_ln61_fu_271_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())) && 
         esl_seteq<1,1,1>(icmp_ln61_fu_271_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_return_0() {
    ap_return_0 = ctx_datalen_0_fu_64.read();
}

void sha256_update::thread_ap_return_1() {
    ap_return_1 = ctx_bitlen_0_fu_68.read();
}

void sha256_update::thread_ap_return_2() {
    ap_return_2 = ctx_state_0_0_fu_100.read();
}

void sha256_update::thread_ap_return_3() {
    ap_return_3 = ctx_state_1_0_fu_96.read();
}

void sha256_update::thread_ap_return_4() {
    ap_return_4 = ctx_state_2_0_fu_92.read();
}

void sha256_update::thread_ap_return_5() {
    ap_return_5 = ctx_state_3_0_fu_88.read();
}

void sha256_update::thread_ap_return_6() {
    ap_return_6 = ctx_state_4_0_fu_84.read();
}

void sha256_update::thread_ap_return_7() {
    ap_return_7 = ctx_state_5_0_fu_80.read();
}

void sha256_update::thread_ap_return_8() {
    ap_return_8 = ctx_state_6_0_fu_76.read();
}

void sha256_update::thread_ap_return_9() {
    ap_return_9 = ctx_state_7_0_fu_72.read();
}

void sha256_update::thread_ctx_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_data_address0 =  (sc_lv<6>) (zext_ln63_fu_342_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1))) {
        ctx_data_address0 = grp_sha256_transform_fu_151_data_address0.read();
    } else {
        ctx_data_address0 = "XXXXXX";
    }
}

void sha256_update::thread_ctx_data_address1() {
    ctx_data_address1 = grp_sha256_transform_fu_151_data_address1.read();
}

void sha256_update::thread_ctx_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_data_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1))) {
        ctx_data_ce0 = grp_sha256_transform_fu_151_data_ce0.read();
    } else {
        ctx_data_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_reg_546.read(), ap_const_lv1_1))) {
        ctx_data_ce1 = grp_sha256_transform_fu_151_data_ce1.read();
    } else {
        ctx_data_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_d0() {
    ctx_data_d0 = data_addr_read_reg_541.read();
}

void sha256_update::thread_ctx_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_data_we0 = ap_const_logic_1;
    } else {
        ctx_data_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_data_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        data_blk_n_AR = m_axi_data_ARREADY.read();
    } else {
        data_blk_n_AR = ap_const_logic_1;
    }
}

void sha256_update::thread_data_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()))) {
        data_blk_n_R = m_axi_data_RVALID.read();
    } else {
        data_blk_n_R = ap_const_logic_1;
    }
}

void sha256_update::thread_grp_sha256_transform_fu_151_ap_start() {
    grp_sha256_transform_fu_151_ap_start = grp_sha256_transform_fu_151_ap_start_reg.read();
}

void sha256_update::thread_i_fu_276_p2() {
    i_fu_276_p2 = (!i_0_reg_140.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(i_0_reg_140.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void sha256_update::thread_icmp_ln61_fu_271_p2() {
    icmp_ln61_fu_271_p2 = (!i_0_reg_140.read().is_01() || !len.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_140.read() == len.read());
}

void sha256_update::thread_icmp_ln65_fu_353_p2() {
    icmp_ln65_fu_353_p2 = (!add_ln64_fu_347_p2.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<1>(): sc_lv<1>(add_ln64_fu_347_p2.read() == ap_const_lv32_40);
}

void sha256_update::thread_m_axi_data_ARADDR() {
    m_axi_data_ARADDR =  (sc_lv<32>) (sext_ln63_fu_210_p1.read());
}

void sha256_update::thread_m_axi_data_ARBURST() {
    m_axi_data_ARBURST = ap_const_lv2_0;
}

void sha256_update::thread_m_axi_data_ARCACHE() {
    m_axi_data_ARCACHE = ap_const_lv4_0;
}

void sha256_update::thread_m_axi_data_ARID() {
    m_axi_data_ARID = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_ARLEN() {
    m_axi_data_ARLEN = len.read().range(32-1, 0);
}

void sha256_update::thread_m_axi_data_ARLOCK() {
    m_axi_data_ARLOCK = ap_const_lv2_0;
}

void sha256_update::thread_m_axi_data_ARPROT() {
    m_axi_data_ARPROT = ap_const_lv3_0;
}

void sha256_update::thread_m_axi_data_ARQOS() {
    m_axi_data_ARQOS = ap_const_lv4_0;
}

void sha256_update::thread_m_axi_data_ARREGION() {
    m_axi_data_ARREGION = ap_const_lv4_0;
}

void sha256_update::thread_m_axi_data_ARSIZE() {
    m_axi_data_ARSIZE = ap_const_lv3_0;
}

void sha256_update::thread_m_axi_data_ARUSER() {
    m_axi_data_ARUSER = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
        m_axi_data_ARVALID = ap_const_logic_1;
    } else {
        m_axi_data_ARVALID = ap_const_logic_0;
    }
}

void sha256_update::thread_m_axi_data_AWADDR() {
    m_axi_data_AWADDR = ap_const_lv32_0;
}

void sha256_update::thread_m_axi_data_AWBURST() {
    m_axi_data_AWBURST = ap_const_lv2_0;
}

void sha256_update::thread_m_axi_data_AWCACHE() {
    m_axi_data_AWCACHE = ap_const_lv4_0;
}

void sha256_update::thread_m_axi_data_AWID() {
    m_axi_data_AWID = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_AWLEN() {
    m_axi_data_AWLEN = ap_const_lv32_0;
}

void sha256_update::thread_m_axi_data_AWLOCK() {
    m_axi_data_AWLOCK = ap_const_lv2_0;
}

void sha256_update::thread_m_axi_data_AWPROT() {
    m_axi_data_AWPROT = ap_const_lv3_0;
}

void sha256_update::thread_m_axi_data_AWQOS() {
    m_axi_data_AWQOS = ap_const_lv4_0;
}

void sha256_update::thread_m_axi_data_AWREGION() {
    m_axi_data_AWREGION = ap_const_lv4_0;
}

void sha256_update::thread_m_axi_data_AWSIZE() {
    m_axi_data_AWSIZE = ap_const_lv3_0;
}

void sha256_update::thread_m_axi_data_AWUSER() {
    m_axi_data_AWUSER = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_AWVALID() {
    m_axi_data_AWVALID = ap_const_logic_0;
}

void sha256_update::thread_m_axi_data_BREADY() {
    m_axi_data_BREADY = ap_const_logic_0;
}

void sha256_update::thread_m_axi_data_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
        m_axi_data_RREADY = ap_const_logic_1;
    } else {
        m_axi_data_RREADY = ap_const_logic_0;
    }
}

void sha256_update::thread_m_axi_data_WDATA() {
    m_axi_data_WDATA = ap_const_lv8_0;
}

void sha256_update::thread_m_axi_data_WID() {
    m_axi_data_WID = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_WLAST() {
    m_axi_data_WLAST = ap_const_logic_0;
}

void sha256_update::thread_m_axi_data_WSTRB() {
    m_axi_data_WSTRB = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_WUSER() {
    m_axi_data_WUSER = ap_const_lv1_0;
}

void sha256_update::thread_m_axi_data_WVALID() {
    m_axi_data_WVALID = ap_const_logic_0;
}

void sha256_update::thread_sext_ln63_fu_210_p1() {
    sext_ln63_fu_210_p1 = esl_sext<64,32>(data_offset.read());
}

void sha256_update::thread_zext_ln63_fu_342_p1() {
    zext_ln63_fu_342_p1 = esl_zext<64,32>(ctx_datalen_0_fu_64.read());
}

void sha256_update::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())) && esl_seteq<1,1,1>(icmp_ln61_fu_271_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_271_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_data_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln65_fu_353_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_block_state11_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

}

