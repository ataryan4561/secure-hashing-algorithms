// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha256_update_HH_
#define _sha256_update_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sha256_transform.h"

namespace ap_rtl {

struct sha256_update : public sc_module {
    // Port declarations 71
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > ctx_data_address0;
    sc_out< sc_logic > ctx_data_ce0;
    sc_out< sc_logic > ctx_data_we0;
    sc_out< sc_lv<8> > ctx_data_d0;
    sc_in< sc_lv<8> > ctx_data_q0;
    sc_out< sc_lv<6> > ctx_data_address1;
    sc_out< sc_logic > ctx_data_ce1;
    sc_in< sc_lv<8> > ctx_data_q1;
    sc_out< sc_logic > m_axi_data_AWVALID;
    sc_in< sc_logic > m_axi_data_AWREADY;
    sc_out< sc_lv<32> > m_axi_data_AWADDR;
    sc_out< sc_lv<1> > m_axi_data_AWID;
    sc_out< sc_lv<32> > m_axi_data_AWLEN;
    sc_out< sc_lv<3> > m_axi_data_AWSIZE;
    sc_out< sc_lv<2> > m_axi_data_AWBURST;
    sc_out< sc_lv<2> > m_axi_data_AWLOCK;
    sc_out< sc_lv<4> > m_axi_data_AWCACHE;
    sc_out< sc_lv<3> > m_axi_data_AWPROT;
    sc_out< sc_lv<4> > m_axi_data_AWQOS;
    sc_out< sc_lv<4> > m_axi_data_AWREGION;
    sc_out< sc_lv<1> > m_axi_data_AWUSER;
    sc_out< sc_logic > m_axi_data_WVALID;
    sc_in< sc_logic > m_axi_data_WREADY;
    sc_out< sc_lv<8> > m_axi_data_WDATA;
    sc_out< sc_lv<1> > m_axi_data_WSTRB;
    sc_out< sc_logic > m_axi_data_WLAST;
    sc_out< sc_lv<1> > m_axi_data_WID;
    sc_out< sc_lv<1> > m_axi_data_WUSER;
    sc_out< sc_logic > m_axi_data_ARVALID;
    sc_in< sc_logic > m_axi_data_ARREADY;
    sc_out< sc_lv<32> > m_axi_data_ARADDR;
    sc_out< sc_lv<1> > m_axi_data_ARID;
    sc_out< sc_lv<32> > m_axi_data_ARLEN;
    sc_out< sc_lv<3> > m_axi_data_ARSIZE;
    sc_out< sc_lv<2> > m_axi_data_ARBURST;
    sc_out< sc_lv<2> > m_axi_data_ARLOCK;
    sc_out< sc_lv<4> > m_axi_data_ARCACHE;
    sc_out< sc_lv<3> > m_axi_data_ARPROT;
    sc_out< sc_lv<4> > m_axi_data_ARQOS;
    sc_out< sc_lv<4> > m_axi_data_ARREGION;
    sc_out< sc_lv<1> > m_axi_data_ARUSER;
    sc_in< sc_logic > m_axi_data_RVALID;
    sc_out< sc_logic > m_axi_data_RREADY;
    sc_in< sc_lv<8> > m_axi_data_RDATA;
    sc_in< sc_logic > m_axi_data_RLAST;
    sc_in< sc_lv<1> > m_axi_data_RID;
    sc_in< sc_lv<1> > m_axi_data_RUSER;
    sc_in< sc_lv<2> > m_axi_data_RRESP;
    sc_in< sc_logic > m_axi_data_BVALID;
    sc_out< sc_logic > m_axi_data_BREADY;
    sc_in< sc_lv<2> > m_axi_data_BRESP;
    sc_in< sc_lv<1> > m_axi_data_BID;
    sc_in< sc_lv<1> > m_axi_data_BUSER;
    sc_in< sc_lv<32> > data_offset;
    sc_in< sc_lv<64> > len;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<64> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;
    sc_out< sc_lv<32> > ap_return_3;
    sc_out< sc_lv<32> > ap_return_4;
    sc_out< sc_lv<32> > ap_return_5;
    sc_out< sc_lv<32> > ap_return_6;
    sc_out< sc_lv<32> > ap_return_7;
    sc_out< sc_lv<32> > ap_return_8;
    sc_out< sc_lv<32> > ap_return_9;


    // Module declarations
    sha256_update(sc_module_name name);
    SC_HAS_PROCESS(sha256_update);

    ~sha256_update();

    sc_trace_file* mVcdFile;

    sha256_transform* grp_sha256_transform_fu_151;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > data_blk_n_AR;
    sc_signal< sc_logic > data_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > icmp_ln61_fu_271_p2;
    sc_signal< sc_lv<64> > i_fu_276_p2;
    sc_signal< sc_lv<64> > i_reg_536;
    sc_signal< bool > ap_block_state8;
    sc_signal< sc_lv<8> > data_addr_read_reg_541;
    sc_signal< sc_lv<1> > icmp_ln65_fu_353_p2;
    sc_signal< sc_lv<1> > icmp_ln65_reg_546;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > ctx_state_7_0_load_1_reg_550;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > ctx_state_6_0_load_1_reg_555;
    sc_signal< sc_lv<32> > ctx_state_5_0_load_1_reg_560;
    sc_signal< sc_lv<32> > ctx_state_4_0_load_1_reg_565;
    sc_signal< sc_lv<32> > ctx_state_3_0_load_1_reg_570;
    sc_signal< sc_lv<32> > ctx_state_2_0_load_1_reg_575;
    sc_signal< sc_lv<32> > ctx_state_1_0_load_1_reg_580;
    sc_signal< sc_lv<32> > ctx_state_0_0_load_1_reg_585;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_ap_start;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_ap_done;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_ap_idle;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_ap_ready;
    sc_signal< sc_lv<6> > grp_sha256_transform_fu_151_data_address0;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_data_ce0;
    sc_signal< sc_lv<6> > grp_sha256_transform_fu_151_data_address1;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_data_ce1;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_0;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_1;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_2;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_3;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_4;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_5;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_6;
    sc_signal< sc_lv<32> > grp_sha256_transform_fu_151_ap_return_7;
    sc_signal< sc_lv<64> > i_0_reg_140;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< bool > ap_block_state11_on_subcall_done;
    sc_signal< sc_logic > grp_sha256_transform_fu_151_ap_start_reg;
    sc_signal< sc_lv<64> > zext_ln63_fu_342_p1;
    sc_signal< sc_lv<64> > sext_ln63_fu_210_p1;
    sc_signal< sc_lv<32> > ctx_datalen_0_fu_64;
    sc_signal< sc_lv<32> > add_ln64_fu_347_p2;
    sc_signal< sc_lv<64> > ctx_bitlen_0_fu_68;
    sc_signal< sc_lv<64> > add_ln67_fu_396_p2;
    sc_signal< sc_lv<32> > ctx_state_7_0_fu_72;
    sc_signal< sc_lv<32> > ctx_state_6_0_fu_76;
    sc_signal< sc_lv<32> > ctx_state_5_0_fu_80;
    sc_signal< sc_lv<32> > ctx_state_4_0_fu_84;
    sc_signal< sc_lv<32> > ctx_state_3_0_fu_88;
    sc_signal< sc_lv<32> > ctx_state_2_0_fu_92;
    sc_signal< sc_lv<32> > ctx_state_1_0_fu_96;
    sc_signal< sc_lv<32> > ctx_state_0_0_fu_100;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_5BE0CD19;
    static const sc_lv<32> ap_const_lv32_1F83D9AB;
    static const sc_lv<32> ap_const_lv32_9B05688C;
    static const sc_lv<32> ap_const_lv32_510E527F;
    static const sc_lv<32> ap_const_lv32_A54FF53A;
    static const sc_lv<32> ap_const_lv32_3C6EF372;
    static const sc_lv<32> ap_const_lv32_BB67AE85;
    static const sc_lv<32> ap_const_lv32_6A09E667;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<64> ap_const_lv64_200;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln64_fu_347_p2();
    void thread_add_ln67_fu_396_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state11_on_subcall_done();
    void thread_ap_block_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_ctx_data_address0();
    void thread_ctx_data_address1();
    void thread_ctx_data_ce0();
    void thread_ctx_data_ce1();
    void thread_ctx_data_d0();
    void thread_ctx_data_we0();
    void thread_data_blk_n_AR();
    void thread_data_blk_n_R();
    void thread_grp_sha256_transform_fu_151_ap_start();
    void thread_i_fu_276_p2();
    void thread_icmp_ln61_fu_271_p2();
    void thread_icmp_ln65_fu_353_p2();
    void thread_m_axi_data_ARADDR();
    void thread_m_axi_data_ARBURST();
    void thread_m_axi_data_ARCACHE();
    void thread_m_axi_data_ARID();
    void thread_m_axi_data_ARLEN();
    void thread_m_axi_data_ARLOCK();
    void thread_m_axi_data_ARPROT();
    void thread_m_axi_data_ARQOS();
    void thread_m_axi_data_ARREGION();
    void thread_m_axi_data_ARSIZE();
    void thread_m_axi_data_ARUSER();
    void thread_m_axi_data_ARVALID();
    void thread_m_axi_data_AWADDR();
    void thread_m_axi_data_AWBURST();
    void thread_m_axi_data_AWCACHE();
    void thread_m_axi_data_AWID();
    void thread_m_axi_data_AWLEN();
    void thread_m_axi_data_AWLOCK();
    void thread_m_axi_data_AWPROT();
    void thread_m_axi_data_AWQOS();
    void thread_m_axi_data_AWREGION();
    void thread_m_axi_data_AWSIZE();
    void thread_m_axi_data_AWUSER();
    void thread_m_axi_data_AWVALID();
    void thread_m_axi_data_BREADY();
    void thread_m_axi_data_RREADY();
    void thread_m_axi_data_WDATA();
    void thread_m_axi_data_WID();
    void thread_m_axi_data_WLAST();
    void thread_m_axi_data_WSTRB();
    void thread_m_axi_data_WUSER();
    void thread_m_axi_data_WVALID();
    void thread_sext_ln63_fu_210_p1();
    void thread_zext_ln63_fu_342_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
