-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateStringLengt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_str_AWVALID : OUT STD_LOGIC;
    m_axi_str_AWREADY : IN STD_LOGIC;
    m_axi_str_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_str_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_str_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_str_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_str_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_str_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_str_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_str_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_str_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_str_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_WVALID : OUT STD_LOGIC;
    m_axi_str_WREADY : IN STD_LOGIC;
    m_axi_str_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_str_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_WLAST : OUT STD_LOGIC;
    m_axi_str_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_ARVALID : OUT STD_LOGIC;
    m_axi_str_ARREADY : IN STD_LOGIC;
    m_axi_str_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_str_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_str_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_str_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_str_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_str_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_str_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_str_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_str_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_str_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_RVALID : IN STD_LOGIC;
    m_axi_str_RREADY : OUT STD_LOGIC;
    m_axi_str_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_str_RLAST : IN STD_LOGIC;
    m_axi_str_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_str_BVALID : IN STD_LOGIC;
    m_axi_str_BREADY : OUT STD_LOGIC;
    m_axi_str_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_str_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_str_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    str_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of calculateStringLengt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal str_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal str_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln115_fu_64_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_reg_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal str_addr_reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal str_addr_read_reg_101 : STD_LOGIC_VECTOR (7 downto 0);
    signal length_fu_84_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal length_0_reg_52 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln115_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_68_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    length_0_reg_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_79_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                length_0_reg_52 <= length_fu_84_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                length_0_reg_52 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_ln115_reg_90 <= sext_ln115_fu_64_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_str_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                str_addr_read_reg_101 <= m_axi_str_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                str_addr_reg_95 <= add_ln115_fu_68_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_str_ARREADY, m_axi_str_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, icmp_ln115_fu_79_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((m_axi_str_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_str_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln115_fu_79_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln115_fu_68_p2 <= std_logic_vector(unsigned(length_0_reg_52) + unsigned(sext_ln115_reg_90));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln115_fu_79_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln115_fu_79_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln115_fu_79_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln115_fu_79_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= length_0_reg_52;
    icmp_ln115_fu_79_p2 <= "1" when (str_addr_read_reg_101 = ap_const_lv8_0) else "0";
    length_fu_84_p2 <= std_logic_vector(unsigned(length_0_reg_52) + unsigned(ap_const_lv64_1));
    m_axi_str_ARADDR <= str_addr_reg_95;
    m_axi_str_ARBURST <= ap_const_lv2_0;
    m_axi_str_ARCACHE <= ap_const_lv4_0;
    m_axi_str_ARID <= ap_const_lv1_0;
    m_axi_str_ARLEN <= ap_const_lv32_1;
    m_axi_str_ARLOCK <= ap_const_lv2_0;
    m_axi_str_ARPROT <= ap_const_lv3_0;
    m_axi_str_ARQOS <= ap_const_lv4_0;
    m_axi_str_ARREGION <= ap_const_lv4_0;
    m_axi_str_ARSIZE <= ap_const_lv3_0;
    m_axi_str_ARUSER <= ap_const_lv1_0;

    m_axi_str_ARVALID_assign_proc : process(m_axi_str_ARREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_str_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_str_ARVALID <= ap_const_logic_1;
        else 
            m_axi_str_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_str_AWADDR <= ap_const_lv32_0;
    m_axi_str_AWBURST <= ap_const_lv2_0;
    m_axi_str_AWCACHE <= ap_const_lv4_0;
    m_axi_str_AWID <= ap_const_lv1_0;
    m_axi_str_AWLEN <= ap_const_lv32_0;
    m_axi_str_AWLOCK <= ap_const_lv2_0;
    m_axi_str_AWPROT <= ap_const_lv3_0;
    m_axi_str_AWQOS <= ap_const_lv4_0;
    m_axi_str_AWREGION <= ap_const_lv4_0;
    m_axi_str_AWSIZE <= ap_const_lv3_0;
    m_axi_str_AWUSER <= ap_const_lv1_0;
    m_axi_str_AWVALID <= ap_const_logic_0;
    m_axi_str_BREADY <= ap_const_logic_0;

    m_axi_str_RREADY_assign_proc : process(m_axi_str_RVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_str_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_str_RREADY <= ap_const_logic_1;
        else 
            m_axi_str_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_str_WDATA <= ap_const_lv8_0;
    m_axi_str_WID <= ap_const_lv1_0;
    m_axi_str_WLAST <= ap_const_logic_0;
    m_axi_str_WSTRB <= ap_const_lv1_0;
    m_axi_str_WUSER <= ap_const_lv1_0;
    m_axi_str_WVALID <= ap_const_logic_0;
        sext_ln115_fu_64_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(str_offset),64));


    str_blk_n_AR_assign_proc : process(m_axi_str_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            str_blk_n_AR <= m_axi_str_ARREADY;
        else 
            str_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    str_blk_n_R_assign_proc : process(m_axi_str_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            str_blk_n_R <= m_axi_str_RVALID;
        else 
            str_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
