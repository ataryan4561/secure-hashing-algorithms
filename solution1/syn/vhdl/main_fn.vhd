-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_fn is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of main_fn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "main_fn,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=4681,HLS_SYN_LUT=7513,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_read_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_read_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateStringLengt_fu_99_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_calculateStringLengt_fu_99_ap_ready : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_ap_done : STD_LOGIC;
    signal ctx_bitlen_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sha256_update_fu_88_ap_ready : STD_LOGIC;
    signal grp_sha256_update_fu_88_ap_done : STD_LOGIC;
    signal ctx_datalen_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_0_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_6_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_7_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ctx_data_ce0 : STD_LOGIC;
    signal ctx_data_we0 : STD_LOGIC;
    signal ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ctx_data_ce1 : STD_LOGIC;
    signal ctx_data_we1 : STD_LOGIC;
    signal ctx_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_68_ap_start : STD_LOGIC;
    signal grp_sha256_final_fu_68_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_68_ap_idle : STD_LOGIC;
    signal grp_sha256_final_fu_68_ap_ready : STD_LOGIC;
    signal grp_sha256_final_fu_68_ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_68_ctx_data_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_68_ctx_data_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_68_ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_68_ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_final_fu_68_ctx_data_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_68_ctx_data_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_68_ctx_data_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWVALID : STD_LOGIC;
    signal grp_sha256_final_fu_68_m_axi_hash_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_WVALID : STD_LOGIC;
    signal grp_sha256_final_fu_68_m_axi_hash_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_WLAST : STD_LOGIC;
    signal grp_sha256_final_fu_68_m_axi_hash_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARVALID : STD_LOGIC;
    signal grp_sha256_final_fu_68_m_axi_hash_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_final_fu_68_m_axi_hash_RREADY : STD_LOGIC;
    signal grp_sha256_final_fu_68_m_axi_hash_BREADY : STD_LOGIC;
    signal grp_sha256_update_fu_88_ap_start : STD_LOGIC;
    signal grp_sha256_update_fu_88_ap_idle : STD_LOGIC;
    signal grp_sha256_update_fu_88_ctx_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_88_ctx_data_ce0 : STD_LOGIC;
    signal grp_sha256_update_fu_88_ctx_data_we0 : STD_LOGIC;
    signal grp_sha256_update_fu_88_ctx_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_88_ctx_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_update_fu_88_ctx_data_ce1 : STD_LOGIC;
    signal grp_sha256_update_fu_88_m_axi_data_AWVALID : STD_LOGIC;
    signal grp_sha256_update_fu_88_m_axi_data_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_WVALID : STD_LOGIC;
    signal grp_sha256_update_fu_88_m_axi_data_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_WLAST : STD_LOGIC;
    signal grp_sha256_update_fu_88_m_axi_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARVALID : STD_LOGIC;
    signal grp_sha256_update_fu_88_m_axi_data_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha256_update_fu_88_m_axi_data_RREADY : STD_LOGIC;
    signal grp_sha256_update_fu_88_m_axi_data_BREADY : STD_LOGIC;
    signal grp_sha256_update_fu_88_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha256_update_fu_88_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_update_fu_88_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateStringLengt_fu_99_ap_start : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_ap_idle : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWVALID : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_WVALID : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_m_axi_str_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_WLAST : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_m_axi_str_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARVALID : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_calculateStringLengt_fu_99_m_axi_str_RREADY : STD_LOGIC;
    signal grp_calculateStringLengt_fu_99_m_axi_str_BREADY : STD_LOGIC;
    signal grp_sha256_final_fu_68_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_sha256_update_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_calculateStringLengt_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component sha256_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce0 : OUT STD_LOGIC;
        ctx_data_we0 : OUT STD_LOGIC;
        ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce1 : OUT STD_LOGIC;
        ctx_data_we1 : OUT STD_LOGIC;
        ctx_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_datalen_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_bitlen_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_AWVALID : OUT STD_LOGIC;
        m_axi_hash_AWREADY : IN STD_LOGIC;
        m_axi_hash_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_WVALID : OUT STD_LOGIC;
        m_axi_hash_WREADY : IN STD_LOGIC;
        m_axi_hash_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_hash_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_WLAST : OUT STD_LOGIC;
        m_axi_hash_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_ARVALID : OUT STD_LOGIC;
        m_axi_hash_ARREADY : IN STD_LOGIC;
        m_axi_hash_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_hash_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_hash_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_hash_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_RVALID : IN STD_LOGIC;
        m_axi_hash_RREADY : OUT STD_LOGIC;
        m_axi_hash_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_hash_RLAST : IN STD_LOGIC;
        m_axi_hash_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_BVALID : IN STD_LOGIC;
        m_axi_hash_BREADY : OUT STD_LOGIC;
        m_axi_hash_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_hash_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_hash_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        hash_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce0 : OUT STD_LOGIC;
        ctx_data_we0 : OUT STD_LOGIC;
        ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ctx_data_ce1 : OUT STD_LOGIC;
        ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_AWVALID : OUT STD_LOGIC;
        m_axi_data_AWREADY : IN STD_LOGIC;
        m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WVALID : OUT STD_LOGIC;
        m_axi_data_WREADY : IN STD_LOGIC;
        m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WLAST : OUT STD_LOGIC;
        m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARVALID : OUT STD_LOGIC;
        m_axi_data_ARREADY : IN STD_LOGIC;
        m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RVALID : IN STD_LOGIC;
        m_axi_data_RREADY : OUT STD_LOGIC;
        m_axi_data_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_data_RLAST : IN STD_LOGIC;
        m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BVALID : IN STD_LOGIC;
        m_axi_data_BREADY : OUT STD_LOGIC;
        m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        len : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateStringLengt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_str_AWVALID : OUT STD_LOGIC;
        m_axi_str_AWREADY : IN STD_LOGIC;
        m_axi_str_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_str_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_str_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_str_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_str_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_str_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_str_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_str_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_str_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_str_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_WVALID : OUT STD_LOGIC;
        m_axi_str_WREADY : IN STD_LOGIC;
        m_axi_str_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_str_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_WLAST : OUT STD_LOGIC;
        m_axi_str_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_ARVALID : OUT STD_LOGIC;
        m_axi_str_ARREADY : IN STD_LOGIC;
        m_axi_str_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_str_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_str_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_str_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_str_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_str_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_str_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_str_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_str_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_str_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_RVALID : IN STD_LOGIC;
        m_axi_str_RREADY : OUT STD_LOGIC;
        m_axi_str_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_str_RLAST : IN STD_LOGIC;
        m_axi_str_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_str_BVALID : IN STD_LOGIC;
        m_axi_str_BREADY : OUT STD_LOGIC;
        m_axi_str_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_str_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_str_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        str_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_fn_ctx_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component main_fn_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fn_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    main_fn_AXILiteS_s_axi_U : component main_fn_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r => input_r,
        output_r => output_r);

    main_fn_gmem_m_axi_U : component main_fn_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_sha256_final_fu_68_m_axi_hash_AWADDR,
        I_AWID => grp_sha256_final_fu_68_m_axi_hash_AWID,
        I_AWLEN => grp_sha256_final_fu_68_m_axi_hash_AWLEN,
        I_AWSIZE => grp_sha256_final_fu_68_m_axi_hash_AWSIZE,
        I_AWLOCK => grp_sha256_final_fu_68_m_axi_hash_AWLOCK,
        I_AWCACHE => grp_sha256_final_fu_68_m_axi_hash_AWCACHE,
        I_AWQOS => grp_sha256_final_fu_68_m_axi_hash_AWQOS,
        I_AWPROT => grp_sha256_final_fu_68_m_axi_hash_AWPROT,
        I_AWUSER => grp_sha256_final_fu_68_m_axi_hash_AWUSER,
        I_AWBURST => grp_sha256_final_fu_68_m_axi_hash_AWBURST,
        I_AWREGION => grp_sha256_final_fu_68_m_axi_hash_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_sha256_final_fu_68_m_axi_hash_WDATA,
        I_WID => grp_sha256_final_fu_68_m_axi_hash_WID,
        I_WUSER => grp_sha256_final_fu_68_m_axi_hash_WUSER,
        I_WLAST => grp_sha256_final_fu_68_m_axi_hash_WLAST,
        I_WSTRB => grp_sha256_final_fu_68_m_axi_hash_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    ctx_data_U : component main_fn_ctx_data
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_data_address0,
        ce0 => ctx_data_ce0,
        we0 => ctx_data_we0,
        d0 => ctx_data_d0,
        q0 => ctx_data_q0,
        address1 => ctx_data_address1,
        ce1 => ctx_data_ce1,
        we1 => ctx_data_we1,
        d1 => grp_sha256_final_fu_68_ctx_data_d1,
        q1 => ctx_data_q1);

    grp_sha256_final_fu_68 : component sha256_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_final_fu_68_ap_start,
        ap_done => grp_sha256_final_fu_68_ap_done,
        ap_idle => grp_sha256_final_fu_68_ap_idle,
        ap_ready => grp_sha256_final_fu_68_ap_ready,
        ctx_data_address0 => grp_sha256_final_fu_68_ctx_data_address0,
        ctx_data_ce0 => grp_sha256_final_fu_68_ctx_data_ce0,
        ctx_data_we0 => grp_sha256_final_fu_68_ctx_data_we0,
        ctx_data_d0 => grp_sha256_final_fu_68_ctx_data_d0,
        ctx_data_q0 => ctx_data_q0,
        ctx_data_address1 => grp_sha256_final_fu_68_ctx_data_address1,
        ctx_data_ce1 => grp_sha256_final_fu_68_ctx_data_ce1,
        ctx_data_we1 => grp_sha256_final_fu_68_ctx_data_we1,
        ctx_data_d1 => grp_sha256_final_fu_68_ctx_data_d1,
        ctx_data_q1 => ctx_data_q1,
        ctx_datalen_read => ctx_datalen_reg_168,
        ctx_bitlen_read => ctx_bitlen_reg_163,
        p_read2 => ctx_state_0_reg_173,
        p_read3 => ctx_state_1_reg_178,
        p_read4 => ctx_state_2_reg_183,
        p_read5 => ctx_state_3_reg_188,
        p_read6 => ctx_state_4_reg_193,
        p_read7 => ctx_state_5_reg_198,
        p_read8 => ctx_state_6_reg_203,
        p_read9 => ctx_state_7_reg_208,
        m_axi_hash_AWVALID => grp_sha256_final_fu_68_m_axi_hash_AWVALID,
        m_axi_hash_AWREADY => gmem_AWREADY,
        m_axi_hash_AWADDR => grp_sha256_final_fu_68_m_axi_hash_AWADDR,
        m_axi_hash_AWID => grp_sha256_final_fu_68_m_axi_hash_AWID,
        m_axi_hash_AWLEN => grp_sha256_final_fu_68_m_axi_hash_AWLEN,
        m_axi_hash_AWSIZE => grp_sha256_final_fu_68_m_axi_hash_AWSIZE,
        m_axi_hash_AWBURST => grp_sha256_final_fu_68_m_axi_hash_AWBURST,
        m_axi_hash_AWLOCK => grp_sha256_final_fu_68_m_axi_hash_AWLOCK,
        m_axi_hash_AWCACHE => grp_sha256_final_fu_68_m_axi_hash_AWCACHE,
        m_axi_hash_AWPROT => grp_sha256_final_fu_68_m_axi_hash_AWPROT,
        m_axi_hash_AWQOS => grp_sha256_final_fu_68_m_axi_hash_AWQOS,
        m_axi_hash_AWREGION => grp_sha256_final_fu_68_m_axi_hash_AWREGION,
        m_axi_hash_AWUSER => grp_sha256_final_fu_68_m_axi_hash_AWUSER,
        m_axi_hash_WVALID => grp_sha256_final_fu_68_m_axi_hash_WVALID,
        m_axi_hash_WREADY => gmem_WREADY,
        m_axi_hash_WDATA => grp_sha256_final_fu_68_m_axi_hash_WDATA,
        m_axi_hash_WSTRB => grp_sha256_final_fu_68_m_axi_hash_WSTRB,
        m_axi_hash_WLAST => grp_sha256_final_fu_68_m_axi_hash_WLAST,
        m_axi_hash_WID => grp_sha256_final_fu_68_m_axi_hash_WID,
        m_axi_hash_WUSER => grp_sha256_final_fu_68_m_axi_hash_WUSER,
        m_axi_hash_ARVALID => grp_sha256_final_fu_68_m_axi_hash_ARVALID,
        m_axi_hash_ARREADY => ap_const_logic_0,
        m_axi_hash_ARADDR => grp_sha256_final_fu_68_m_axi_hash_ARADDR,
        m_axi_hash_ARID => grp_sha256_final_fu_68_m_axi_hash_ARID,
        m_axi_hash_ARLEN => grp_sha256_final_fu_68_m_axi_hash_ARLEN,
        m_axi_hash_ARSIZE => grp_sha256_final_fu_68_m_axi_hash_ARSIZE,
        m_axi_hash_ARBURST => grp_sha256_final_fu_68_m_axi_hash_ARBURST,
        m_axi_hash_ARLOCK => grp_sha256_final_fu_68_m_axi_hash_ARLOCK,
        m_axi_hash_ARCACHE => grp_sha256_final_fu_68_m_axi_hash_ARCACHE,
        m_axi_hash_ARPROT => grp_sha256_final_fu_68_m_axi_hash_ARPROT,
        m_axi_hash_ARQOS => grp_sha256_final_fu_68_m_axi_hash_ARQOS,
        m_axi_hash_ARREGION => grp_sha256_final_fu_68_m_axi_hash_ARREGION,
        m_axi_hash_ARUSER => grp_sha256_final_fu_68_m_axi_hash_ARUSER,
        m_axi_hash_RVALID => ap_const_logic_0,
        m_axi_hash_RREADY => grp_sha256_final_fu_68_m_axi_hash_RREADY,
        m_axi_hash_RDATA => ap_const_lv8_0,
        m_axi_hash_RLAST => ap_const_logic_0,
        m_axi_hash_RID => ap_const_lv1_0,
        m_axi_hash_RUSER => ap_const_lv1_0,
        m_axi_hash_RRESP => ap_const_lv2_0,
        m_axi_hash_BVALID => gmem_BVALID,
        m_axi_hash_BREADY => grp_sha256_final_fu_68_m_axi_hash_BREADY,
        m_axi_hash_BRESP => gmem_BRESP,
        m_axi_hash_BID => gmem_BID,
        m_axi_hash_BUSER => gmem_BUSER,
        hash_offset => output_read_reg_147);

    grp_sha256_update_fu_88 : component sha256_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_update_fu_88_ap_start,
        ap_done => grp_sha256_update_fu_88_ap_done,
        ap_idle => grp_sha256_update_fu_88_ap_idle,
        ap_ready => grp_sha256_update_fu_88_ap_ready,
        ctx_data_address0 => grp_sha256_update_fu_88_ctx_data_address0,
        ctx_data_ce0 => grp_sha256_update_fu_88_ctx_data_ce0,
        ctx_data_we0 => grp_sha256_update_fu_88_ctx_data_we0,
        ctx_data_d0 => grp_sha256_update_fu_88_ctx_data_d0,
        ctx_data_q0 => ctx_data_q0,
        ctx_data_address1 => grp_sha256_update_fu_88_ctx_data_address1,
        ctx_data_ce1 => grp_sha256_update_fu_88_ctx_data_ce1,
        ctx_data_q1 => ctx_data_q1,
        m_axi_data_AWVALID => grp_sha256_update_fu_88_m_axi_data_AWVALID,
        m_axi_data_AWREADY => ap_const_logic_0,
        m_axi_data_AWADDR => grp_sha256_update_fu_88_m_axi_data_AWADDR,
        m_axi_data_AWID => grp_sha256_update_fu_88_m_axi_data_AWID,
        m_axi_data_AWLEN => grp_sha256_update_fu_88_m_axi_data_AWLEN,
        m_axi_data_AWSIZE => grp_sha256_update_fu_88_m_axi_data_AWSIZE,
        m_axi_data_AWBURST => grp_sha256_update_fu_88_m_axi_data_AWBURST,
        m_axi_data_AWLOCK => grp_sha256_update_fu_88_m_axi_data_AWLOCK,
        m_axi_data_AWCACHE => grp_sha256_update_fu_88_m_axi_data_AWCACHE,
        m_axi_data_AWPROT => grp_sha256_update_fu_88_m_axi_data_AWPROT,
        m_axi_data_AWQOS => grp_sha256_update_fu_88_m_axi_data_AWQOS,
        m_axi_data_AWREGION => grp_sha256_update_fu_88_m_axi_data_AWREGION,
        m_axi_data_AWUSER => grp_sha256_update_fu_88_m_axi_data_AWUSER,
        m_axi_data_WVALID => grp_sha256_update_fu_88_m_axi_data_WVALID,
        m_axi_data_WREADY => ap_const_logic_0,
        m_axi_data_WDATA => grp_sha256_update_fu_88_m_axi_data_WDATA,
        m_axi_data_WSTRB => grp_sha256_update_fu_88_m_axi_data_WSTRB,
        m_axi_data_WLAST => grp_sha256_update_fu_88_m_axi_data_WLAST,
        m_axi_data_WID => grp_sha256_update_fu_88_m_axi_data_WID,
        m_axi_data_WUSER => grp_sha256_update_fu_88_m_axi_data_WUSER,
        m_axi_data_ARVALID => grp_sha256_update_fu_88_m_axi_data_ARVALID,
        m_axi_data_ARREADY => gmem_ARREADY,
        m_axi_data_ARADDR => grp_sha256_update_fu_88_m_axi_data_ARADDR,
        m_axi_data_ARID => grp_sha256_update_fu_88_m_axi_data_ARID,
        m_axi_data_ARLEN => grp_sha256_update_fu_88_m_axi_data_ARLEN,
        m_axi_data_ARSIZE => grp_sha256_update_fu_88_m_axi_data_ARSIZE,
        m_axi_data_ARBURST => grp_sha256_update_fu_88_m_axi_data_ARBURST,
        m_axi_data_ARLOCK => grp_sha256_update_fu_88_m_axi_data_ARLOCK,
        m_axi_data_ARCACHE => grp_sha256_update_fu_88_m_axi_data_ARCACHE,
        m_axi_data_ARPROT => grp_sha256_update_fu_88_m_axi_data_ARPROT,
        m_axi_data_ARQOS => grp_sha256_update_fu_88_m_axi_data_ARQOS,
        m_axi_data_ARREGION => grp_sha256_update_fu_88_m_axi_data_ARREGION,
        m_axi_data_ARUSER => grp_sha256_update_fu_88_m_axi_data_ARUSER,
        m_axi_data_RVALID => gmem_RVALID,
        m_axi_data_RREADY => grp_sha256_update_fu_88_m_axi_data_RREADY,
        m_axi_data_RDATA => gmem_RDATA,
        m_axi_data_RLAST => gmem_RLAST,
        m_axi_data_RID => gmem_RID,
        m_axi_data_RUSER => gmem_RUSER,
        m_axi_data_RRESP => gmem_RRESP,
        m_axi_data_BVALID => ap_const_logic_0,
        m_axi_data_BREADY => grp_sha256_update_fu_88_m_axi_data_BREADY,
        m_axi_data_BRESP => ap_const_lv2_0,
        m_axi_data_BID => ap_const_lv1_0,
        m_axi_data_BUSER => ap_const_lv1_0,
        data_offset => input_read_reg_152,
        len => tmp_reg_158,
        ap_return_0 => grp_sha256_update_fu_88_ap_return_0,
        ap_return_1 => grp_sha256_update_fu_88_ap_return_1,
        ap_return_2 => grp_sha256_update_fu_88_ap_return_2,
        ap_return_3 => grp_sha256_update_fu_88_ap_return_3,
        ap_return_4 => grp_sha256_update_fu_88_ap_return_4,
        ap_return_5 => grp_sha256_update_fu_88_ap_return_5,
        ap_return_6 => grp_sha256_update_fu_88_ap_return_6,
        ap_return_7 => grp_sha256_update_fu_88_ap_return_7,
        ap_return_8 => grp_sha256_update_fu_88_ap_return_8,
        ap_return_9 => grp_sha256_update_fu_88_ap_return_9);

    grp_calculateStringLengt_fu_99 : component calculateStringLengt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_calculateStringLengt_fu_99_ap_start,
        ap_done => grp_calculateStringLengt_fu_99_ap_done,
        ap_idle => grp_calculateStringLengt_fu_99_ap_idle,
        ap_ready => grp_calculateStringLengt_fu_99_ap_ready,
        m_axi_str_AWVALID => grp_calculateStringLengt_fu_99_m_axi_str_AWVALID,
        m_axi_str_AWREADY => ap_const_logic_0,
        m_axi_str_AWADDR => grp_calculateStringLengt_fu_99_m_axi_str_AWADDR,
        m_axi_str_AWID => grp_calculateStringLengt_fu_99_m_axi_str_AWID,
        m_axi_str_AWLEN => grp_calculateStringLengt_fu_99_m_axi_str_AWLEN,
        m_axi_str_AWSIZE => grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE,
        m_axi_str_AWBURST => grp_calculateStringLengt_fu_99_m_axi_str_AWBURST,
        m_axi_str_AWLOCK => grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK,
        m_axi_str_AWCACHE => grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE,
        m_axi_str_AWPROT => grp_calculateStringLengt_fu_99_m_axi_str_AWPROT,
        m_axi_str_AWQOS => grp_calculateStringLengt_fu_99_m_axi_str_AWQOS,
        m_axi_str_AWREGION => grp_calculateStringLengt_fu_99_m_axi_str_AWREGION,
        m_axi_str_AWUSER => grp_calculateStringLengt_fu_99_m_axi_str_AWUSER,
        m_axi_str_WVALID => grp_calculateStringLengt_fu_99_m_axi_str_WVALID,
        m_axi_str_WREADY => ap_const_logic_0,
        m_axi_str_WDATA => grp_calculateStringLengt_fu_99_m_axi_str_WDATA,
        m_axi_str_WSTRB => grp_calculateStringLengt_fu_99_m_axi_str_WSTRB,
        m_axi_str_WLAST => grp_calculateStringLengt_fu_99_m_axi_str_WLAST,
        m_axi_str_WID => grp_calculateStringLengt_fu_99_m_axi_str_WID,
        m_axi_str_WUSER => grp_calculateStringLengt_fu_99_m_axi_str_WUSER,
        m_axi_str_ARVALID => grp_calculateStringLengt_fu_99_m_axi_str_ARVALID,
        m_axi_str_ARREADY => gmem_ARREADY,
        m_axi_str_ARADDR => grp_calculateStringLengt_fu_99_m_axi_str_ARADDR,
        m_axi_str_ARID => grp_calculateStringLengt_fu_99_m_axi_str_ARID,
        m_axi_str_ARLEN => grp_calculateStringLengt_fu_99_m_axi_str_ARLEN,
        m_axi_str_ARSIZE => grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE,
        m_axi_str_ARBURST => grp_calculateStringLengt_fu_99_m_axi_str_ARBURST,
        m_axi_str_ARLOCK => grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK,
        m_axi_str_ARCACHE => grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE,
        m_axi_str_ARPROT => grp_calculateStringLengt_fu_99_m_axi_str_ARPROT,
        m_axi_str_ARQOS => grp_calculateStringLengt_fu_99_m_axi_str_ARQOS,
        m_axi_str_ARREGION => grp_calculateStringLengt_fu_99_m_axi_str_ARREGION,
        m_axi_str_ARUSER => grp_calculateStringLengt_fu_99_m_axi_str_ARUSER,
        m_axi_str_RVALID => gmem_RVALID,
        m_axi_str_RREADY => grp_calculateStringLengt_fu_99_m_axi_str_RREADY,
        m_axi_str_RDATA => gmem_RDATA,
        m_axi_str_RLAST => gmem_RLAST,
        m_axi_str_RID => gmem_RID,
        m_axi_str_RUSER => gmem_RUSER,
        m_axi_str_RRESP => gmem_RRESP,
        m_axi_str_BVALID => ap_const_logic_0,
        m_axi_str_BREADY => grp_calculateStringLengt_fu_99_m_axi_str_BREADY,
        m_axi_str_BRESP => ap_const_lv2_0,
        m_axi_str_BID => ap_const_lv1_0,
        m_axi_str_BUSER => ap_const_lv1_0,
        str_offset => input_read_reg_152,
        ap_return => grp_calculateStringLengt_fu_99_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_calculateStringLengt_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_calculateStringLengt_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_calculateStringLengt_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateStringLengt_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_calculateStringLengt_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_final_fu_68_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_final_fu_68_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_sha256_final_fu_68_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_final_fu_68_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_final_fu_68_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_update_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_update_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sha256_update_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_update_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_update_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha256_update_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ctx_bitlen_reg_163 <= grp_sha256_update_fu_88_ap_return_1;
                ctx_datalen_reg_168 <= grp_sha256_update_fu_88_ap_return_0;
                ctx_state_0_reg_173 <= grp_sha256_update_fu_88_ap_return_2;
                ctx_state_1_reg_178 <= grp_sha256_update_fu_88_ap_return_3;
                ctx_state_2_reg_183 <= grp_sha256_update_fu_88_ap_return_4;
                ctx_state_3_reg_188 <= grp_sha256_update_fu_88_ap_return_5;
                ctx_state_4_reg_193 <= grp_sha256_update_fu_88_ap_return_6;
                ctx_state_5_reg_198 <= grp_sha256_update_fu_88_ap_return_7;
                ctx_state_6_reg_203 <= grp_sha256_update_fu_88_ap_return_8;
                ctx_state_7_reg_208 <= grp_sha256_update_fu_88_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_read_reg_152 <= input_r;
                output_read_reg_147 <= output_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_calculateStringLengt_fu_99_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_158 <= grp_calculateStringLengt_fu_99_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_calculateStringLengt_fu_99_ap_done, ap_CS_fsm_state4, grp_sha256_update_fu_88_ap_done, grp_sha256_final_fu_68_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_calculateStringLengt_fu_99_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_sha256_update_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_sha256_final_fu_68_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_sha256_final_fu_68_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_sha256_final_fu_68_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_final_fu_68_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_sha256_final_fu_68_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ctx_data_address0_assign_proc : process(ap_CS_fsm_state4, grp_sha256_final_fu_68_ctx_data_address0, grp_sha256_update_fu_88_ctx_data_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_address0 <= grp_sha256_update_fu_88_ctx_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_address0 <= grp_sha256_final_fu_68_ctx_data_address0;
        else 
            ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;


    ctx_data_address1_assign_proc : process(ap_CS_fsm_state4, grp_sha256_final_fu_68_ctx_data_address1, grp_sha256_update_fu_88_ctx_data_address1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_address1 <= grp_sha256_update_fu_88_ctx_data_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_address1 <= grp_sha256_final_fu_68_ctx_data_address1;
        else 
            ctx_data_address1 <= "XXXXXX";
        end if; 
    end process;


    ctx_data_ce0_assign_proc : process(ap_CS_fsm_state4, grp_sha256_final_fu_68_ctx_data_ce0, grp_sha256_update_fu_88_ctx_data_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_ce0 <= grp_sha256_update_fu_88_ctx_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_ce0 <= grp_sha256_final_fu_68_ctx_data_ce0;
        else 
            ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_ce1_assign_proc : process(ap_CS_fsm_state4, grp_sha256_final_fu_68_ctx_data_ce1, grp_sha256_update_fu_88_ctx_data_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_ce1 <= grp_sha256_update_fu_88_ctx_data_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_ce1 <= grp_sha256_final_fu_68_ctx_data_ce1;
        else 
            ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_d0_assign_proc : process(ap_CS_fsm_state4, grp_sha256_final_fu_68_ctx_data_d0, grp_sha256_update_fu_88_ctx_data_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_d0 <= grp_sha256_update_fu_88_ctx_data_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_d0 <= grp_sha256_final_fu_68_ctx_data_d0;
        else 
            ctx_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_data_we0_assign_proc : process(ap_CS_fsm_state4, grp_sha256_final_fu_68_ctx_data_we0, grp_sha256_update_fu_88_ctx_data_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_data_we0 <= grp_sha256_update_fu_88_ctx_data_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_we0 <= grp_sha256_final_fu_68_ctx_data_we0;
        else 
            ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_we1_assign_proc : process(grp_sha256_final_fu_68_ctx_data_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_data_we1 <= grp_sha256_final_fu_68_ctx_data_we1;
        else 
            ctx_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARADDR, grp_calculateStringLengt_fu_99_m_axi_str_ARADDR, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= grp_calculateStringLengt_fu_99_m_axi_str_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARADDR <= grp_sha256_update_fu_88_m_axi_data_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARBURST, grp_calculateStringLengt_fu_99_m_axi_str_ARBURST, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARBURST <= grp_calculateStringLengt_fu_99_m_axi_str_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARBURST <= grp_sha256_update_fu_88_m_axi_data_ARBURST;
        else 
            gmem_ARBURST <= "XX";
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARCACHE, grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARCACHE <= grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARCACHE <= grp_sha256_update_fu_88_m_axi_data_ARCACHE;
        else 
            gmem_ARCACHE <= "XXXX";
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARID, grp_calculateStringLengt_fu_99_m_axi_str_ARID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARID <= grp_calculateStringLengt_fu_99_m_axi_str_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARID <= grp_sha256_update_fu_88_m_axi_data_ARID;
        else 
            gmem_ARID <= "X";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARLEN, grp_calculateStringLengt_fu_99_m_axi_str_ARLEN, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= grp_calculateStringLengt_fu_99_m_axi_str_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARLEN <= grp_sha256_update_fu_88_m_axi_data_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARLOCK, grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLOCK <= grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARLOCK <= grp_sha256_update_fu_88_m_axi_data_ARLOCK;
        else 
            gmem_ARLOCK <= "XX";
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARPROT, grp_calculateStringLengt_fu_99_m_axi_str_ARPROT, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARPROT <= grp_calculateStringLengt_fu_99_m_axi_str_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARPROT <= grp_sha256_update_fu_88_m_axi_data_ARPROT;
        else 
            gmem_ARPROT <= "XXX";
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARQOS, grp_calculateStringLengt_fu_99_m_axi_str_ARQOS, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARQOS <= grp_calculateStringLengt_fu_99_m_axi_str_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARQOS <= grp_sha256_update_fu_88_m_axi_data_ARQOS;
        else 
            gmem_ARQOS <= "XXXX";
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARREGION, grp_calculateStringLengt_fu_99_m_axi_str_ARREGION, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARREGION <= grp_calculateStringLengt_fu_99_m_axi_str_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARREGION <= grp_sha256_update_fu_88_m_axi_data_ARREGION;
        else 
            gmem_ARREGION <= "XXXX";
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARSIZE, grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARSIZE <= grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARSIZE <= grp_sha256_update_fu_88_m_axi_data_ARSIZE;
        else 
            gmem_ARSIZE <= "XXX";
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARUSER, grp_calculateStringLengt_fu_99_m_axi_str_ARUSER, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARUSER <= grp_calculateStringLengt_fu_99_m_axi_str_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARUSER <= grp_sha256_update_fu_88_m_axi_data_ARUSER;
        else 
            gmem_ARUSER <= "X";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_ARVALID, grp_calculateStringLengt_fu_99_m_axi_str_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= grp_calculateStringLengt_fu_99_m_axi_str_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARVALID <= grp_sha256_update_fu_88_m_axi_data_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(grp_sha256_final_fu_68_m_axi_hash_AWVALID, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_AWVALID <= grp_sha256_final_fu_68_m_axi_hash_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(grp_sha256_final_fu_68_m_axi_hash_BREADY, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_BREADY <= grp_sha256_final_fu_68_m_axi_hash_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_sha256_update_fu_88_m_axi_data_RREADY, grp_calculateStringLengt_fu_99_m_axi_str_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_RREADY <= grp_calculateStringLengt_fu_99_m_axi_str_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_RREADY <= grp_sha256_update_fu_88_m_axi_data_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(grp_sha256_final_fu_68_m_axi_hash_WVALID, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_WVALID <= grp_sha256_final_fu_68_m_axi_hash_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_calculateStringLengt_fu_99_ap_start <= grp_calculateStringLengt_fu_99_ap_start_reg;
    grp_sha256_final_fu_68_ap_start <= grp_sha256_final_fu_68_ap_start_reg;
    grp_sha256_update_fu_88_ap_start <= grp_sha256_update_fu_88_ap_start_reg;
end behav;
