

================================================================
== Vivado HLS Report for 'sha256_update'
================================================================
* Date:           Wed Nov 29 19:46:03 2023

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        sha256
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.750|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |    ?|    ?|  3 ~ 439 |          -|          -|     ?|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 11
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 11 
10 --> 11 
11 --> 8 

* FSM state operations: 

State 1 <SV = 0> <Delay = 8.75>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%ctx_datalen_0 = alloca i32"   --->   Operation 12 'alloca' 'ctx_datalen_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%ctx_bitlen_0 = alloca i64"   --->   Operation 13 'alloca' 'ctx_bitlen_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%ctx_state_7_0 = alloca i32"   --->   Operation 14 'alloca' 'ctx_state_7_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%ctx_state_6_0 = alloca i32"   --->   Operation 15 'alloca' 'ctx_state_6_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%ctx_state_5_0 = alloca i32"   --->   Operation 16 'alloca' 'ctx_state_5_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%ctx_state_4_0 = alloca i32"   --->   Operation 17 'alloca' 'ctx_state_4_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%ctx_state_3_0 = alloca i32"   --->   Operation 18 'alloca' 'ctx_state_3_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%ctx_state_2_0 = alloca i32"   --->   Operation 19 'alloca' 'ctx_state_2_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%ctx_state_1_0 = alloca i32"   --->   Operation 20 'alloca' 'ctx_state_1_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%ctx_state_0_0 = alloca i32"   --->   Operation 21 'alloca' 'ctx_state_0_0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%len_read = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %len)" [sha256/main.c:60]   --->   Operation 22 'read' 'len_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%data_offset_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %data_offset)" [sha256/main.c:60]   --->   Operation 23 'read' 'data_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%sext_ln63 = sext i32 %data_offset_read to i64" [sha256/main.c:63]   --->   Operation 24 'sext' 'sext_ln63' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%trunc_ln60 = trunc i64 %len_read to i32" [sha256/main.c:60]   --->   Operation 25 'trunc' 'trunc_ln60' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%data_addr = getelementptr i8* %data, i64 %sext_ln63" [sha256/main.c:63]   --->   Operation 26 'getelementptr' 'data_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [7/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 27 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_1 : Operation 28 [1/1] (1.76ns)   --->   "store i32 1779033703, i32* %ctx_state_0_0" [sha256/main.c:61]   --->   Operation 28 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 29 [1/1] (1.76ns)   --->   "store i32 -1150833019, i32* %ctx_state_1_0" [sha256/main.c:61]   --->   Operation 29 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 30 [1/1] (1.76ns)   --->   "store i32 1013904242, i32* %ctx_state_2_0" [sha256/main.c:61]   --->   Operation 30 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 31 [1/1] (1.76ns)   --->   "store i32 -1521486534, i32* %ctx_state_3_0" [sha256/main.c:61]   --->   Operation 31 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 32 [1/1] (1.76ns)   --->   "store i32 1359893119, i32* %ctx_state_4_0" [sha256/main.c:61]   --->   Operation 32 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 33 [1/1] (1.76ns)   --->   "store i32 -1694144372, i32* %ctx_state_5_0" [sha256/main.c:61]   --->   Operation 33 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 34 [1/1] (1.76ns)   --->   "store i32 528734635, i32* %ctx_state_6_0" [sha256/main.c:61]   --->   Operation 34 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 35 [1/1] (1.76ns)   --->   "store i32 1541459225, i32* %ctx_state_7_0" [sha256/main.c:61]   --->   Operation 35 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 36 [1/1] (1.76ns)   --->   "store i64 0, i64* %ctx_bitlen_0" [sha256/main.c:61]   --->   Operation 36 'store' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 37 [1/1] (1.76ns)   --->   "store i32 0, i32* %ctx_datalen_0" [sha256/main.c:61]   --->   Operation 37 'store' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 8.75>
ST_2 : Operation 38 [6/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 38 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 8.75>
ST_3 : Operation 39 [5/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 39 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 8.75>
ST_4 : Operation 40 [4/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 40 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 8.75>
ST_5 : Operation 41 [3/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 41 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 8.75>
ST_6 : Operation 42 [2/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 42 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 43 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %data, [6 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 5, [5 x i8]* @p_str4, [6 x i8]* @p_str5, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 43 'specinterface' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 44 [1/7] (8.75ns)   --->   "%p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %data_addr, i32 %trunc_ln60)" [sha256/main.c:63]   --->   Operation 44 'readreq' 'p_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 45 [1/1] (1.76ns)   --->   "br label %._crit_edge" [sha256/main.c:61]   --->   Operation 45 'br' <Predicate = true> <Delay = 1.76>

State 8 <SV = 7> <Delay = 8.75>
ST_8 : Operation 46 [1/1] (0.00ns)   --->   "%i_0 = phi i64 [ 0, %0 ], [ %i, %._crit_edge.backedge ]"   --->   Operation 46 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 47 [1/1] (2.77ns)   --->   "%icmp_ln61 = icmp eq i64 %i_0, %len_read" [sha256/main.c:61]   --->   Operation 47 'icmp' 'icmp_ln61' <Predicate = true> <Delay = 2.77> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 48 [1/1] (3.52ns)   --->   "%i = add i64 %i_0, 1" [sha256/main.c:61]   --->   Operation 48 'add' 'i' <Predicate = true> <Delay = 3.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 49 [1/1] (0.00ns)   --->   "br i1 %icmp_ln61, label %3, label %1" [sha256/main.c:61]   --->   Operation 49 'br' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 50 [1/1] (8.75ns)   --->   "%data_addr_read = call i8 @_ssdm_op_Read.m_axi.i8P(i8* %data_addr)" [sha256/main.c:63]   --->   Operation 50 'read' 'data_addr_read' <Predicate = (!icmp_ln61)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 51 [1/1] (0.00ns)   --->   "%ctx_datalen_0_load_1 = load i32* %ctx_datalen_0" [sha256/main.c:71]   --->   Operation 51 'load' 'ctx_datalen_0_load_1' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 52 [1/1] (0.00ns)   --->   "%ctx_bitlen_0_load_1 = load i64* %ctx_bitlen_0" [sha256/main.c:71]   --->   Operation 52 'load' 'ctx_bitlen_0_load_1' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 53 [1/1] (0.00ns)   --->   "%ctx_state_7_0_load = load i32* %ctx_state_7_0" [sha256/main.c:71]   --->   Operation 53 'load' 'ctx_state_7_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 54 [1/1] (0.00ns)   --->   "%ctx_state_6_0_load = load i32* %ctx_state_6_0" [sha256/main.c:71]   --->   Operation 54 'load' 'ctx_state_6_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 55 [1/1] (0.00ns)   --->   "%ctx_state_5_0_load = load i32* %ctx_state_5_0" [sha256/main.c:71]   --->   Operation 55 'load' 'ctx_state_5_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 56 [1/1] (0.00ns)   --->   "%ctx_state_4_0_load = load i32* %ctx_state_4_0" [sha256/main.c:71]   --->   Operation 56 'load' 'ctx_state_4_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 57 [1/1] (0.00ns)   --->   "%ctx_state_3_0_load = load i32* %ctx_state_3_0" [sha256/main.c:71]   --->   Operation 57 'load' 'ctx_state_3_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 58 [1/1] (0.00ns)   --->   "%ctx_state_2_0_load = load i32* %ctx_state_2_0" [sha256/main.c:71]   --->   Operation 58 'load' 'ctx_state_2_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 59 [1/1] (0.00ns)   --->   "%ctx_state_1_0_load = load i32* %ctx_state_1_0" [sha256/main.c:71]   --->   Operation 59 'load' 'ctx_state_1_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 60 [1/1] (0.00ns)   --->   "%ctx_state_0_0_load = load i32* %ctx_state_0_0" [sha256/main.c:71]   --->   Operation 60 'load' 'ctx_state_0_0_load' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 61 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %ctx_datalen_0_load_1, 0" [sha256/main.c:71]   --->   Operation 61 'insertvalue' 'mrv_s' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 62 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_s, i64 %ctx_bitlen_0_load_1, 1" [sha256/main.c:71]   --->   Operation 62 'insertvalue' 'mrv_1' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 63 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %ctx_state_0_0_load, 2" [sha256/main.c:71]   --->   Operation 63 'insertvalue' 'mrv_2' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 64 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %ctx_state_1_0_load, 3" [sha256/main.c:71]   --->   Operation 64 'insertvalue' 'mrv_3' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 65 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %ctx_state_2_0_load, 4" [sha256/main.c:71]   --->   Operation 65 'insertvalue' 'mrv_4' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 66 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %ctx_state_3_0_load, 5" [sha256/main.c:71]   --->   Operation 66 'insertvalue' 'mrv_5' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 67 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %ctx_state_4_0_load, 6" [sha256/main.c:71]   --->   Operation 67 'insertvalue' 'mrv_6' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 68 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %ctx_state_5_0_load, 7" [sha256/main.c:71]   --->   Operation 68 'insertvalue' 'mrv_7' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 69 [1/1] (0.00ns)   --->   "%mrv_8 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7, i32 %ctx_state_6_0_load, 8" [sha256/main.c:71]   --->   Operation 69 'insertvalue' 'mrv_8' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 70 [1/1] (0.00ns)   --->   "%mrv_9 = insertvalue { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_8, i32 %ctx_state_7_0_load, 9" [sha256/main.c:71]   --->   Operation 70 'insertvalue' 'mrv_9' <Predicate = (icmp_ln61)> <Delay = 0.00>
ST_8 : Operation 71 [1/1] (0.00ns)   --->   "ret { i32, i64, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_9" [sha256/main.c:71]   --->   Operation 71 'ret' <Predicate = (icmp_ln61)> <Delay = 0.00>

State 9 <SV = 8> <Delay = 5.02>
ST_9 : Operation 72 [1/1] (0.00ns)   --->   "%ctx_datalen_0_load = load i32* %ctx_datalen_0" [sha256/main.c:64]   --->   Operation 72 'load' 'ctx_datalen_0_load' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 73 [1/1] (0.00ns)   --->   "%zext_ln63 = zext i32 %ctx_datalen_0_load to i64" [sha256/main.c:63]   --->   Operation 73 'zext' 'zext_ln63' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 74 [1/1] (0.00ns)   --->   "%ctx_data_addr = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %zext_ln63" [sha256/main.c:63]   --->   Operation 74 'getelementptr' 'ctx_data_addr' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 75 [1/1] (2.32ns)   --->   "store i8 %data_addr_read, i8* %ctx_data_addr, align 1" [sha256/main.c:63]   --->   Operation 75 'store' <Predicate = true> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_9 : Operation 76 [1/1] (2.55ns)   --->   "%add_ln64 = add i32 %ctx_datalen_0_load, 1" [sha256/main.c:64]   --->   Operation 76 'add' 'add_ln64' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 77 [1/1] (2.47ns)   --->   "%icmp_ln65 = icmp eq i32 %add_ln64, 64" [sha256/main.c:65]   --->   Operation 77 'icmp' 'icmp_ln65' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 78 [1/1] (0.00ns)   --->   "br i1 %icmp_ln65, label %2, label %.._crit_edge.backedge_crit_edge" [sha256/main.c:65]   --->   Operation 78 'br' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 79 [1/1] (1.76ns)   --->   "store i32 %add_ln64, i32* %ctx_datalen_0" [sha256/main.c:65]   --->   Operation 79 'store' <Predicate = (!icmp_ln65)> <Delay = 1.76>
ST_9 : Operation 80 [1/1] (0.00ns)   --->   "br label %._crit_edge.backedge" [sha256/main.c:65]   --->   Operation 80 'br' <Predicate = (!icmp_ln65)> <Delay = 0.00>

State 10 <SV = 9> <Delay = 1.76>
ST_10 : Operation 81 [1/1] (0.00ns)   --->   "%ctx_state_7_0_load_1 = load i32* %ctx_state_7_0" [sha256/main.c:66]   --->   Operation 81 'load' 'ctx_state_7_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 82 [1/1] (0.00ns)   --->   "%ctx_state_6_0_load_1 = load i32* %ctx_state_6_0" [sha256/main.c:66]   --->   Operation 82 'load' 'ctx_state_6_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 83 [1/1] (0.00ns)   --->   "%ctx_state_5_0_load_1 = load i32* %ctx_state_5_0" [sha256/main.c:66]   --->   Operation 83 'load' 'ctx_state_5_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 84 [1/1] (0.00ns)   --->   "%ctx_state_4_0_load_1 = load i32* %ctx_state_4_0" [sha256/main.c:66]   --->   Operation 84 'load' 'ctx_state_4_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 85 [1/1] (0.00ns)   --->   "%ctx_state_3_0_load_1 = load i32* %ctx_state_3_0" [sha256/main.c:66]   --->   Operation 85 'load' 'ctx_state_3_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 86 [1/1] (0.00ns)   --->   "%ctx_state_2_0_load_1 = load i32* %ctx_state_2_0" [sha256/main.c:66]   --->   Operation 86 'load' 'ctx_state_2_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 87 [1/1] (0.00ns)   --->   "%ctx_state_1_0_load_1 = load i32* %ctx_state_1_0" [sha256/main.c:66]   --->   Operation 87 'load' 'ctx_state_1_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 88 [1/1] (0.00ns)   --->   "%ctx_state_0_0_load_1 = load i32* %ctx_state_0_0" [sha256/main.c:66]   --->   Operation 88 'load' 'ctx_state_0_0_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 89 [2/2] (0.00ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state_0_0_load_1, i32 %ctx_state_1_0_load_1, i32 %ctx_state_2_0_load_1, i32 %ctx_state_3_0_load_1, i32 %ctx_state_4_0_load_1, i32 %ctx_state_5_0_load_1, i32 %ctx_state_6_0_load_1, i32 %ctx_state_7_0_load_1, [64 x i8]* %ctx_data)" [sha256/main.c:66]   --->   Operation 89 'call' 'call_ret' <Predicate = true> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_10 : Operation 90 [1/1] (1.76ns)   --->   "store i32 0, i32* %ctx_datalen_0" [sha256/main.c:69]   --->   Operation 90 'store' <Predicate = true> <Delay = 1.76>

State 11 <SV = 10> <Delay = 5.28>
ST_11 : Operation 91 [1/1] (0.00ns)   --->   "%ctx_bitlen_0_load = load i64* %ctx_bitlen_0" [sha256/main.c:67]   --->   Operation 91 'load' 'ctx_bitlen_0_load' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 92 [1/2] (2.55ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state_0_0_load_1, i32 %ctx_state_1_0_load_1, i32 %ctx_state_2_0_load_1, i32 %ctx_state_3_0_load_1, i32 %ctx_state_4_0_load_1, i32 %ctx_state_5_0_load_1, i32 %ctx_state_6_0_load_1, i32 %ctx_state_7_0_load_1, [64 x i8]* %ctx_data)" [sha256/main.c:66]   --->   Operation 92 'call' 'call_ret' <Predicate = (icmp_ln65)> <Delay = 2.55> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_11 : Operation 93 [1/1] (0.00ns)   --->   "%ctx_state_0_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0" [sha256/main.c:66]   --->   Operation 93 'extractvalue' 'ctx_state_0_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 94 [1/1] (0.00ns)   --->   "%ctx_state_1_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1" [sha256/main.c:66]   --->   Operation 94 'extractvalue' 'ctx_state_1_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 95 [1/1] (0.00ns)   --->   "%ctx_state_2_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2" [sha256/main.c:66]   --->   Operation 95 'extractvalue' 'ctx_state_2_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 96 [1/1] (0.00ns)   --->   "%ctx_state_3_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3" [sha256/main.c:66]   --->   Operation 96 'extractvalue' 'ctx_state_3_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 97 [1/1] (0.00ns)   --->   "%ctx_state_4_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4" [sha256/main.c:66]   --->   Operation 97 'extractvalue' 'ctx_state_4_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 98 [1/1] (0.00ns)   --->   "%ctx_state_5_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5" [sha256/main.c:66]   --->   Operation 98 'extractvalue' 'ctx_state_5_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 99 [1/1] (0.00ns)   --->   "%ctx_state_6_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6" [sha256/main.c:66]   --->   Operation 99 'extractvalue' 'ctx_state_6_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 100 [1/1] (0.00ns)   --->   "%ctx_state_7_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7" [sha256/main.c:66]   --->   Operation 100 'extractvalue' 'ctx_state_7_ret' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 101 [1/1] (3.52ns)   --->   "%add_ln67 = add i64 %ctx_bitlen_0_load, 512" [sha256/main.c:67]   --->   Operation 101 'add' 'add_ln67' <Predicate = (icmp_ln65)> <Delay = 3.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 102 [1/1] (1.76ns)   --->   "store i32 %ctx_state_0_ret, i32* %ctx_state_0_0" [sha256/main.c:69]   --->   Operation 102 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 103 [1/1] (1.76ns)   --->   "store i32 %ctx_state_1_ret, i32* %ctx_state_1_0" [sha256/main.c:69]   --->   Operation 103 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 104 [1/1] (1.76ns)   --->   "store i32 %ctx_state_2_ret, i32* %ctx_state_2_0" [sha256/main.c:69]   --->   Operation 104 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 105 [1/1] (1.76ns)   --->   "store i32 %ctx_state_3_ret, i32* %ctx_state_3_0" [sha256/main.c:69]   --->   Operation 105 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 106 [1/1] (1.76ns)   --->   "store i32 %ctx_state_4_ret, i32* %ctx_state_4_0" [sha256/main.c:69]   --->   Operation 106 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 107 [1/1] (1.76ns)   --->   "store i32 %ctx_state_5_ret, i32* %ctx_state_5_0" [sha256/main.c:69]   --->   Operation 107 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 108 [1/1] (1.76ns)   --->   "store i32 %ctx_state_6_ret, i32* %ctx_state_6_0" [sha256/main.c:69]   --->   Operation 108 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 109 [1/1] (1.76ns)   --->   "store i32 %ctx_state_7_ret, i32* %ctx_state_7_0" [sha256/main.c:69]   --->   Operation 109 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 110 [1/1] (1.76ns)   --->   "store i64 %add_ln67, i64* %ctx_bitlen_0" [sha256/main.c:69]   --->   Operation 110 'store' <Predicate = (icmp_ln65)> <Delay = 1.76>
ST_11 : Operation 111 [1/1] (0.00ns)   --->   "br label %._crit_edge.backedge" [sha256/main.c:69]   --->   Operation 111 'br' <Predicate = (icmp_ln65)> <Delay = 0.00>
ST_11 : Operation 112 [1/1] (0.00ns)   --->   "br label %._crit_edge"   --->   Operation 112 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 8.75ns
The critical path consists of the following:
	wire read on port 'len' (sha256/main.c:60) [17]  (0 ns)
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 2>: 8.75ns
The critical path consists of the following:
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 3>: 8.75ns
The critical path consists of the following:
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 4>: 8.75ns
The critical path consists of the following:
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 5>: 8.75ns
The critical path consists of the following:
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 6>: 8.75ns
The critical path consists of the following:
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 7>: 8.75ns
The critical path consists of the following:
	bus request on port 'data' (sha256/main.c:63) [22]  (8.75 ns)

 <State 8>: 8.75ns
The critical path consists of the following:
	bus read on port 'data' (sha256/main.c:63) [41]  (8.75 ns)

 <State 9>: 5.03ns
The critical path consists of the following:
	'load' operation ('ctx_datalen_0_load', sha256/main.c:64) on local variable 'ctx_datalen_0' [40]  (0 ns)
	'add' operation ('add_ln64', sha256/main.c:64) [45]  (2.55 ns)
	'icmp' operation ('icmp_ln65', sha256/main.c:65) [46]  (2.47 ns)

 <State 10>: 1.77ns
The critical path consists of the following:
	'store' operation ('store_ln69', sha256/main.c:69) of constant 0 on local variable 'ctx_datalen_0' [80]  (1.77 ns)

 <State 11>: 5.29ns
The critical path consists of the following:
	'load' operation ('ctx_bitlen_0_load', sha256/main.c:67) on local variable 'ctx_bitlen_0' [52]  (0 ns)
	'add' operation ('add_ln67', sha256/main.c:67) [70]  (3.52 ns)
	'store' operation ('store_ln69', sha256/main.c:69) of variable 'add_ln67', sha256/main.c:67 on local variable 'ctx_bitlen_0' [79]  (1.77 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
