// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_final (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_data_address0,
        ctx_data_ce0,
        ctx_data_we0,
        ctx_data_d0,
        ctx_data_q0,
        ctx_data_address1,
        ctx_data_ce1,
        ctx_data_we1,
        ctx_data_d1,
        ctx_data_q1,
        ctx_datalen_read,
        ctx_bitlen_read,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        m_axi_hash_AWVALID,
        m_axi_hash_AWREADY,
        m_axi_hash_AWADDR,
        m_axi_hash_AWID,
        m_axi_hash_AWLEN,
        m_axi_hash_AWSIZE,
        m_axi_hash_AWBURST,
        m_axi_hash_AWLOCK,
        m_axi_hash_AWCACHE,
        m_axi_hash_AWPROT,
        m_axi_hash_AWQOS,
        m_axi_hash_AWREGION,
        m_axi_hash_AWUSER,
        m_axi_hash_WVALID,
        m_axi_hash_WREADY,
        m_axi_hash_WDATA,
        m_axi_hash_WSTRB,
        m_axi_hash_WLAST,
        m_axi_hash_WID,
        m_axi_hash_WUSER,
        m_axi_hash_ARVALID,
        m_axi_hash_ARREADY,
        m_axi_hash_ARADDR,
        m_axi_hash_ARID,
        m_axi_hash_ARLEN,
        m_axi_hash_ARSIZE,
        m_axi_hash_ARBURST,
        m_axi_hash_ARLOCK,
        m_axi_hash_ARCACHE,
        m_axi_hash_ARPROT,
        m_axi_hash_ARQOS,
        m_axi_hash_ARREGION,
        m_axi_hash_ARUSER,
        m_axi_hash_RVALID,
        m_axi_hash_RREADY,
        m_axi_hash_RDATA,
        m_axi_hash_RLAST,
        m_axi_hash_RID,
        m_axi_hash_RUSER,
        m_axi_hash_RRESP,
        m_axi_hash_BVALID,
        m_axi_hash_BREADY,
        m_axi_hash_BRESP,
        m_axi_hash_BID,
        m_axi_hash_BUSER,
        hash_offset
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_pp0_stage0 = 19'd1024;
parameter    ap_ST_fsm_pp0_stage1 = 19'd2048;
parameter    ap_ST_fsm_pp0_stage2 = 19'd4096;
parameter    ap_ST_fsm_pp0_stage3 = 19'd8192;
parameter    ap_ST_fsm_pp0_stage4 = 19'd16384;
parameter    ap_ST_fsm_pp0_stage5 = 19'd32768;
parameter    ap_ST_fsm_pp0_stage6 = 19'd65536;
parameter    ap_ST_fsm_pp0_stage7 = 19'd131072;
parameter    ap_ST_fsm_state26 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] ctx_data_address0;
output   ctx_data_ce0;
output   ctx_data_we0;
output  [7:0] ctx_data_d0;
input  [7:0] ctx_data_q0;
output  [5:0] ctx_data_address1;
output   ctx_data_ce1;
output   ctx_data_we1;
output  [7:0] ctx_data_d1;
input  [7:0] ctx_data_q1;
input  [31:0] ctx_datalen_read;
input  [63:0] ctx_bitlen_read;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
output   m_axi_hash_AWVALID;
input   m_axi_hash_AWREADY;
output  [31:0] m_axi_hash_AWADDR;
output  [0:0] m_axi_hash_AWID;
output  [31:0] m_axi_hash_AWLEN;
output  [2:0] m_axi_hash_AWSIZE;
output  [1:0] m_axi_hash_AWBURST;
output  [1:0] m_axi_hash_AWLOCK;
output  [3:0] m_axi_hash_AWCACHE;
output  [2:0] m_axi_hash_AWPROT;
output  [3:0] m_axi_hash_AWQOS;
output  [3:0] m_axi_hash_AWREGION;
output  [0:0] m_axi_hash_AWUSER;
output   m_axi_hash_WVALID;
input   m_axi_hash_WREADY;
output  [7:0] m_axi_hash_WDATA;
output  [0:0] m_axi_hash_WSTRB;
output   m_axi_hash_WLAST;
output  [0:0] m_axi_hash_WID;
output  [0:0] m_axi_hash_WUSER;
output   m_axi_hash_ARVALID;
input   m_axi_hash_ARREADY;
output  [31:0] m_axi_hash_ARADDR;
output  [0:0] m_axi_hash_ARID;
output  [31:0] m_axi_hash_ARLEN;
output  [2:0] m_axi_hash_ARSIZE;
output  [1:0] m_axi_hash_ARBURST;
output  [1:0] m_axi_hash_ARLOCK;
output  [3:0] m_axi_hash_ARCACHE;
output  [2:0] m_axi_hash_ARPROT;
output  [3:0] m_axi_hash_ARQOS;
output  [3:0] m_axi_hash_ARREGION;
output  [0:0] m_axi_hash_ARUSER;
input   m_axi_hash_RVALID;
output   m_axi_hash_RREADY;
input  [7:0] m_axi_hash_RDATA;
input   m_axi_hash_RLAST;
input  [0:0] m_axi_hash_RID;
input  [0:0] m_axi_hash_RUSER;
input  [1:0] m_axi_hash_RRESP;
input   m_axi_hash_BVALID;
output   m_axi_hash_BREADY;
input  [1:0] m_axi_hash_BRESP;
input  [0:0] m_axi_hash_BID;
input  [0:0] m_axi_hash_BUSER;
input  [31:0] hash_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ctx_data_address0;
reg ctx_data_ce0;
reg ctx_data_we0;
reg[7:0] ctx_data_d0;
reg[5:0] ctx_data_address1;
reg ctx_data_ce1;
reg ctx_data_we1;
reg[7:0] ctx_data_d1;
reg m_axi_hash_AWVALID;
reg[31:0] m_axi_hash_AWADDR;
reg m_axi_hash_WVALID;
reg[7:0] m_axi_hash_WDATA;
reg m_axi_hash_BREADY;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    hash_blk_n_AW;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln101_reg_1368;
reg    hash_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    hash_blk_n_B;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
reg   [0:0] icmp_ln101_reg_1368_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg   [2:0] i_2_reg_563;
reg   [31:0] reg_631;
wire    ap_CS_fsm_state3;
wire    grp_sha256_transform_fu_575_ap_ready;
wire    grp_sha256_transform_fu_575_ap_done;
reg   [0:0] icmp_ln76_reg_1296;
reg    ap_block_state3_on_subcall_done;
wire    ap_CS_fsm_state10;
reg   [31:0] reg_636;
reg   [31:0] reg_641;
reg   [31:0] reg_646;
reg   [31:0] reg_651;
reg   [31:0] reg_656;
reg   [31:0] reg_661;
reg   [31:0] reg_666;
wire   [0:0] icmp_ln76_fu_671_p2;
wire   [31:0] i_4_fu_682_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln90_fu_825_p2;
reg   [7:0] add_ln90_reg_1308;
reg   [7:0] trunc_ln1_reg_1313;
reg   [7:0] trunc_ln2_reg_1318;
reg   [7:0] trunc_ln3_reg_1323;
reg   [7:0] trunc_ln4_reg_1328;
reg   [7:0] trunc_ln5_reg_1333;
reg   [7:0] trunc_ln6_reg_1338;
reg   [7:0] trunc_ln7_reg_1343;
wire   [31:0] i_fu_901_p2;
wire    ap_CS_fsm_state4;
wire  signed [32:0] sext_ln101_fu_918_p1;
reg  signed [32:0] sext_ln101_reg_1356;
wire   [0:0] icmp_ln101_fu_921_p2;
wire    ap_block_state11_pp0_stage0_iter0;
reg    ap_block_state19_pp0_stage0_iter1;
reg    ap_block_state19_io;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] i_5_fu_927_p2;
reg   [2:0] i_5_reg_1372;
wire   [31:0] zext_ln103_fu_951_p1;
reg   [31:0] zext_ln103_reg_1377;
wire   [7:0] trunc_ln103_1_fu_961_p1;
reg   [7:0] trunc_ln103_1_reg_1388;
reg   [31:0] hash_addr_reg_1393;
wire   [7:0] trunc_ln104_fu_989_p1;
reg   [7:0] trunc_ln104_reg_1399;
wire    ap_block_state12_pp0_stage1_iter0;
reg    ap_block_state12_io;
reg    ap_block_state20_pp0_stage1_iter1;
reg    ap_block_state20_io;
reg    ap_block_pp0_stage1_11001;
wire  signed [2:0] xor_ln104_fu_993_p2;
reg  signed [2:0] xor_ln104_reg_1404;
reg   [31:0] hash_addr_1_reg_1410;
wire   [7:0] trunc_ln105_fu_1023_p1;
reg   [7:0] trunc_ln105_reg_1416;
wire    ap_block_state13_pp0_stage2_iter0;
reg    ap_block_state13_io;
reg    ap_block_state21_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire  signed [3:0] or_ln_fu_1027_p3;
reg  signed [3:0] or_ln_reg_1421;
reg   [31:0] hash_addr_2_reg_1426;
wire   [7:0] trunc_ln106_fu_1059_p1;
reg   [7:0] trunc_ln106_reg_1432;
wire    ap_block_state14_pp0_stage3_iter0;
reg    ap_block_state14_io;
reg    ap_block_state22_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] hash_addr_3_reg_1437;
wire   [7:0] trunc_ln107_fu_1090_p1;
reg   [7:0] trunc_ln107_reg_1443;
wire    ap_block_state15_pp0_stage4_iter0;
reg    ap_block_state15_io;
reg    ap_block_state23_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg   [31:0] hash_addr_4_reg_1448;
wire   [7:0] trunc_ln108_fu_1130_p1;
reg   [7:0] trunc_ln108_reg_1454;
wire    ap_block_state16_pp0_stage5_iter0;
reg    ap_block_state16_io;
reg    ap_block_state24_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg   [31:0] hash_addr_5_reg_1459;
reg   [31:0] hash_addr_6_reg_1465;
reg   [31:0] hash_addr_7_reg_1471;
wire   [7:0] trunc_ln109_fu_1208_p1;
reg   [7:0] trunc_ln109_reg_1477;
wire    ap_block_state17_pp0_stage6_iter0;
reg    ap_block_state17_io;
reg    ap_block_state25_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
wire   [7:0] trunc_ln110_fu_1217_p1;
reg   [7:0] trunc_ln110_reg_1482;
reg    ap_block_state18_pp0_stage7_iter0;
reg    ap_block_state18_io;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    grp_sha256_transform_fu_575_ap_start;
wire    grp_sha256_transform_fu_575_ap_idle;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_0_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_1_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_2_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_3_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_4_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_5_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_6_read;
reg   [31:0] grp_sha256_transform_fu_575_ctx_state_7_read;
wire   [5:0] grp_sha256_transform_fu_575_data_address0;
wire    grp_sha256_transform_fu_575_data_ce0;
wire   [5:0] grp_sha256_transform_fu_575_data_address1;
wire    grp_sha256_transform_fu_575_data_ce1;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_0;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_1;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_2;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_3;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_4;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_5;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_6;
wire   [31:0] grp_sha256_transform_fu_575_ap_return_7;
reg   [31:0] i_1_in_reg_465;
wire   [0:0] icmp_ln83_fu_698_p2;
reg   [31:0] i_0_in_reg_474;
wire   [0:0] icmp_ln78_fu_907_p2;
reg   [31:0] ctx_state_0_0_reg_483;
reg   [31:0] ctx_state_1_0_reg_493;
reg   [31:0] ctx_state_2_0_reg_503;
reg   [31:0] ctx_state_3_0_reg_513;
reg   [31:0] ctx_state_4_0_reg_523;
reg   [31:0] ctx_state_5_0_reg_533;
reg   [31:0] ctx_state_6_0_reg_543;
reg   [31:0] ctx_state_7_0_reg_553;
reg   [2:0] ap_phi_mux_i_2_phi_fu_567_p4;
reg    grp_sha256_transform_fu_575_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln77_fu_677_p1;
wire   [63:0] zext_ln84_fu_704_p1;
wire   [63:0] zext_ln79_fu_913_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln103_fu_974_p1;
wire  signed [63:0] sext_ln104_fu_1008_p1;
wire  signed [63:0] sext_ln105_fu_1044_p1;
wire  signed [63:0] sext_ln106_1_fu_1075_p1;
wire  signed [63:0] sext_ln107_fu_1111_p1;
wire  signed [63:0] sext_ln108_fu_1149_p1;
wire  signed [63:0] sext_ln109_1_fu_1171_p1;
wire  signed [63:0] sext_ln110_1_fu_1193_p1;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage4_01001;
reg    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage6_01001;
reg    ap_block_pp0_stage7_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [25:0] tmp_1_fu_688_p4;
wire   [31:0] shl_ln89_fu_709_p2;
wire   [4:0] trunc_ln89_2_fu_721_p1;
wire   [12:0] trunc_ln89_6_fu_735_p1;
wire   [20:0] trunc_ln89_8_fu_749_p1;
wire   [63:0] zext_ln89_fu_714_p1;
wire   [55:0] zext_ln89_3_fu_780_p1;
wire   [55:0] trunc_ln89_12_fu_777_p1;
wire   [47:0] zext_ln89_2_fu_773_p1;
wire   [47:0] trunc_ln89_11_fu_770_p1;
wire   [39:0] zext_ln89_1_fu_766_p1;
wire   [39:0] trunc_ln89_10_fu_763_p1;
wire   [31:0] trunc_ln89_9_fu_760_p1;
wire   [23:0] trunc_ln89_5_fu_752_p3;
wire   [23:0] trunc_ln89_7_fu_746_p1;
wire   [15:0] trunc_ln89_3_fu_738_p3;
wire   [15:0] trunc_ln89_4_fu_732_p1;
wire   [7:0] trunc_ln89_fu_718_p1;
wire   [7:0] trunc_ln89_1_fu_724_p3;
wire   [15:0] add_ln90_6_fu_819_p2;
wire   [23:0] add_ln90_5_fu_813_p2;
wire   [31:0] add_ln90_4_fu_807_p2;
wire   [39:0] add_ln90_3_fu_801_p2;
wire   [47:0] add_ln90_2_fu_795_p2;
wire   [55:0] add_ln90_1_fu_789_p2;
wire   [63:0] add_ln89_fu_784_p2;
wire   [1:0] trunc_ln103_fu_933_p1;
wire   [4:0] shl_ln1_fu_937_p3;
wire   [4:0] sub_ln103_fu_945_p2;
wire   [31:0] lshr_ln103_fu_955_p2;
wire   [32:0] zext_ln103_1_fu_965_p1;
wire   [32:0] add_ln103_fu_969_p2;
wire   [31:0] lshr_ln104_fu_984_p2;
wire   [32:0] zext_ln104_fu_999_p1;
wire   [32:0] add_ln104_fu_1003_p2;
wire   [31:0] lshr_ln105_fu_1018_p2;
wire   [32:0] zext_ln105_fu_1035_p1;
wire   [32:0] add_ln105_fu_1039_p2;
wire   [31:0] lshr_ln106_fu_1054_p2;
wire  signed [3:0] sext_ln106_fu_1063_p1;
wire   [32:0] zext_ln106_fu_1066_p1;
wire   [32:0] add_ln106_fu_1070_p2;
wire   [31:0] lshr_ln107_fu_1085_p2;
wire   [4:0] or_ln3_fu_1094_p3;
wire   [32:0] zext_ln107_fu_1102_p1;
wire   [32:0] add_ln107_fu_1106_p2;
wire   [31:0] lshr_ln108_fu_1125_p2;
wire   [4:0] zext_ln101_fu_1121_p1;
wire   [4:0] add_ln108_fu_1134_p2;
wire   [32:0] zext_ln108_fu_1140_p1;
wire   [32:0] add_ln108_1_fu_1144_p2;
wire  signed [4:0] sext_ln109_fu_1159_p1;
wire   [32:0] zext_ln109_fu_1162_p1;
wire   [32:0] add_ln109_fu_1166_p2;
wire  signed [4:0] sext_ln110_fu_1181_p1;
wire   [32:0] zext_ln110_fu_1184_p1;
wire   [32:0] add_ln110_fu_1188_p2;
wire   [31:0] lshr_ln109_fu_1203_p2;
wire   [31:0] lshr_ln110_fu_1212_p2;
wire    ap_CS_fsm_state26;
reg   [18:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_656;
reg    ap_condition_660;
reg    ap_condition_669;
reg    ap_condition_682;
reg    ap_condition_695;
reg    ap_condition_708;
reg    ap_condition_658;
reg    ap_condition_582;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_sha256_transform_fu_575_ap_start_reg = 1'b0;
end

sha256_transform grp_sha256_transform_fu_575(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_575_ap_start),
    .ap_done(grp_sha256_transform_fu_575_ap_done),
    .ap_idle(grp_sha256_transform_fu_575_ap_idle),
    .ap_ready(grp_sha256_transform_fu_575_ap_ready),
    .ctx_state_0_read(grp_sha256_transform_fu_575_ctx_state_0_read),
    .ctx_state_1_read(grp_sha256_transform_fu_575_ctx_state_1_read),
    .ctx_state_2_read(grp_sha256_transform_fu_575_ctx_state_2_read),
    .ctx_state_3_read(grp_sha256_transform_fu_575_ctx_state_3_read),
    .ctx_state_4_read(grp_sha256_transform_fu_575_ctx_state_4_read),
    .ctx_state_5_read(grp_sha256_transform_fu_575_ctx_state_5_read),
    .ctx_state_6_read(grp_sha256_transform_fu_575_ctx_state_6_read),
    .ctx_state_7_read(grp_sha256_transform_fu_575_ctx_state_7_read),
    .data_address0(grp_sha256_transform_fu_575_data_address0),
    .data_ce0(grp_sha256_transform_fu_575_data_ce0),
    .data_q0(ctx_data_q0),
    .data_address1(grp_sha256_transform_fu_575_data_address1),
    .data_ce1(grp_sha256_transform_fu_575_data_ce1),
    .data_q1(ctx_data_q1),
    .ap_return_0(grp_sha256_transform_fu_575_ap_return_0),
    .ap_return_1(grp_sha256_transform_fu_575_ap_return_1),
    .ap_return_2(grp_sha256_transform_fu_575_ap_return_2),
    .ap_return_3(grp_sha256_transform_fu_575_ap_return_3),
    .ap_return_4(grp_sha256_transform_fu_575_ap_return_4),
    .ap_return_5(grp_sha256_transform_fu_575_ap_return_5),
    .ap_return_6(grp_sha256_transform_fu_575_ap_return_6),
    .ap_return_7(grp_sha256_transform_fu_575_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_sha256_transform_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_sha256_transform_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_575_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_698_p2 == 1'd0)))) begin
            grp_sha256_transform_fu_575_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_575_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_575_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_0_0_reg_483 <= p_read2;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_0_0_reg_483 <= grp_sha256_transform_fu_575_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_1_0_reg_493 <= p_read3;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_1_0_reg_493 <= grp_sha256_transform_fu_575_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_2_0_reg_503 <= p_read4;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_2_0_reg_503 <= grp_sha256_transform_fu_575_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_3_0_reg_513 <= p_read5;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_3_0_reg_513 <= grp_sha256_transform_fu_575_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_4_0_reg_523 <= p_read6;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_4_0_reg_523 <= grp_sha256_transform_fu_575_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_5_0_reg_533 <= p_read7;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_5_0_reg_533 <= grp_sha256_transform_fu_575_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_6_0_reg_543 <= p_read8;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_6_0_reg_543 <= grp_sha256_transform_fu_575_ap_return_6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_state_7_0_reg_553 <= p_read9;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        ctx_state_7_0_reg_553 <= grp_sha256_transform_fu_575_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_671_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_in_reg_474 <= ctx_datalen_read;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln78_fu_907_p2 == 1'd0))) begin
        i_0_in_reg_474 <= i_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln76_fu_671_p2 == 1'd0))) begin
        i_1_in_reg_465 <= ctx_datalen_read;
    end else if (((icmp_ln83_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_in_reg_465 <= i_4_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0))) begin
        i_2_reg_563 <= i_5_reg_1372;
    end else if (((grp_sha256_transform_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_reg_563 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln90_reg_1308 <= add_ln90_fu_825_p2;
        trunc_ln1_reg_1313 <= {{add_ln90_6_fu_819_p2[15:8]}};
        trunc_ln2_reg_1318 <= {{add_ln90_5_fu_813_p2[23:16]}};
        trunc_ln3_reg_1323 <= {{add_ln90_4_fu_807_p2[31:24]}};
        trunc_ln4_reg_1328 <= {{add_ln90_3_fu_801_p2[39:32]}};
        trunc_ln5_reg_1333 <= {{add_ln90_2_fu_795_p2[47:40]}};
        trunc_ln6_reg_1338 <= {{add_ln90_1_fu_789_p2[55:48]}};
        trunc_ln7_reg_1343 <= {{add_ln89_fu_784_p2[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        hash_addr_1_reg_1410 <= sext_ln104_fu_1008_p1;
        trunc_ln104_reg_1399 <= trunc_ln104_fu_989_p1;
        xor_ln104_reg_1404 <= xor_ln104_fu_993_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln101_reg_1368 == 1'd0))) begin
        hash_addr_2_reg_1426 <= sext_ln105_fu_1044_p1;
        or_ln_reg_1421[2 : 0] <= or_ln_fu_1027_p3[2 : 0];
        trunc_ln105_reg_1416 <= trunc_ln105_fu_1023_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln101_reg_1368 == 1'd0))) begin
        hash_addr_3_reg_1437 <= sext_ln106_1_fu_1075_p1;
        trunc_ln106_reg_1432 <= trunc_ln106_fu_1059_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln101_reg_1368 == 1'd0))) begin
        hash_addr_4_reg_1448 <= sext_ln107_fu_1111_p1;
        trunc_ln107_reg_1443 <= trunc_ln107_fu_1090_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln101_reg_1368 == 1'd0))) begin
        hash_addr_5_reg_1459 <= sext_ln108_fu_1149_p1;
        hash_addr_6_reg_1465 <= sext_ln109_1_fu_1171_p1;
        hash_addr_7_reg_1471 <= sext_ln110_1_fu_1193_p1;
        trunc_ln108_reg_1454 <= trunc_ln108_fu_1130_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_fu_921_p2 == 1'd0))) begin
        hash_addr_reg_1393 <= sext_ln103_fu_974_p1;
        trunc_ln103_1_reg_1388 <= trunc_ln103_1_fu_961_p1;
        zext_ln103_reg_1377[4 : 3] <= zext_ln103_fu_951_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_5_reg_1372 <= i_5_fu_927_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln101_reg_1368 <= icmp_ln101_fu_921_p2;
        icmp_ln101_reg_1368_pp0_iter1_reg <= icmp_ln101_reg_1368;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln76_reg_1296 <= icmp_ln76_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_sha256_transform_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0)))) begin
        reg_631 <= grp_sha256_transform_fu_575_ap_return_0;
        reg_636 <= grp_sha256_transform_fu_575_ap_return_1;
        reg_641 <= grp_sha256_transform_fu_575_ap_return_2;
        reg_646 <= grp_sha256_transform_fu_575_ap_return_3;
        reg_651 <= grp_sha256_transform_fu_575_ap_return_4;
        reg_656 <= grp_sha256_transform_fu_575_ap_return_5;
        reg_661 <= grp_sha256_transform_fu_575_ap_return_6;
        reg_666 <= grp_sha256_transform_fu_575_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha256_transform_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        sext_ln101_reg_1356 <= sext_ln101_fu_918_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln101_reg_1368 == 1'd0))) begin
        trunc_ln109_reg_1477 <= trunc_ln109_fu_1208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln101_reg_1368 == 1'd0))) begin
        trunc_ln110_reg_1482 <= trunc_ln110_fu_1217_p1;
    end
end

always @ (*) begin
    if ((icmp_ln101_fu_921_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0))) begin
        ap_phi_mux_i_2_phi_fu_567_p4 = i_5_reg_1372;
    end else begin
        ap_phi_mux_i_2_phi_fu_567_p4 = i_2_reg_563;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_data_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_data_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_address0 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_address0 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_address0 = zext_ln79_fu_913_p1;
    end else if (((icmp_ln83_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ctx_data_address0 = zext_ln84_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_address0 = zext_ln77_fu_677_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0)))) begin
        ctx_data_address0 = grp_sha256_transform_fu_575_data_address0;
    end else begin
        ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_data_address1 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_data_address1 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_address1 = 64'd62;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0)))) begin
        ctx_data_address1 = grp_sha256_transform_fu_575_data_address1;
    end else begin
        ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln83_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0)))) begin
        ctx_data_ce0 = grp_sha256_transform_fu_575_data_ce0;
    end else begin
        ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_data_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0)))) begin
        ctx_data_ce1 = grp_sha256_transform_fu_575_data_ce1;
    end else begin
        ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_data_d0 = trunc_ln7_reg_1343;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_data_d0 = trunc_ln5_reg_1333;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_d0 = trunc_ln3_reg_1323;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_d0 = add_ln90_reg_1308;
    end else if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln83_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_data_d0 = 8'd128;
    end else begin
        ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_data_d1 = trunc_ln6_reg_1338;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_data_d1 = trunc_ln4_reg_1328;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_d1 = trunc_ln2_reg_1318;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_data_d1 = trunc_ln1_reg_1313;
    end else begin
        ctx_data_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln78_fu_907_p2 == 1'd0)) | ((icmp_ln83_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ctx_data_we0 = 1'b1;
    end else begin
        ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_data_we1 = 1'b1;
    end else begin
        ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_0_read = ctx_state_0_0_reg_483;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_0_read = p_read2;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_1_read = ctx_state_1_0_reg_493;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_1_read = p_read3;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_2_read = ctx_state_2_0_reg_503;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_2_read = p_read4;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_3_read = ctx_state_3_0_reg_513;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_3_read = p_read5;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_4_read = ctx_state_4_0_reg_523;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_4_read = p_read6;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_4_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_5_read = ctx_state_5_0_reg_533;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_5_read = p_read7;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_5_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_6_read = ctx_state_6_0_reg_543;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_6_read = p_read8;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_6_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_sha256_transform_fu_575_ctx_state_7_read = ctx_state_7_0_reg_553;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_reg_1296 == 1'd0))) begin
        grp_sha256_transform_fu_575_ctx_state_7_read = p_read9;
    end else begin
        grp_sha256_transform_fu_575_ctx_state_7_read = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln101_reg_1368 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln101_reg_1368 == 1'd0)))) begin
        hash_blk_n_AW = m_axi_hash_AWREADY;
    end else begin
        hash_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln101_reg_1368 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)))) begin
        hash_blk_n_B = m_axi_hash_BVALID;
    end else begin
        hash_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln101_reg_1368 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)))) begin
        hash_blk_n_W = m_axi_hash_WREADY;
    end else begin
        hash_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln101_reg_1368 == 1'd0)) begin
        if ((1'b1 == ap_condition_582)) begin
            m_axi_hash_AWADDR = hash_addr_7_reg_1471;
        end else if ((1'b1 == ap_condition_658)) begin
            m_axi_hash_AWADDR = hash_addr_6_reg_1465;
        end else if ((1'b1 == ap_condition_708)) begin
            m_axi_hash_AWADDR = hash_addr_5_reg_1459;
        end else if ((1'b1 == ap_condition_695)) begin
            m_axi_hash_AWADDR = hash_addr_4_reg_1448;
        end else if ((1'b1 == ap_condition_682)) begin
            m_axi_hash_AWADDR = hash_addr_3_reg_1437;
        end else if ((1'b1 == ap_condition_669)) begin
            m_axi_hash_AWADDR = hash_addr_2_reg_1426;
        end else if ((1'b1 == ap_condition_660)) begin
            m_axi_hash_AWADDR = hash_addr_1_reg_1410;
        end else if ((1'b1 == ap_condition_656)) begin
            m_axi_hash_AWADDR = hash_addr_reg_1393;
        end else begin
            m_axi_hash_AWADDR = 'bx;
        end
    end else begin
        m_axi_hash_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_1368 == 1'd0)))) begin
        m_axi_hash_AWVALID = 1'b1;
    end else begin
        m_axi_hash_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)))) begin
        m_axi_hash_BREADY = 1'b1;
    end else begin
        m_axi_hash_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln110_reg_1482;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln109_reg_1477;
    end else if (((1'b0 == ap_block_pp0_stage7_01001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln108_reg_1454;
    end else if (((1'b0 == ap_block_pp0_stage6_01001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln107_reg_1443;
    end else if (((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln106_reg_1432;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln105_reg_1416;
    end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln104_reg_1399;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0))) begin
        m_axi_hash_WDATA = trunc_ln103_1_reg_1388;
    end else begin
        m_axi_hash_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)))) begin
        m_axi_hash_WVALID = 1'b1;
    end else begin
        m_axi_hash_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln76_fu_671_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln76_fu_671_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln83_fu_698_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln78_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_sha256_transform_fu_575_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln101_fu_921_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln101_fu_921_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((~((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_969_p2 = ($signed(zext_ln103_1_fu_965_p1) + $signed(sext_ln101_reg_1356));

assign add_ln104_fu_1003_p2 = ($signed(zext_ln104_fu_999_p1) + $signed(sext_ln101_reg_1356));

assign add_ln105_fu_1039_p2 = ($signed(zext_ln105_fu_1035_p1) + $signed(sext_ln101_reg_1356));

assign add_ln106_fu_1070_p2 = ($signed(zext_ln106_fu_1066_p1) + $signed(sext_ln101_reg_1356));

assign add_ln107_fu_1106_p2 = ($signed(zext_ln107_fu_1102_p1) + $signed(sext_ln101_reg_1356));

assign add_ln108_1_fu_1144_p2 = ($signed(zext_ln108_fu_1140_p1) + $signed(sext_ln101_reg_1356));

assign add_ln108_fu_1134_p2 = ($signed(5'd20) + $signed(zext_ln101_fu_1121_p1));

assign add_ln109_fu_1166_p2 = ($signed(zext_ln109_fu_1162_p1) + $signed(sext_ln101_reg_1356));

assign add_ln110_fu_1188_p2 = ($signed(zext_ln110_fu_1184_p1) + $signed(sext_ln101_reg_1356));

assign add_ln89_fu_784_p2 = (zext_ln89_fu_714_p1 + ctx_bitlen_read);

assign add_ln90_1_fu_789_p2 = (zext_ln89_3_fu_780_p1 + trunc_ln89_12_fu_777_p1);

assign add_ln90_2_fu_795_p2 = (zext_ln89_2_fu_773_p1 + trunc_ln89_11_fu_770_p1);

assign add_ln90_3_fu_801_p2 = (zext_ln89_1_fu_766_p1 + trunc_ln89_10_fu_763_p1);

assign add_ln90_4_fu_807_p2 = (shl_ln89_fu_709_p2 + trunc_ln89_9_fu_760_p1);

assign add_ln90_5_fu_813_p2 = (trunc_ln89_5_fu_752_p3 + trunc_ln89_7_fu_746_p1);

assign add_ln90_6_fu_819_p2 = (trunc_ln89_3_fu_738_p3 + trunc_ln89_4_fu_732_p1);

assign add_ln90_fu_825_p2 = (trunc_ln89_fu_718_p1 + trunc_ln89_1_fu_724_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368 == 1'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)))) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)))) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((m_axi_hash_BVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_reg_1368 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368 == 1'd0))));
end

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0));
end

assign ap_block_state12_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

assign ap_block_state13_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

assign ap_block_state14_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

assign ap_block_state15_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

assign ap_block_state16_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

assign ap_block_state17_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_pp0_stage7_iter0 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368 == 1'd0));
end

always @ (*) begin
    ap_block_state19_io = (((m_axi_hash_AWREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)) | ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368 == 1'd0)));
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368 == 1'd0));
end

always @ (*) begin
    ap_block_state20_io = ((m_axi_hash_WREADY == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state20_pp0_stage1_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state21_pp0_stage2_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state22_pp0_stage3_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state23_pp0_stage4_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state24_pp0_stage5_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state25_pp0_stage6_iter1 = ((m_axi_hash_BVALID == 1'b0) & (icmp_ln101_reg_1368_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_sha256_transform_fu_575_ap_done == 1'b0) & (icmp_ln76_reg_1296 == 1'd0));
end

always @ (*) begin
    ap_condition_582 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_656 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_658 = ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_660 = ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_669 = ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_682 = ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_695 = ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_708 = ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_sha256_transform_fu_575_ap_start = grp_sha256_transform_fu_575_ap_start_reg;

assign i_4_fu_682_p2 = (i_1_in_reg_465 + 32'd1);

assign i_5_fu_927_p2 = (ap_phi_mux_i_2_phi_fu_567_p4 + 3'd1);

assign i_fu_901_p2 = (i_0_in_reg_474 + 32'd1);

assign icmp_ln101_fu_921_p2 = ((ap_phi_mux_i_2_phi_fu_567_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_671_p2 = ((ctx_datalen_read < 32'd56) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_907_p2 = ((i_0_in_reg_474 == 32'd55) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_698_p2 = ((tmp_1_fu_688_p4 == 26'd0) ? 1'b1 : 1'b0);

assign lshr_ln103_fu_955_p2 = reg_631 >> zext_ln103_fu_951_p1;

assign lshr_ln104_fu_984_p2 = reg_636 >> zext_ln103_reg_1377;

assign lshr_ln105_fu_1018_p2 = reg_641 >> zext_ln103_reg_1377;

assign lshr_ln106_fu_1054_p2 = reg_646 >> zext_ln103_reg_1377;

assign lshr_ln107_fu_1085_p2 = reg_651 >> zext_ln103_reg_1377;

assign lshr_ln108_fu_1125_p2 = reg_656 >> zext_ln103_reg_1377;

assign lshr_ln109_fu_1203_p2 = reg_661 >> zext_ln103_reg_1377;

assign lshr_ln110_fu_1212_p2 = reg_666 >> zext_ln103_reg_1377;

assign m_axi_hash_ARADDR = 32'd0;

assign m_axi_hash_ARBURST = 2'd0;

assign m_axi_hash_ARCACHE = 4'd0;

assign m_axi_hash_ARID = 1'd0;

assign m_axi_hash_ARLEN = 32'd0;

assign m_axi_hash_ARLOCK = 2'd0;

assign m_axi_hash_ARPROT = 3'd0;

assign m_axi_hash_ARQOS = 4'd0;

assign m_axi_hash_ARREGION = 4'd0;

assign m_axi_hash_ARSIZE = 3'd0;

assign m_axi_hash_ARUSER = 1'd0;

assign m_axi_hash_ARVALID = 1'b0;

assign m_axi_hash_AWBURST = 2'd0;

assign m_axi_hash_AWCACHE = 4'd0;

assign m_axi_hash_AWID = 1'd0;

assign m_axi_hash_AWLEN = 32'd1;

assign m_axi_hash_AWLOCK = 2'd0;

assign m_axi_hash_AWPROT = 3'd0;

assign m_axi_hash_AWQOS = 4'd0;

assign m_axi_hash_AWREGION = 4'd0;

assign m_axi_hash_AWSIZE = 3'd0;

assign m_axi_hash_AWUSER = 1'd0;

assign m_axi_hash_RREADY = 1'b0;

assign m_axi_hash_WID = 1'd0;

assign m_axi_hash_WLAST = 1'b0;

assign m_axi_hash_WSTRB = 1'd1;

assign m_axi_hash_WUSER = 1'd0;

assign or_ln3_fu_1094_p3 = {{2'd2}, {i_2_reg_563}};

assign or_ln_fu_1027_p3 = {{1'd1}, {i_2_reg_563}};

assign sext_ln101_fu_918_p1 = $signed(hash_offset);

assign sext_ln103_fu_974_p1 = $signed(add_ln103_fu_969_p2);

assign sext_ln104_fu_1008_p1 = $signed(add_ln104_fu_1003_p2);

assign sext_ln105_fu_1044_p1 = $signed(add_ln105_fu_1039_p2);

assign sext_ln106_1_fu_1075_p1 = $signed(add_ln106_fu_1070_p2);

assign sext_ln106_fu_1063_p1 = xor_ln104_reg_1404;

assign sext_ln107_fu_1111_p1 = $signed(add_ln107_fu_1106_p2);

assign sext_ln108_fu_1149_p1 = $signed(add_ln108_1_fu_1144_p2);

assign sext_ln109_1_fu_1171_p1 = $signed(add_ln109_fu_1166_p2);

assign sext_ln109_fu_1159_p1 = or_ln_reg_1421;

assign sext_ln110_1_fu_1193_p1 = $signed(add_ln110_fu_1188_p2);

assign sext_ln110_fu_1181_p1 = xor_ln104_reg_1404;

assign shl_ln1_fu_937_p3 = {{trunc_ln103_fu_933_p1}, {3'd0}};

assign shl_ln89_fu_709_p2 = ctx_datalen_read << 32'd3;

assign sub_ln103_fu_945_p2 = ($signed(5'd24) - $signed(shl_ln1_fu_937_p3));

assign tmp_1_fu_688_p4 = {{i_4_fu_682_p2[31:6]}};

assign trunc_ln103_1_fu_961_p1 = lshr_ln103_fu_955_p2[7:0];

assign trunc_ln103_fu_933_p1 = ap_phi_mux_i_2_phi_fu_567_p4[1:0];

assign trunc_ln104_fu_989_p1 = lshr_ln104_fu_984_p2[7:0];

assign trunc_ln105_fu_1023_p1 = lshr_ln105_fu_1018_p2[7:0];

assign trunc_ln106_fu_1059_p1 = lshr_ln106_fu_1054_p2[7:0];

assign trunc_ln107_fu_1090_p1 = lshr_ln107_fu_1085_p2[7:0];

assign trunc_ln108_fu_1130_p1 = lshr_ln108_fu_1125_p2[7:0];

assign trunc_ln109_fu_1208_p1 = lshr_ln109_fu_1203_p2[7:0];

assign trunc_ln110_fu_1217_p1 = lshr_ln110_fu_1212_p2[7:0];

assign trunc_ln89_10_fu_763_p1 = ctx_bitlen_read[39:0];

assign trunc_ln89_11_fu_770_p1 = ctx_bitlen_read[47:0];

assign trunc_ln89_12_fu_777_p1 = ctx_bitlen_read[55:0];

assign trunc_ln89_1_fu_724_p3 = {{trunc_ln89_2_fu_721_p1}, {3'd0}};

assign trunc_ln89_2_fu_721_p1 = ctx_datalen_read[4:0];

assign trunc_ln89_3_fu_738_p3 = {{trunc_ln89_6_fu_735_p1}, {3'd0}};

assign trunc_ln89_4_fu_732_p1 = ctx_bitlen_read[15:0];

assign trunc_ln89_5_fu_752_p3 = {{trunc_ln89_8_fu_749_p1}, {3'd0}};

assign trunc_ln89_6_fu_735_p1 = ctx_datalen_read[12:0];

assign trunc_ln89_7_fu_746_p1 = ctx_bitlen_read[23:0];

assign trunc_ln89_8_fu_749_p1 = ctx_datalen_read[20:0];

assign trunc_ln89_9_fu_760_p1 = ctx_bitlen_read[31:0];

assign trunc_ln89_fu_718_p1 = ctx_bitlen_read[7:0];

assign xor_ln104_fu_993_p2 = (i_2_reg_563 ^ 3'd4);

assign zext_ln101_fu_1121_p1 = i_2_reg_563;

assign zext_ln103_1_fu_965_p1 = ap_phi_mux_i_2_phi_fu_567_p4;

assign zext_ln103_fu_951_p1 = sub_ln103_fu_945_p2;

assign zext_ln104_fu_999_p1 = $unsigned(xor_ln104_fu_993_p2);

assign zext_ln105_fu_1035_p1 = $unsigned(or_ln_fu_1027_p3);

assign zext_ln106_fu_1066_p1 = $unsigned(sext_ln106_fu_1063_p1);

assign zext_ln107_fu_1102_p1 = or_ln3_fu_1094_p3;

assign zext_ln108_fu_1140_p1 = add_ln108_fu_1134_p2;

assign zext_ln109_fu_1162_p1 = $unsigned(sext_ln109_fu_1159_p1);

assign zext_ln110_fu_1184_p1 = $unsigned(sext_ln110_fu_1181_p1);

assign zext_ln77_fu_677_p1 = ctx_datalen_read;

assign zext_ln79_fu_913_p1 = i_fu_901_p2;

assign zext_ln84_fu_704_p1 = i_4_fu_682_p2;

assign zext_ln89_1_fu_766_p1 = shl_ln89_fu_709_p2;

assign zext_ln89_2_fu_773_p1 = shl_ln89_fu_709_p2;

assign zext_ln89_3_fu_780_p1 = shl_ln89_fu_709_p2;

assign zext_ln89_fu_714_p1 = shl_ln89_fu_709_p2;

always @ (posedge ap_clk) begin
    zext_ln103_reg_1377[2:0] <= 3'b000;
    zext_ln103_reg_1377[31:5] <= 27'b000000000000000000000000000;
    or_ln_reg_1421[3] <= 1'b1;
end

endmodule //sha256_final
