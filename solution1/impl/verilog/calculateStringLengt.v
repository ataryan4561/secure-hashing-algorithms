// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calculateStringLengt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_str_AWVALID,
        m_axi_str_AWREADY,
        m_axi_str_AWADDR,
        m_axi_str_AWID,
        m_axi_str_AWLEN,
        m_axi_str_AWSIZE,
        m_axi_str_AWBURST,
        m_axi_str_AWLOCK,
        m_axi_str_AWCACHE,
        m_axi_str_AWPROT,
        m_axi_str_AWQOS,
        m_axi_str_AWREGION,
        m_axi_str_AWUSER,
        m_axi_str_WVALID,
        m_axi_str_WREADY,
        m_axi_str_WDATA,
        m_axi_str_WSTRB,
        m_axi_str_WLAST,
        m_axi_str_WID,
        m_axi_str_WUSER,
        m_axi_str_ARVALID,
        m_axi_str_ARREADY,
        m_axi_str_ARADDR,
        m_axi_str_ARID,
        m_axi_str_ARLEN,
        m_axi_str_ARSIZE,
        m_axi_str_ARBURST,
        m_axi_str_ARLOCK,
        m_axi_str_ARCACHE,
        m_axi_str_ARPROT,
        m_axi_str_ARQOS,
        m_axi_str_ARREGION,
        m_axi_str_ARUSER,
        m_axi_str_RVALID,
        m_axi_str_RREADY,
        m_axi_str_RDATA,
        m_axi_str_RLAST,
        m_axi_str_RID,
        m_axi_str_RUSER,
        m_axi_str_RRESP,
        m_axi_str_BVALID,
        m_axi_str_BREADY,
        m_axi_str_BRESP,
        m_axi_str_BID,
        m_axi_str_BUSER,
        str_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_str_AWVALID;
input   m_axi_str_AWREADY;
output  [31:0] m_axi_str_AWADDR;
output  [0:0] m_axi_str_AWID;
output  [31:0] m_axi_str_AWLEN;
output  [2:0] m_axi_str_AWSIZE;
output  [1:0] m_axi_str_AWBURST;
output  [1:0] m_axi_str_AWLOCK;
output  [3:0] m_axi_str_AWCACHE;
output  [2:0] m_axi_str_AWPROT;
output  [3:0] m_axi_str_AWQOS;
output  [3:0] m_axi_str_AWREGION;
output  [0:0] m_axi_str_AWUSER;
output   m_axi_str_WVALID;
input   m_axi_str_WREADY;
output  [7:0] m_axi_str_WDATA;
output  [0:0] m_axi_str_WSTRB;
output   m_axi_str_WLAST;
output  [0:0] m_axi_str_WID;
output  [0:0] m_axi_str_WUSER;
output   m_axi_str_ARVALID;
input   m_axi_str_ARREADY;
output  [31:0] m_axi_str_ARADDR;
output  [0:0] m_axi_str_ARID;
output  [31:0] m_axi_str_ARLEN;
output  [2:0] m_axi_str_ARSIZE;
output  [1:0] m_axi_str_ARBURST;
output  [1:0] m_axi_str_ARLOCK;
output  [3:0] m_axi_str_ARCACHE;
output  [2:0] m_axi_str_ARPROT;
output  [3:0] m_axi_str_ARQOS;
output  [3:0] m_axi_str_ARREGION;
output  [0:0] m_axi_str_ARUSER;
input   m_axi_str_RVALID;
output   m_axi_str_RREADY;
input  [7:0] m_axi_str_RDATA;
input   m_axi_str_RLAST;
input  [0:0] m_axi_str_RID;
input  [0:0] m_axi_str_RUSER;
input  [1:0] m_axi_str_RRESP;
input   m_axi_str_BVALID;
output   m_axi_str_BREADY;
input  [1:0] m_axi_str_BRESP;
input  [0:0] m_axi_str_BID;
input  [0:0] m_axi_str_BUSER;
input  [31:0] str_offset;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_str_ARVALID;
reg m_axi_str_RREADY;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    str_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    str_blk_n_R;
wire    ap_CS_fsm_state10;
wire  signed [63:0] sext_ln115_fu_64_p1;
reg  signed [63:0] sext_ln115_reg_90;
reg   [31:0] str_addr_reg_95;
wire    ap_CS_fsm_state2;
reg   [7:0] str_addr_read_reg_101;
wire   [63:0] length_fu_84_p2;
wire    ap_CS_fsm_state11;
reg   [63:0] length_0_reg_52;
wire   [0:0] icmp_ln115_fu_79_p2;
wire   [63:0] add_ln115_fu_68_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_79_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        length_0_reg_52 <= length_fu_84_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        length_0_reg_52 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_ln115_reg_90 <= sext_ln115_fu_64_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_str_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        str_addr_read_reg_101 <= m_axi_str_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        str_addr_reg_95 <= add_ln115_fu_68_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln115_fu_79_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln115_fu_79_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_str_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_str_ARVALID = 1'b1;
    end else begin
        m_axi_str_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_str_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_str_RREADY = 1'b1;
    end else begin
        m_axi_str_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        str_blk_n_AR = m_axi_str_ARREADY;
    end else begin
        str_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        str_blk_n_R = m_axi_str_RVALID;
    end else begin
        str_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_str_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_str_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln115_fu_79_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_68_p2 = ($signed(length_0_reg_52) + $signed(sext_ln115_reg_90));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = length_0_reg_52;

assign icmp_ln115_fu_79_p2 = ((str_addr_read_reg_101 == 8'd0) ? 1'b1 : 1'b0);

assign length_fu_84_p2 = (length_0_reg_52 + 64'd1);

assign m_axi_str_ARADDR = str_addr_reg_95;

assign m_axi_str_ARBURST = 2'd0;

assign m_axi_str_ARCACHE = 4'd0;

assign m_axi_str_ARID = 1'd0;

assign m_axi_str_ARLEN = 32'd1;

assign m_axi_str_ARLOCK = 2'd0;

assign m_axi_str_ARPROT = 3'd0;

assign m_axi_str_ARQOS = 4'd0;

assign m_axi_str_ARREGION = 4'd0;

assign m_axi_str_ARSIZE = 3'd0;

assign m_axi_str_ARUSER = 1'd0;

assign m_axi_str_AWADDR = 32'd0;

assign m_axi_str_AWBURST = 2'd0;

assign m_axi_str_AWCACHE = 4'd0;

assign m_axi_str_AWID = 1'd0;

assign m_axi_str_AWLEN = 32'd0;

assign m_axi_str_AWLOCK = 2'd0;

assign m_axi_str_AWPROT = 3'd0;

assign m_axi_str_AWQOS = 4'd0;

assign m_axi_str_AWREGION = 4'd0;

assign m_axi_str_AWSIZE = 3'd0;

assign m_axi_str_AWUSER = 1'd0;

assign m_axi_str_AWVALID = 1'b0;

assign m_axi_str_BREADY = 1'b0;

assign m_axi_str_WDATA = 8'd0;

assign m_axi_str_WID = 1'd0;

assign m_axi_str_WLAST = 1'b0;

assign m_axi_str_WSTRB = 1'd0;

assign m_axi_str_WUSER = 1'd0;

assign m_axi_str_WVALID = 1'b0;

assign sext_ln115_fu_64_p1 = $signed(str_offset);

endmodule //calculateStringLengt
