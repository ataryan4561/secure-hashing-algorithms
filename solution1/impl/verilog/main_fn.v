// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="main_fn,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=4681,HLS_SYN_LUT=7513,HLS_VERSION=2019_1}" *)

module main_fn (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] output_r;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [0:0] gmem_ARID;
reg   [31:0] gmem_ARLEN;
reg   [2:0] gmem_ARSIZE;
reg   [1:0] gmem_ARBURST;
reg   [1:0] gmem_ARLOCK;
reg   [3:0] gmem_ARCACHE;
reg   [2:0] gmem_ARPROT;
reg   [3:0] gmem_ARQOS;
reg   [3:0] gmem_ARREGION;
reg   [0:0] gmem_ARUSER;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] output_read_reg_147;
reg   [31:0] input_read_reg_152;
wire   [63:0] grp_calculateStringLengt_fu_99_ap_return;
reg   [63:0] tmp_reg_158;
wire    ap_CS_fsm_state2;
wire    grp_calculateStringLengt_fu_99_ap_ready;
wire    grp_calculateStringLengt_fu_99_ap_done;
reg   [63:0] ctx_bitlen_reg_163;
wire    ap_CS_fsm_state4;
wire    grp_sha256_update_fu_88_ap_ready;
wire    grp_sha256_update_fu_88_ap_done;
reg   [31:0] ctx_datalen_reg_168;
reg   [31:0] ctx_state_0_reg_173;
reg   [31:0] ctx_state_1_reg_178;
reg   [31:0] ctx_state_2_reg_183;
reg   [31:0] ctx_state_3_reg_188;
reg   [31:0] ctx_state_4_reg_193;
reg   [31:0] ctx_state_5_reg_198;
reg   [31:0] ctx_state_6_reg_203;
reg   [31:0] ctx_state_7_reg_208;
reg   [5:0] ctx_data_address0;
reg    ctx_data_ce0;
reg    ctx_data_we0;
reg   [7:0] ctx_data_d0;
wire   [7:0] ctx_data_q0;
reg   [5:0] ctx_data_address1;
reg    ctx_data_ce1;
reg    ctx_data_we1;
wire   [7:0] ctx_data_q1;
wire    grp_sha256_final_fu_68_ap_start;
wire    grp_sha256_final_fu_68_ap_done;
wire    grp_sha256_final_fu_68_ap_idle;
wire    grp_sha256_final_fu_68_ap_ready;
wire   [5:0] grp_sha256_final_fu_68_ctx_data_address0;
wire    grp_sha256_final_fu_68_ctx_data_ce0;
wire    grp_sha256_final_fu_68_ctx_data_we0;
wire   [7:0] grp_sha256_final_fu_68_ctx_data_d0;
wire   [5:0] grp_sha256_final_fu_68_ctx_data_address1;
wire    grp_sha256_final_fu_68_ctx_data_ce1;
wire    grp_sha256_final_fu_68_ctx_data_we1;
wire   [7:0] grp_sha256_final_fu_68_ctx_data_d1;
wire    grp_sha256_final_fu_68_m_axi_hash_AWVALID;
wire   [31:0] grp_sha256_final_fu_68_m_axi_hash_AWADDR;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_AWID;
wire   [31:0] grp_sha256_final_fu_68_m_axi_hash_AWLEN;
wire   [2:0] grp_sha256_final_fu_68_m_axi_hash_AWSIZE;
wire   [1:0] grp_sha256_final_fu_68_m_axi_hash_AWBURST;
wire   [1:0] grp_sha256_final_fu_68_m_axi_hash_AWLOCK;
wire   [3:0] grp_sha256_final_fu_68_m_axi_hash_AWCACHE;
wire   [2:0] grp_sha256_final_fu_68_m_axi_hash_AWPROT;
wire   [3:0] grp_sha256_final_fu_68_m_axi_hash_AWQOS;
wire   [3:0] grp_sha256_final_fu_68_m_axi_hash_AWREGION;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_AWUSER;
wire    grp_sha256_final_fu_68_m_axi_hash_WVALID;
wire   [7:0] grp_sha256_final_fu_68_m_axi_hash_WDATA;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_WSTRB;
wire    grp_sha256_final_fu_68_m_axi_hash_WLAST;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_WID;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_WUSER;
wire    grp_sha256_final_fu_68_m_axi_hash_ARVALID;
wire   [31:0] grp_sha256_final_fu_68_m_axi_hash_ARADDR;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_ARID;
wire   [31:0] grp_sha256_final_fu_68_m_axi_hash_ARLEN;
wire   [2:0] grp_sha256_final_fu_68_m_axi_hash_ARSIZE;
wire   [1:0] grp_sha256_final_fu_68_m_axi_hash_ARBURST;
wire   [1:0] grp_sha256_final_fu_68_m_axi_hash_ARLOCK;
wire   [3:0] grp_sha256_final_fu_68_m_axi_hash_ARCACHE;
wire   [2:0] grp_sha256_final_fu_68_m_axi_hash_ARPROT;
wire   [3:0] grp_sha256_final_fu_68_m_axi_hash_ARQOS;
wire   [3:0] grp_sha256_final_fu_68_m_axi_hash_ARREGION;
wire   [0:0] grp_sha256_final_fu_68_m_axi_hash_ARUSER;
wire    grp_sha256_final_fu_68_m_axi_hash_RREADY;
wire    grp_sha256_final_fu_68_m_axi_hash_BREADY;
wire    grp_sha256_update_fu_88_ap_start;
wire    grp_sha256_update_fu_88_ap_idle;
wire   [5:0] grp_sha256_update_fu_88_ctx_data_address0;
wire    grp_sha256_update_fu_88_ctx_data_ce0;
wire    grp_sha256_update_fu_88_ctx_data_we0;
wire   [7:0] grp_sha256_update_fu_88_ctx_data_d0;
wire   [5:0] grp_sha256_update_fu_88_ctx_data_address1;
wire    grp_sha256_update_fu_88_ctx_data_ce1;
wire    grp_sha256_update_fu_88_m_axi_data_AWVALID;
wire   [31:0] grp_sha256_update_fu_88_m_axi_data_AWADDR;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_AWID;
wire   [31:0] grp_sha256_update_fu_88_m_axi_data_AWLEN;
wire   [2:0] grp_sha256_update_fu_88_m_axi_data_AWSIZE;
wire   [1:0] grp_sha256_update_fu_88_m_axi_data_AWBURST;
wire   [1:0] grp_sha256_update_fu_88_m_axi_data_AWLOCK;
wire   [3:0] grp_sha256_update_fu_88_m_axi_data_AWCACHE;
wire   [2:0] grp_sha256_update_fu_88_m_axi_data_AWPROT;
wire   [3:0] grp_sha256_update_fu_88_m_axi_data_AWQOS;
wire   [3:0] grp_sha256_update_fu_88_m_axi_data_AWREGION;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_AWUSER;
wire    grp_sha256_update_fu_88_m_axi_data_WVALID;
wire   [7:0] grp_sha256_update_fu_88_m_axi_data_WDATA;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_WSTRB;
wire    grp_sha256_update_fu_88_m_axi_data_WLAST;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_WID;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_WUSER;
wire    grp_sha256_update_fu_88_m_axi_data_ARVALID;
wire   [31:0] grp_sha256_update_fu_88_m_axi_data_ARADDR;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_ARID;
wire   [31:0] grp_sha256_update_fu_88_m_axi_data_ARLEN;
wire   [2:0] grp_sha256_update_fu_88_m_axi_data_ARSIZE;
wire   [1:0] grp_sha256_update_fu_88_m_axi_data_ARBURST;
wire   [1:0] grp_sha256_update_fu_88_m_axi_data_ARLOCK;
wire   [3:0] grp_sha256_update_fu_88_m_axi_data_ARCACHE;
wire   [2:0] grp_sha256_update_fu_88_m_axi_data_ARPROT;
wire   [3:0] grp_sha256_update_fu_88_m_axi_data_ARQOS;
wire   [3:0] grp_sha256_update_fu_88_m_axi_data_ARREGION;
wire   [0:0] grp_sha256_update_fu_88_m_axi_data_ARUSER;
wire    grp_sha256_update_fu_88_m_axi_data_RREADY;
wire    grp_sha256_update_fu_88_m_axi_data_BREADY;
wire   [31:0] grp_sha256_update_fu_88_ap_return_0;
wire   [63:0] grp_sha256_update_fu_88_ap_return_1;
wire   [31:0] grp_sha256_update_fu_88_ap_return_2;
wire   [31:0] grp_sha256_update_fu_88_ap_return_3;
wire   [31:0] grp_sha256_update_fu_88_ap_return_4;
wire   [31:0] grp_sha256_update_fu_88_ap_return_5;
wire   [31:0] grp_sha256_update_fu_88_ap_return_6;
wire   [31:0] grp_sha256_update_fu_88_ap_return_7;
wire   [31:0] grp_sha256_update_fu_88_ap_return_8;
wire   [31:0] grp_sha256_update_fu_88_ap_return_9;
wire    grp_calculateStringLengt_fu_99_ap_start;
wire    grp_calculateStringLengt_fu_99_ap_idle;
wire    grp_calculateStringLengt_fu_99_m_axi_str_AWVALID;
wire   [31:0] grp_calculateStringLengt_fu_99_m_axi_str_AWADDR;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_AWID;
wire   [31:0] grp_calculateStringLengt_fu_99_m_axi_str_AWLEN;
wire   [2:0] grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE;
wire   [1:0] grp_calculateStringLengt_fu_99_m_axi_str_AWBURST;
wire   [1:0] grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK;
wire   [3:0] grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE;
wire   [2:0] grp_calculateStringLengt_fu_99_m_axi_str_AWPROT;
wire   [3:0] grp_calculateStringLengt_fu_99_m_axi_str_AWQOS;
wire   [3:0] grp_calculateStringLengt_fu_99_m_axi_str_AWREGION;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_AWUSER;
wire    grp_calculateStringLengt_fu_99_m_axi_str_WVALID;
wire   [7:0] grp_calculateStringLengt_fu_99_m_axi_str_WDATA;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_WSTRB;
wire    grp_calculateStringLengt_fu_99_m_axi_str_WLAST;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_WID;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_WUSER;
wire    grp_calculateStringLengt_fu_99_m_axi_str_ARVALID;
wire   [31:0] grp_calculateStringLengt_fu_99_m_axi_str_ARADDR;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_ARID;
wire   [31:0] grp_calculateStringLengt_fu_99_m_axi_str_ARLEN;
wire   [2:0] grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE;
wire   [1:0] grp_calculateStringLengt_fu_99_m_axi_str_ARBURST;
wire   [1:0] grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK;
wire   [3:0] grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE;
wire   [2:0] grp_calculateStringLengt_fu_99_m_axi_str_ARPROT;
wire   [3:0] grp_calculateStringLengt_fu_99_m_axi_str_ARQOS;
wire   [3:0] grp_calculateStringLengt_fu_99_m_axi_str_ARREGION;
wire   [0:0] grp_calculateStringLengt_fu_99_m_axi_str_ARUSER;
wire    grp_calculateStringLengt_fu_99_m_axi_str_RREADY;
wire    grp_calculateStringLengt_fu_99_m_axi_str_BREADY;
reg    grp_sha256_final_fu_68_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_sha256_update_fu_88_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    grp_calculateStringLengt_fu_99_ap_start_reg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_sha256_final_fu_68_ap_start_reg = 1'b0;
#0 grp_sha256_update_fu_88_ap_start_reg = 1'b0;
#0 grp_calculateStringLengt_fu_99_ap_start_reg = 1'b0;
end

main_fn_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
main_fn_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

main_fn_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
main_fn_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(gmem_ARID),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(gmem_ARSIZE),
    .I_ARLOCK(gmem_ARLOCK),
    .I_ARCACHE(gmem_ARCACHE),
    .I_ARQOS(gmem_ARQOS),
    .I_ARPROT(gmem_ARPROT),
    .I_ARUSER(gmem_ARUSER),
    .I_ARBURST(gmem_ARBURST),
    .I_ARREGION(gmem_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(grp_sha256_final_fu_68_m_axi_hash_AWADDR),
    .I_AWID(grp_sha256_final_fu_68_m_axi_hash_AWID),
    .I_AWLEN(grp_sha256_final_fu_68_m_axi_hash_AWLEN),
    .I_AWSIZE(grp_sha256_final_fu_68_m_axi_hash_AWSIZE),
    .I_AWLOCK(grp_sha256_final_fu_68_m_axi_hash_AWLOCK),
    .I_AWCACHE(grp_sha256_final_fu_68_m_axi_hash_AWCACHE),
    .I_AWQOS(grp_sha256_final_fu_68_m_axi_hash_AWQOS),
    .I_AWPROT(grp_sha256_final_fu_68_m_axi_hash_AWPROT),
    .I_AWUSER(grp_sha256_final_fu_68_m_axi_hash_AWUSER),
    .I_AWBURST(grp_sha256_final_fu_68_m_axi_hash_AWBURST),
    .I_AWREGION(grp_sha256_final_fu_68_m_axi_hash_AWREGION),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(grp_sha256_final_fu_68_m_axi_hash_WDATA),
    .I_WID(grp_sha256_final_fu_68_m_axi_hash_WID),
    .I_WUSER(grp_sha256_final_fu_68_m_axi_hash_WUSER),
    .I_WLAST(grp_sha256_final_fu_68_m_axi_hash_WLAST),
    .I_WSTRB(grp_sha256_final_fu_68_m_axi_hash_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

main_fn_ctx_data #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
ctx_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_data_address0),
    .ce0(ctx_data_ce0),
    .we0(ctx_data_we0),
    .d0(ctx_data_d0),
    .q0(ctx_data_q0),
    .address1(ctx_data_address1),
    .ce1(ctx_data_ce1),
    .we1(ctx_data_we1),
    .d1(grp_sha256_final_fu_68_ctx_data_d1),
    .q1(ctx_data_q1)
);

sha256_final grp_sha256_final_fu_68(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_final_fu_68_ap_start),
    .ap_done(grp_sha256_final_fu_68_ap_done),
    .ap_idle(grp_sha256_final_fu_68_ap_idle),
    .ap_ready(grp_sha256_final_fu_68_ap_ready),
    .ctx_data_address0(grp_sha256_final_fu_68_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_final_fu_68_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_final_fu_68_ctx_data_we0),
    .ctx_data_d0(grp_sha256_final_fu_68_ctx_data_d0),
    .ctx_data_q0(ctx_data_q0),
    .ctx_data_address1(grp_sha256_final_fu_68_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_final_fu_68_ctx_data_ce1),
    .ctx_data_we1(grp_sha256_final_fu_68_ctx_data_we1),
    .ctx_data_d1(grp_sha256_final_fu_68_ctx_data_d1),
    .ctx_data_q1(ctx_data_q1),
    .ctx_datalen_read(ctx_datalen_reg_168),
    .ctx_bitlen_read(ctx_bitlen_reg_163),
    .p_read2(ctx_state_0_reg_173),
    .p_read3(ctx_state_1_reg_178),
    .p_read4(ctx_state_2_reg_183),
    .p_read5(ctx_state_3_reg_188),
    .p_read6(ctx_state_4_reg_193),
    .p_read7(ctx_state_5_reg_198),
    .p_read8(ctx_state_6_reg_203),
    .p_read9(ctx_state_7_reg_208),
    .m_axi_hash_AWVALID(grp_sha256_final_fu_68_m_axi_hash_AWVALID),
    .m_axi_hash_AWREADY(gmem_AWREADY),
    .m_axi_hash_AWADDR(grp_sha256_final_fu_68_m_axi_hash_AWADDR),
    .m_axi_hash_AWID(grp_sha256_final_fu_68_m_axi_hash_AWID),
    .m_axi_hash_AWLEN(grp_sha256_final_fu_68_m_axi_hash_AWLEN),
    .m_axi_hash_AWSIZE(grp_sha256_final_fu_68_m_axi_hash_AWSIZE),
    .m_axi_hash_AWBURST(grp_sha256_final_fu_68_m_axi_hash_AWBURST),
    .m_axi_hash_AWLOCK(grp_sha256_final_fu_68_m_axi_hash_AWLOCK),
    .m_axi_hash_AWCACHE(grp_sha256_final_fu_68_m_axi_hash_AWCACHE),
    .m_axi_hash_AWPROT(grp_sha256_final_fu_68_m_axi_hash_AWPROT),
    .m_axi_hash_AWQOS(grp_sha256_final_fu_68_m_axi_hash_AWQOS),
    .m_axi_hash_AWREGION(grp_sha256_final_fu_68_m_axi_hash_AWREGION),
    .m_axi_hash_AWUSER(grp_sha256_final_fu_68_m_axi_hash_AWUSER),
    .m_axi_hash_WVALID(grp_sha256_final_fu_68_m_axi_hash_WVALID),
    .m_axi_hash_WREADY(gmem_WREADY),
    .m_axi_hash_WDATA(grp_sha256_final_fu_68_m_axi_hash_WDATA),
    .m_axi_hash_WSTRB(grp_sha256_final_fu_68_m_axi_hash_WSTRB),
    .m_axi_hash_WLAST(grp_sha256_final_fu_68_m_axi_hash_WLAST),
    .m_axi_hash_WID(grp_sha256_final_fu_68_m_axi_hash_WID),
    .m_axi_hash_WUSER(grp_sha256_final_fu_68_m_axi_hash_WUSER),
    .m_axi_hash_ARVALID(grp_sha256_final_fu_68_m_axi_hash_ARVALID),
    .m_axi_hash_ARREADY(1'b0),
    .m_axi_hash_ARADDR(grp_sha256_final_fu_68_m_axi_hash_ARADDR),
    .m_axi_hash_ARID(grp_sha256_final_fu_68_m_axi_hash_ARID),
    .m_axi_hash_ARLEN(grp_sha256_final_fu_68_m_axi_hash_ARLEN),
    .m_axi_hash_ARSIZE(grp_sha256_final_fu_68_m_axi_hash_ARSIZE),
    .m_axi_hash_ARBURST(grp_sha256_final_fu_68_m_axi_hash_ARBURST),
    .m_axi_hash_ARLOCK(grp_sha256_final_fu_68_m_axi_hash_ARLOCK),
    .m_axi_hash_ARCACHE(grp_sha256_final_fu_68_m_axi_hash_ARCACHE),
    .m_axi_hash_ARPROT(grp_sha256_final_fu_68_m_axi_hash_ARPROT),
    .m_axi_hash_ARQOS(grp_sha256_final_fu_68_m_axi_hash_ARQOS),
    .m_axi_hash_ARREGION(grp_sha256_final_fu_68_m_axi_hash_ARREGION),
    .m_axi_hash_ARUSER(grp_sha256_final_fu_68_m_axi_hash_ARUSER),
    .m_axi_hash_RVALID(1'b0),
    .m_axi_hash_RREADY(grp_sha256_final_fu_68_m_axi_hash_RREADY),
    .m_axi_hash_RDATA(8'd0),
    .m_axi_hash_RLAST(1'b0),
    .m_axi_hash_RID(1'd0),
    .m_axi_hash_RUSER(1'd0),
    .m_axi_hash_RRESP(2'd0),
    .m_axi_hash_BVALID(gmem_BVALID),
    .m_axi_hash_BREADY(grp_sha256_final_fu_68_m_axi_hash_BREADY),
    .m_axi_hash_BRESP(gmem_BRESP),
    .m_axi_hash_BID(gmem_BID),
    .m_axi_hash_BUSER(gmem_BUSER),
    .hash_offset(output_read_reg_147)
);

sha256_update grp_sha256_update_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_update_fu_88_ap_start),
    .ap_done(grp_sha256_update_fu_88_ap_done),
    .ap_idle(grp_sha256_update_fu_88_ap_idle),
    .ap_ready(grp_sha256_update_fu_88_ap_ready),
    .ctx_data_address0(grp_sha256_update_fu_88_ctx_data_address0),
    .ctx_data_ce0(grp_sha256_update_fu_88_ctx_data_ce0),
    .ctx_data_we0(grp_sha256_update_fu_88_ctx_data_we0),
    .ctx_data_d0(grp_sha256_update_fu_88_ctx_data_d0),
    .ctx_data_q0(ctx_data_q0),
    .ctx_data_address1(grp_sha256_update_fu_88_ctx_data_address1),
    .ctx_data_ce1(grp_sha256_update_fu_88_ctx_data_ce1),
    .ctx_data_q1(ctx_data_q1),
    .m_axi_data_AWVALID(grp_sha256_update_fu_88_m_axi_data_AWVALID),
    .m_axi_data_AWREADY(1'b0),
    .m_axi_data_AWADDR(grp_sha256_update_fu_88_m_axi_data_AWADDR),
    .m_axi_data_AWID(grp_sha256_update_fu_88_m_axi_data_AWID),
    .m_axi_data_AWLEN(grp_sha256_update_fu_88_m_axi_data_AWLEN),
    .m_axi_data_AWSIZE(grp_sha256_update_fu_88_m_axi_data_AWSIZE),
    .m_axi_data_AWBURST(grp_sha256_update_fu_88_m_axi_data_AWBURST),
    .m_axi_data_AWLOCK(grp_sha256_update_fu_88_m_axi_data_AWLOCK),
    .m_axi_data_AWCACHE(grp_sha256_update_fu_88_m_axi_data_AWCACHE),
    .m_axi_data_AWPROT(grp_sha256_update_fu_88_m_axi_data_AWPROT),
    .m_axi_data_AWQOS(grp_sha256_update_fu_88_m_axi_data_AWQOS),
    .m_axi_data_AWREGION(grp_sha256_update_fu_88_m_axi_data_AWREGION),
    .m_axi_data_AWUSER(grp_sha256_update_fu_88_m_axi_data_AWUSER),
    .m_axi_data_WVALID(grp_sha256_update_fu_88_m_axi_data_WVALID),
    .m_axi_data_WREADY(1'b0),
    .m_axi_data_WDATA(grp_sha256_update_fu_88_m_axi_data_WDATA),
    .m_axi_data_WSTRB(grp_sha256_update_fu_88_m_axi_data_WSTRB),
    .m_axi_data_WLAST(grp_sha256_update_fu_88_m_axi_data_WLAST),
    .m_axi_data_WID(grp_sha256_update_fu_88_m_axi_data_WID),
    .m_axi_data_WUSER(grp_sha256_update_fu_88_m_axi_data_WUSER),
    .m_axi_data_ARVALID(grp_sha256_update_fu_88_m_axi_data_ARVALID),
    .m_axi_data_ARREADY(gmem_ARREADY),
    .m_axi_data_ARADDR(grp_sha256_update_fu_88_m_axi_data_ARADDR),
    .m_axi_data_ARID(grp_sha256_update_fu_88_m_axi_data_ARID),
    .m_axi_data_ARLEN(grp_sha256_update_fu_88_m_axi_data_ARLEN),
    .m_axi_data_ARSIZE(grp_sha256_update_fu_88_m_axi_data_ARSIZE),
    .m_axi_data_ARBURST(grp_sha256_update_fu_88_m_axi_data_ARBURST),
    .m_axi_data_ARLOCK(grp_sha256_update_fu_88_m_axi_data_ARLOCK),
    .m_axi_data_ARCACHE(grp_sha256_update_fu_88_m_axi_data_ARCACHE),
    .m_axi_data_ARPROT(grp_sha256_update_fu_88_m_axi_data_ARPROT),
    .m_axi_data_ARQOS(grp_sha256_update_fu_88_m_axi_data_ARQOS),
    .m_axi_data_ARREGION(grp_sha256_update_fu_88_m_axi_data_ARREGION),
    .m_axi_data_ARUSER(grp_sha256_update_fu_88_m_axi_data_ARUSER),
    .m_axi_data_RVALID(gmem_RVALID),
    .m_axi_data_RREADY(grp_sha256_update_fu_88_m_axi_data_RREADY),
    .m_axi_data_RDATA(gmem_RDATA),
    .m_axi_data_RLAST(gmem_RLAST),
    .m_axi_data_RID(gmem_RID),
    .m_axi_data_RUSER(gmem_RUSER),
    .m_axi_data_RRESP(gmem_RRESP),
    .m_axi_data_BVALID(1'b0),
    .m_axi_data_BREADY(grp_sha256_update_fu_88_m_axi_data_BREADY),
    .m_axi_data_BRESP(2'd0),
    .m_axi_data_BID(1'd0),
    .m_axi_data_BUSER(1'd0),
    .data_offset(input_read_reg_152),
    .len(tmp_reg_158),
    .ap_return_0(grp_sha256_update_fu_88_ap_return_0),
    .ap_return_1(grp_sha256_update_fu_88_ap_return_1),
    .ap_return_2(grp_sha256_update_fu_88_ap_return_2),
    .ap_return_3(grp_sha256_update_fu_88_ap_return_3),
    .ap_return_4(grp_sha256_update_fu_88_ap_return_4),
    .ap_return_5(grp_sha256_update_fu_88_ap_return_5),
    .ap_return_6(grp_sha256_update_fu_88_ap_return_6),
    .ap_return_7(grp_sha256_update_fu_88_ap_return_7),
    .ap_return_8(grp_sha256_update_fu_88_ap_return_8),
    .ap_return_9(grp_sha256_update_fu_88_ap_return_9)
);

calculateStringLengt grp_calculateStringLengt_fu_99(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_calculateStringLengt_fu_99_ap_start),
    .ap_done(grp_calculateStringLengt_fu_99_ap_done),
    .ap_idle(grp_calculateStringLengt_fu_99_ap_idle),
    .ap_ready(grp_calculateStringLengt_fu_99_ap_ready),
    .m_axi_str_AWVALID(grp_calculateStringLengt_fu_99_m_axi_str_AWVALID),
    .m_axi_str_AWREADY(1'b0),
    .m_axi_str_AWADDR(grp_calculateStringLengt_fu_99_m_axi_str_AWADDR),
    .m_axi_str_AWID(grp_calculateStringLengt_fu_99_m_axi_str_AWID),
    .m_axi_str_AWLEN(grp_calculateStringLengt_fu_99_m_axi_str_AWLEN),
    .m_axi_str_AWSIZE(grp_calculateStringLengt_fu_99_m_axi_str_AWSIZE),
    .m_axi_str_AWBURST(grp_calculateStringLengt_fu_99_m_axi_str_AWBURST),
    .m_axi_str_AWLOCK(grp_calculateStringLengt_fu_99_m_axi_str_AWLOCK),
    .m_axi_str_AWCACHE(grp_calculateStringLengt_fu_99_m_axi_str_AWCACHE),
    .m_axi_str_AWPROT(grp_calculateStringLengt_fu_99_m_axi_str_AWPROT),
    .m_axi_str_AWQOS(grp_calculateStringLengt_fu_99_m_axi_str_AWQOS),
    .m_axi_str_AWREGION(grp_calculateStringLengt_fu_99_m_axi_str_AWREGION),
    .m_axi_str_AWUSER(grp_calculateStringLengt_fu_99_m_axi_str_AWUSER),
    .m_axi_str_WVALID(grp_calculateStringLengt_fu_99_m_axi_str_WVALID),
    .m_axi_str_WREADY(1'b0),
    .m_axi_str_WDATA(grp_calculateStringLengt_fu_99_m_axi_str_WDATA),
    .m_axi_str_WSTRB(grp_calculateStringLengt_fu_99_m_axi_str_WSTRB),
    .m_axi_str_WLAST(grp_calculateStringLengt_fu_99_m_axi_str_WLAST),
    .m_axi_str_WID(grp_calculateStringLengt_fu_99_m_axi_str_WID),
    .m_axi_str_WUSER(grp_calculateStringLengt_fu_99_m_axi_str_WUSER),
    .m_axi_str_ARVALID(grp_calculateStringLengt_fu_99_m_axi_str_ARVALID),
    .m_axi_str_ARREADY(gmem_ARREADY),
    .m_axi_str_ARADDR(grp_calculateStringLengt_fu_99_m_axi_str_ARADDR),
    .m_axi_str_ARID(grp_calculateStringLengt_fu_99_m_axi_str_ARID),
    .m_axi_str_ARLEN(grp_calculateStringLengt_fu_99_m_axi_str_ARLEN),
    .m_axi_str_ARSIZE(grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE),
    .m_axi_str_ARBURST(grp_calculateStringLengt_fu_99_m_axi_str_ARBURST),
    .m_axi_str_ARLOCK(grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK),
    .m_axi_str_ARCACHE(grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE),
    .m_axi_str_ARPROT(grp_calculateStringLengt_fu_99_m_axi_str_ARPROT),
    .m_axi_str_ARQOS(grp_calculateStringLengt_fu_99_m_axi_str_ARQOS),
    .m_axi_str_ARREGION(grp_calculateStringLengt_fu_99_m_axi_str_ARREGION),
    .m_axi_str_ARUSER(grp_calculateStringLengt_fu_99_m_axi_str_ARUSER),
    .m_axi_str_RVALID(gmem_RVALID),
    .m_axi_str_RREADY(grp_calculateStringLengt_fu_99_m_axi_str_RREADY),
    .m_axi_str_RDATA(gmem_RDATA),
    .m_axi_str_RLAST(gmem_RLAST),
    .m_axi_str_RID(gmem_RID),
    .m_axi_str_RUSER(gmem_RUSER),
    .m_axi_str_RRESP(gmem_RRESP),
    .m_axi_str_BVALID(1'b0),
    .m_axi_str_BREADY(grp_calculateStringLengt_fu_99_m_axi_str_BREADY),
    .m_axi_str_BRESP(2'd0),
    .m_axi_str_BID(1'd0),
    .m_axi_str_BUSER(1'd0),
    .str_offset(input_read_reg_152),
    .ap_return(grp_calculateStringLengt_fu_99_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_calculateStringLengt_fu_99_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_calculateStringLengt_fu_99_ap_start_reg <= 1'b1;
        end else if ((grp_calculateStringLengt_fu_99_ap_ready == 1'b1)) begin
            grp_calculateStringLengt_fu_99_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_final_fu_68_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_sha256_final_fu_68_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_final_fu_68_ap_ready == 1'b1)) begin
            grp_sha256_final_fu_68_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_update_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_sha256_update_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_update_fu_88_ap_ready == 1'b1)) begin
            grp_sha256_update_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha256_update_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ctx_bitlen_reg_163 <= grp_sha256_update_fu_88_ap_return_1;
        ctx_datalen_reg_168 <= grp_sha256_update_fu_88_ap_return_0;
        ctx_state_0_reg_173 <= grp_sha256_update_fu_88_ap_return_2;
        ctx_state_1_reg_178 <= grp_sha256_update_fu_88_ap_return_3;
        ctx_state_2_reg_183 <= grp_sha256_update_fu_88_ap_return_4;
        ctx_state_3_reg_188 <= grp_sha256_update_fu_88_ap_return_5;
        ctx_state_4_reg_193 <= grp_sha256_update_fu_88_ap_return_6;
        ctx_state_5_reg_198 <= grp_sha256_update_fu_88_ap_return_7;
        ctx_state_6_reg_203 <= grp_sha256_update_fu_88_ap_return_8;
        ctx_state_7_reg_208 <= grp_sha256_update_fu_88_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_read_reg_152 <= input_r;
        output_read_reg_147 <= output_r;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_calculateStringLengt_fu_99_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_158 <= grp_calculateStringLengt_fu_99_ap_return;
    end
end

always @ (*) begin
    if (((grp_sha256_final_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_final_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_address0 = grp_sha256_update_fu_88_ctx_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_address0 = grp_sha256_final_fu_68_ctx_data_address0;
    end else begin
        ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_address1 = grp_sha256_update_fu_88_ctx_data_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_address1 = grp_sha256_final_fu_68_ctx_data_address1;
    end else begin
        ctx_data_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_ce0 = grp_sha256_update_fu_88_ctx_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_ce0 = grp_sha256_final_fu_68_ctx_data_ce0;
    end else begin
        ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_ce1 = grp_sha256_update_fu_88_ctx_data_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_ce1 = grp_sha256_final_fu_68_ctx_data_ce1;
    end else begin
        ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_d0 = grp_sha256_update_fu_88_ctx_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_d0 = grp_sha256_final_fu_68_ctx_data_d0;
    end else begin
        ctx_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_data_we0 = grp_sha256_update_fu_88_ctx_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_we0 = grp_sha256_final_fu_68_ctx_data_we0;
    end else begin
        ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_data_we1 = grp_sha256_final_fu_68_ctx_data_we1;
    end else begin
        ctx_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = grp_calculateStringLengt_fu_99_m_axi_str_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARADDR = grp_sha256_update_fu_88_m_axi_data_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARBURST = grp_calculateStringLengt_fu_99_m_axi_str_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARBURST = grp_sha256_update_fu_88_m_axi_data_ARBURST;
    end else begin
        gmem_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARCACHE = grp_calculateStringLengt_fu_99_m_axi_str_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARCACHE = grp_sha256_update_fu_88_m_axi_data_ARCACHE;
    end else begin
        gmem_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARID = grp_calculateStringLengt_fu_99_m_axi_str_ARID;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARID = grp_sha256_update_fu_88_m_axi_data_ARID;
    end else begin
        gmem_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = grp_calculateStringLengt_fu_99_m_axi_str_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARLEN = grp_sha256_update_fu_88_m_axi_data_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLOCK = grp_calculateStringLengt_fu_99_m_axi_str_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARLOCK = grp_sha256_update_fu_88_m_axi_data_ARLOCK;
    end else begin
        gmem_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARPROT = grp_calculateStringLengt_fu_99_m_axi_str_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARPROT = grp_sha256_update_fu_88_m_axi_data_ARPROT;
    end else begin
        gmem_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARQOS = grp_calculateStringLengt_fu_99_m_axi_str_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARQOS = grp_sha256_update_fu_88_m_axi_data_ARQOS;
    end else begin
        gmem_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARREGION = grp_calculateStringLengt_fu_99_m_axi_str_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARREGION = grp_sha256_update_fu_88_m_axi_data_ARREGION;
    end else begin
        gmem_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARSIZE = grp_calculateStringLengt_fu_99_m_axi_str_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARSIZE = grp_sha256_update_fu_88_m_axi_data_ARSIZE;
    end else begin
        gmem_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARUSER = grp_calculateStringLengt_fu_99_m_axi_str_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARUSER = grp_sha256_update_fu_88_m_axi_data_ARUSER;
    end else begin
        gmem_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = grp_calculateStringLengt_fu_99_m_axi_str_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARVALID = grp_sha256_update_fu_88_m_axi_data_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWVALID = grp_sha256_final_fu_68_m_axi_hash_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_BREADY = grp_sha256_final_fu_68_m_axi_hash_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_RREADY = grp_calculateStringLengt_fu_99_m_axi_str_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_RREADY = grp_sha256_update_fu_88_m_axi_data_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_WVALID = grp_sha256_final_fu_68_m_axi_hash_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_calculateStringLengt_fu_99_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_sha256_update_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_sha256_final_fu_68_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_calculateStringLengt_fu_99_ap_start = grp_calculateStringLengt_fu_99_ap_start_reg;

assign grp_sha256_final_fu_68_ap_start = grp_sha256_final_fu_68_ap_start_reg;

assign grp_sha256_update_fu_88_ap_start = grp_sha256_update_fu_88_ap_start_reg;

endmodule //main_fn
