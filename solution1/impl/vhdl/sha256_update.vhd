-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce0 : OUT STD_LOGIC;
    ctx_data_we0 : OUT STD_LOGIC;
    ctx_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ctx_data_ce1 : OUT STD_LOGIC;
    ctx_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    len : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha256_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv64_200 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_blk_n_AR : STD_LOGIC;
    signal data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln61_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal data_addr_read_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln65_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ctx_state_7_0_load_1_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ctx_state_6_0_load_1_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_0_load_1_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_0_load_1_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_0_load_1_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_0_load_1_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_0_load_1_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_0_0_load_1_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_start : STD_LOGIC;
    signal grp_sha256_transform_fu_151_ap_done : STD_LOGIC;
    signal grp_sha256_transform_fu_151_ap_idle : STD_LOGIC;
    signal grp_sha256_transform_fu_151_ap_ready : STD_LOGIC;
    signal grp_sha256_transform_fu_151_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_151_data_ce0 : STD_LOGIC;
    signal grp_sha256_transform_fu_151_data_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_transform_fu_151_data_ce1 : STD_LOGIC;
    signal grp_sha256_transform_fu_151_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256_transform_fu_151_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_140 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_on_subcall_done : BOOLEAN;
    signal grp_sha256_transform_fu_151_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln63_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ctx_datalen_0_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln64_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_bitlen_0_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_fu_396_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ctx_state_7_0_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_6_0_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_5_0_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_4_0_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_3_0_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_2_0_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_1_0_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_state_0_0_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sha256_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_state_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ctx_state_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_ce1 : OUT STD_LOGIC;
        data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_sha256_transform_fu_151 : component sha256_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_transform_fu_151_ap_start,
        ap_done => grp_sha256_transform_fu_151_ap_done,
        ap_idle => grp_sha256_transform_fu_151_ap_idle,
        ap_ready => grp_sha256_transform_fu_151_ap_ready,
        ctx_state_0_read => ctx_state_0_0_load_1_reg_585,
        ctx_state_1_read => ctx_state_1_0_load_1_reg_580,
        ctx_state_2_read => ctx_state_2_0_load_1_reg_575,
        ctx_state_3_read => ctx_state_3_0_load_1_reg_570,
        ctx_state_4_read => ctx_state_4_0_load_1_reg_565,
        ctx_state_5_read => ctx_state_5_0_load_1_reg_560,
        ctx_state_6_read => ctx_state_6_0_load_1_reg_555,
        ctx_state_7_read => ctx_state_7_0_load_1_reg_550,
        data_address0 => grp_sha256_transform_fu_151_data_address0,
        data_ce0 => grp_sha256_transform_fu_151_data_ce0,
        data_q0 => ctx_data_q0,
        data_address1 => grp_sha256_transform_fu_151_data_address1,
        data_ce1 => grp_sha256_transform_fu_151_data_ce1,
        data_q1 => ctx_data_q1,
        ap_return_0 => grp_sha256_transform_fu_151_ap_return_0,
        ap_return_1 => grp_sha256_transform_fu_151_ap_return_1,
        ap_return_2 => grp_sha256_transform_fu_151_ap_return_2,
        ap_return_3 => grp_sha256_transform_fu_151_ap_return_3,
        ap_return_4 => grp_sha256_transform_fu_151_ap_return_4,
        ap_return_5 => grp_sha256_transform_fu_151_ap_return_5,
        ap_return_6 => grp_sha256_transform_fu_151_ap_return_6,
        ap_return_7 => grp_sha256_transform_fu_151_ap_return_7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha256_transform_fu_151_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_transform_fu_151_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_sha256_transform_fu_151_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_transform_fu_151_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_transform_fu_151_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_bitlen_0_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_bitlen_0_fu_68 <= add_ln67_fu_396_p2;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_bitlen_0_fu_68 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    ctx_datalen_0_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ctx_datalen_0_fu_64 <= add_ln64_fu_347_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                ctx_datalen_0_fu_64 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ctx_state_0_0_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_0_0_fu_100 <= grp_sha256_transform_fu_151_ap_return_0;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_0_0_fu_100 <= ap_const_lv32_6A09E667;
            end if; 
        end if;
    end process;

    ctx_state_1_0_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_1_0_fu_96 <= grp_sha256_transform_fu_151_ap_return_1;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_1_0_fu_96 <= ap_const_lv32_BB67AE85;
            end if; 
        end if;
    end process;

    ctx_state_2_0_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_2_0_fu_92 <= grp_sha256_transform_fu_151_ap_return_2;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_2_0_fu_92 <= ap_const_lv32_3C6EF372;
            end if; 
        end if;
    end process;

    ctx_state_3_0_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_3_0_fu_88 <= grp_sha256_transform_fu_151_ap_return_3;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_3_0_fu_88 <= ap_const_lv32_A54FF53A;
            end if; 
        end if;
    end process;

    ctx_state_4_0_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_4_0_fu_84 <= grp_sha256_transform_fu_151_ap_return_4;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_4_0_fu_84 <= ap_const_lv32_510E527F;
            end if; 
        end if;
    end process;

    ctx_state_5_0_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_5_0_fu_80 <= grp_sha256_transform_fu_151_ap_return_5;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_5_0_fu_80 <= ap_const_lv32_9B05688C;
            end if; 
        end if;
    end process;

    ctx_state_6_0_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_6_0_fu_76 <= grp_sha256_transform_fu_151_ap_return_6;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_6_0_fu_76 <= ap_const_lv32_1F83D9AB;
            end if; 
        end if;
    end process;

    ctx_state_7_0_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
                ctx_state_7_0_fu_72 <= grp_sha256_transform_fu_151_ap_return_7;
            elsif ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_state_7_0_fu_72 <= ap_const_lv32_5BE0CD19;
            end if; 
        end if;
    end process;

    i_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_reg_140 <= i_reg_536;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_140 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                ctx_state_0_0_load_1_reg_585 <= ctx_state_0_0_fu_100;
                ctx_state_1_0_load_1_reg_580 <= ctx_state_1_0_fu_96;
                ctx_state_2_0_load_1_reg_575 <= ctx_state_2_0_fu_92;
                ctx_state_3_0_load_1_reg_570 <= ctx_state_3_0_fu_88;
                ctx_state_4_0_load_1_reg_565 <= ctx_state_4_0_fu_84;
                ctx_state_5_0_load_1_reg_560 <= ctx_state_5_0_fu_80;
                ctx_state_6_0_load_1_reg_555 <= ctx_state_6_0_fu_76;
                ctx_state_7_0_load_1_reg_550 <= ctx_state_7_0_fu_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                data_addr_read_reg_541 <= m_axi_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                i_reg_536 <= i_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln65_reg_546 <= icmp_ln65_fu_353_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_data_ARREADY, m_axi_data_RVALID, ap_CS_fsm_state8, icmp_ln61_fu_271_p2, icmp_ln65_fu_353_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_block_state11_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln61_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln65_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_boolean_0 = ap_block_state11_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln64_fu_347_p2 <= std_logic_vector(unsigned(ctx_datalen_0_fu_64) + unsigned(ap_const_lv32_1));
    add_ln67_fu_396_p2 <= std_logic_vector(unsigned(ctx_bitlen_0_fu_68) + unsigned(ap_const_lv64_200));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_on_subcall_done_assign_proc : process(icmp_ln65_reg_546, grp_sha256_transform_fu_151_ap_done)
    begin
                ap_block_state11_on_subcall_done <= ((grp_sha256_transform_fu_151_ap_done = ap_const_logic_0) and (icmp_ln65_reg_546 = ap_const_lv1_1));
    end process;


    ap_block_state8_assign_proc : process(m_axi_data_RVALID, icmp_ln61_fu_271_p2)
    begin
                ap_block_state8 <= ((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_data_RVALID, ap_CS_fsm_state8, icmp_ln61_fu_271_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln61_fu_271_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state8, icmp_ln61_fu_271_p2)
    begin
        if ((not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln61_fu_271_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= ctx_datalen_0_fu_64;
    ap_return_1 <= ctx_bitlen_0_fu_68;
    ap_return_2 <= ctx_state_0_0_fu_100;
    ap_return_3 <= ctx_state_1_0_fu_96;
    ap_return_4 <= ctx_state_2_0_fu_92;
    ap_return_5 <= ctx_state_3_0_fu_88;
    ap_return_6 <= ctx_state_4_0_fu_84;
    ap_return_7 <= ctx_state_5_0_fu_80;
    ap_return_8 <= ctx_state_6_0_fu_76;
    ap_return_9 <= ctx_state_7_0_fu_72;

    ctx_data_address0_assign_proc : process(icmp_ln65_reg_546, ap_CS_fsm_state9, grp_sha256_transform_fu_151_data_address0, ap_CS_fsm_state11, zext_ln63_fu_342_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_data_address0 <= zext_ln63_fu_342_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
            ctx_data_address0 <= grp_sha256_transform_fu_151_data_address0;
        else 
            ctx_data_address0 <= "XXXXXX";
        end if; 
    end process;

    ctx_data_address1 <= grp_sha256_transform_fu_151_data_address1;

    ctx_data_ce0_assign_proc : process(icmp_ln65_reg_546, ap_CS_fsm_state9, grp_sha256_transform_fu_151_data_ce0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_data_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
            ctx_data_ce0 <= grp_sha256_transform_fu_151_data_ce0;
        else 
            ctx_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_data_ce1_assign_proc : process(icmp_ln65_reg_546, grp_sha256_transform_fu_151_data_ce1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln65_reg_546 = ap_const_lv1_1))) then 
            ctx_data_ce1 <= grp_sha256_transform_fu_151_data_ce1;
        else 
            ctx_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_data_d0 <= data_addr_read_reg_541;

    ctx_data_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_data_we0 <= ap_const_logic_1;
        else 
            ctx_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_data_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            data_blk_n_AR <= m_axi_data_ARREADY;
        else 
            data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_blk_n_R_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state8, icmp_ln61_fu_271_p2)
    begin
        if (((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            data_blk_n_R <= m_axi_data_RVALID;
        else 
            data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_sha256_transform_fu_151_ap_start <= grp_sha256_transform_fu_151_ap_start_reg;
    i_fu_276_p2 <= std_logic_vector(unsigned(i_0_reg_140) + unsigned(ap_const_lv64_1));
    icmp_ln61_fu_271_p2 <= "1" when (i_0_reg_140 = len) else "0";
    icmp_ln65_fu_353_p2 <= "1" when (add_ln64_fu_347_p2 = ap_const_lv32_40) else "0";
    m_axi_data_ARADDR <= sext_ln63_fu_210_p1(32 - 1 downto 0);
    m_axi_data_ARBURST <= ap_const_lv2_0;
    m_axi_data_ARCACHE <= ap_const_lv4_0;
    m_axi_data_ARID <= ap_const_lv1_0;
    m_axi_data_ARLEN <= len(32 - 1 downto 0);
    m_axi_data_ARLOCK <= ap_const_lv2_0;
    m_axi_data_ARPROT <= ap_const_lv3_0;
    m_axi_data_ARQOS <= ap_const_lv4_0;
    m_axi_data_ARREGION <= ap_const_lv4_0;
    m_axi_data_ARSIZE <= ap_const_lv3_0;
    m_axi_data_ARUSER <= ap_const_lv1_0;

    m_axi_data_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_data_ARREADY)
    begin
        if ((not(((m_axi_data_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_data_ARVALID <= ap_const_logic_1;
        else 
            m_axi_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_AWADDR <= ap_const_lv32_0;
    m_axi_data_AWBURST <= ap_const_lv2_0;
    m_axi_data_AWCACHE <= ap_const_lv4_0;
    m_axi_data_AWID <= ap_const_lv1_0;
    m_axi_data_AWLEN <= ap_const_lv32_0;
    m_axi_data_AWLOCK <= ap_const_lv2_0;
    m_axi_data_AWPROT <= ap_const_lv3_0;
    m_axi_data_AWQOS <= ap_const_lv4_0;
    m_axi_data_AWREGION <= ap_const_lv4_0;
    m_axi_data_AWSIZE <= ap_const_lv3_0;
    m_axi_data_AWUSER <= ap_const_lv1_0;
    m_axi_data_AWVALID <= ap_const_logic_0;
    m_axi_data_BREADY <= ap_const_logic_0;

    m_axi_data_RREADY_assign_proc : process(m_axi_data_RVALID, ap_CS_fsm_state8, icmp_ln61_fu_271_p2)
    begin
        if ((not(((icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (m_axi_data_RVALID = ap_const_logic_0))) and (icmp_ln61_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_data_RREADY <= ap_const_logic_1;
        else 
            m_axi_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_WDATA <= ap_const_lv8_0;
    m_axi_data_WID <= ap_const_lv1_0;
    m_axi_data_WLAST <= ap_const_logic_0;
    m_axi_data_WSTRB <= ap_const_lv1_0;
    m_axi_data_WUSER <= ap_const_lv1_0;
    m_axi_data_WVALID <= ap_const_logic_0;
        sext_ln63_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_offset),64));

    zext_ln63_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctx_datalen_0_fu_64),64));
end behav;
